{
    "internal_abi._ptr_RegArgs.Dump": "void __golang internal_abi__ptr_RegArgs_Dump(_ptr_abi_RegArgs)",
    "internal_abi._ptr_RegArgs.IntRegArgAddr": "unsafe_Pointer __golang internal_abi__ptr_RegArgs_IntRegArgAddr(_ptr_abi_RegArgs, int_0, uintptr_0)",
    "internal_abi._ptr_IntArgRegBitmap.Set": "void __golang internal_abi__ptr_IntArgRegBitmap_Set(_ptr_abi_IntArgRegBitmap, int_0)",
    "internal_abi._ptr_IntArgRegBitmap.Get": "bool __golang internal_abi__ptr_IntArgRegBitmap_Get(_ptr_abi_IntArgRegBitmap, int_0)",
    "internal_abi.Kind.String": "string_0 __golang internal_abi_Kind_String(abi_Kind)",
    "internal_abi._ptr_Type.Kind": "abi_Kind __golang internal_abi__ptr_Type_Kind(_ptr_abi_Type)",
    "internal_abi._ptr_Type.HasName": "bool __golang internal_abi__ptr_Type_HasName(_ptr_abi_Type)",
    "internal_abi._ptr_Type.Pointers": "bool __golang internal_abi__ptr_Type_Pointers(_ptr_abi_Type)",
    "internal_abi._ptr_Type.IfaceIndir": "bool __golang internal_abi__ptr_Type_IfaceIndir(_ptr_abi_Type)",
    "internal_abi._ptr_Type.IsDirectIface": "bool __golang internal_abi__ptr_Type_IsDirectIface(_ptr_abi_Type)",
    "internal_abi._ptr_Type.GcSlice": "_slice_uint8_0 __golang internal_abi__ptr_Type_GcSlice(_ptr_abi_Type, uintptr_0, uintptr_0)",
    "internal_abi._ptr_UncommonType.Methods": "_slice_abi_Method __golang internal_abi__ptr_UncommonType_Methods(_ptr_abi_UncommonType)",
    "internal_abi._ptr_UncommonType.ExportedMethods": "_slice_abi_Method __golang internal_abi__ptr_UncommonType_ExportedMethods(_ptr_abi_UncommonType)",
    "internal_abi._ptr_Type.Len": "int_0 __golang internal_abi__ptr_Type_Len(_ptr_abi_Type)",
    "internal_abi._ptr_Type.Common": "internal_abi_Type *__golang internal_abi__ptr_Type_Common(internal_abi_Type *t)",
    "internal_abi._ptr_Type.ChanDir": "abi_ChanDir __golang internal_abi__ptr_Type_ChanDir(_ptr_abi_Type)",
    "internal_abi._ptr_Type.Uncommon": "_ptr_abi_UncommonType __golang internal_abi__ptr_Type_Uncommon(_ptr_abi_Type)",
    "internal_abi._ptr_Type.Elem": "internal_abi_Type *__golang internal_abi__ptr_Type_Elem(internal_abi_Type *t)",
    "internal_abi._ptr_Type.StructType": "_ptr_abi_StructType __golang internal_abi__ptr_Type_StructType(_ptr_abi_Type)",
    "internal_abi._ptr_Type.MapType": "_ptr_abi_MapType __golang internal_abi__ptr_Type_MapType(_ptr_abi_Type)",
    "internal_abi._ptr_Type.ArrayType": "_ptr_abi_ArrayType __golang internal_abi__ptr_Type_ArrayType(_ptr_abi_Type)",
    "internal_abi._ptr_Type.FuncType": "_ptr_abi_FuncType __golang internal_abi__ptr_Type_FuncType(_ptr_abi_Type)",
    "internal_abi._ptr_Type.InterfaceType": "_ptr_abi_InterfaceType __golang internal_abi__ptr_Type_InterfaceType(_ptr_abi_Type)",
    "internal_abi._ptr_Type.Size": "uintptr_0 __golang internal_abi__ptr_Type_Size(_ptr_abi_Type)",
    "internal_abi._ptr_Type.Align": "int_0 __golang internal_abi__ptr_Type_Align(_ptr_abi_Type)",
    "internal_abi._ptr_Type.FieldAlign": "int_0 __golang internal_abi__ptr_Type_FieldAlign(_ptr_abi_Type)",
    "internal_abi._ptr_Type.ExportedMethods": "_slice_abi_Method __golang internal_abi__ptr_Type_ExportedMethods(_ptr_abi_Type)",
    "internal_abi._ptr_Type.NumMethod": "int_0 __golang internal_abi__ptr_Type_NumMethod(_ptr_abi_Type)",
    "internal_abi._ptr_InterfaceType.NumMethod": "int_0 __golang internal_abi__ptr_InterfaceType_NumMethod(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_MapType.IndirectKey": "bool __golang internal_abi__ptr_MapType_IndirectKey(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.IndirectElem": "bool __golang internal_abi__ptr_MapType_IndirectElem(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.ReflexiveKey": "bool __golang internal_abi__ptr_MapType_ReflexiveKey(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.NeedKeyUpdate": "bool __golang internal_abi__ptr_MapType_NeedKeyUpdate(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.HashMightPanic": "bool __golang internal_abi__ptr_MapType_HashMightPanic(_ptr_abi_MapType)",
    "internal_abi._ptr_Type.Key": "internal_abi_Type *__golang internal_abi__ptr_Type_Key(internal_abi_Type *t)",
    "internal_abi._ptr_FuncType.In": "_ptr_abi_Type __golang internal_abi__ptr_FuncType_In(_ptr_abi_FuncType, int_0)",
    "internal_abi._ptr_FuncType.NumIn": "int_0 __golang internal_abi__ptr_FuncType_NumIn(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.NumOut": "int_0 __golang internal_abi__ptr_FuncType_NumOut(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.Out": "_ptr_abi_Type __golang internal_abi__ptr_FuncType_Out(_ptr_abi_FuncType, int_0)",
    "internal_abi._ptr_FuncType.InSlice": "_slice__ptr_abi_Type __golang internal_abi__ptr_FuncType_InSlice(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.OutSlice": "_slice__ptr_abi_Type __golang internal_abi__ptr_FuncType_OutSlice(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.IsVariadic": "bool __golang internal_abi__ptr_FuncType_IsVariadic(_ptr_abi_FuncType)",
    "internal_abi._ptr_StructField.Embedded": "bool __golang internal_abi__ptr_StructField_Embedded(_ptr_abi_StructField)",
    "internal_abi.Name.DataChecked": "_ptr_uint8 __golang internal_abi_Name_DataChecked(abi_Name, int_0, string_0)",
    "internal_abi.Name.Data": "_ptr_uint8 __golang internal_abi_Name_Data(abi_Name, int_0)",
    "internal_abi.Name.IsExported": "bool __golang internal_abi_Name_IsExported(abi_Name)",
    "internal_abi.Name.HasTag": "bool __golang internal_abi_Name_HasTag(abi_Name)",
    "internal_abi.Name.IsEmbedded": "bool __golang internal_abi_Name_IsEmbedded(abi_Name)",
    "internal_abi.Name.IsBlank": "bool __golang internal_abi_Name_IsBlank(abi_Name)",
    "internal_abi.Name.Name": "string_0 __golang internal_abi_Name_Name(abi_Name)",
    "internal_abi.Name.Tag": "string_0 __golang internal_abi_Name_Tag(abi_Name)",
    "internal_abi.NewName": "internal_abi_Name __golang internal_abi_NewName(string n, string tag, bool exported, bool embedded)",
    "internal_abi._ptr_Kind.String": "string_0 __golang internal_abi__ptr_Kind_String(_ptr_abi_Kind)",
    "internal_abi._ptr_Name.Data": "_ptr_uint8 __golang internal_abi__ptr_Name_Data(_ptr_abi_Name, int_0)",
    "internal_abi._ptr_Name.DataChecked": "_ptr_uint8 __golang internal_abi__ptr_Name_DataChecked(_ptr_abi_Name, int_0, string_0)",
    "internal_abi._ptr_Name.HasTag": "bool __golang internal_abi__ptr_Name_HasTag(_ptr_abi_Name)",
    "internal_abi._ptr_Name.IsBlank": "bool __golang internal_abi__ptr_Name_IsBlank(_ptr_abi_Name)",
    "internal_abi._ptr_Name.IsEmbedded": "bool __golang internal_abi__ptr_Name_IsEmbedded(_ptr_abi_Name)",
    "internal_abi._ptr_Name.IsExported": "bool __golang internal_abi__ptr_Name_IsExported(_ptr_abi_Name)",
    "internal_abi._ptr_Name.Name": "string_0 __golang internal_abi__ptr_Name_Name(_ptr_abi_Name)",
    "internal_abi._ptr_Name.Tag": "string_0 __golang internal_abi__ptr_Name_Tag(_ptr_abi_Name)",
    "internal_abi._ptr_StructType.Align": "int_0 __golang internal_abi__ptr_StructType_Align(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.ArrayType": "internal_abi_ArrayType *__golang internal_abi__ptr_StructType_ArrayType(internal_abi_StructType *t)",
    "internal_abi._ptr_StructType.ChanDir": "abi_ChanDir __golang internal_abi__ptr_StructType_ChanDir(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.Common": "internal_abi_Type *__golang internal_abi__ptr_StructType_Common(internal_abi_StructType *t)",
    "internal_abi._ptr_StructType.Elem": "internal_abi_Type *__golang internal_abi__ptr_StructType_Elem(internal_abi_StructType *t)",
    "internal_abi._ptr_StructType.ExportedMethods": "_slice_abi_Method __golang internal_abi__ptr_StructType_ExportedMethods(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.FieldAlign": "int_0 __golang internal_abi__ptr_StructType_FieldAlign(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.FuncType": "internal_abi_FuncType *__golang internal_abi__ptr_StructType_FuncType(internal_abi_StructType *t)",
    "internal_abi._ptr_StructType.GcSlice": "_slice_uint8_0 __golang internal_abi__ptr_StructType_GcSlice(_ptr_abi_StructType, uintptr_0, uintptr_0)",
    "internal_abi._ptr_StructType.HasName": "bool __golang internal_abi__ptr_StructType_HasName(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.IfaceIndir": "bool __golang internal_abi__ptr_StructType_IfaceIndir(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.InterfaceType": "internal_abi_InterfaceType *__golang internal_abi__ptr_StructType_InterfaceType(internal_abi_StructType *t)",
    "internal_abi._ptr_StructType.IsDirectIface": "bool __golang internal_abi__ptr_StructType_IsDirectIface(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.Key": "internal_abi_Type *__golang internal_abi__ptr_StructType_Key(internal_abi_StructType *t)",
    "internal_abi._ptr_StructType.Kind": "abi_Kind __golang internal_abi__ptr_StructType_Kind(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.Len": "int_0 __golang internal_abi__ptr_StructType_Len(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.MapType": "internal_abi_MapType *__golang internal_abi__ptr_StructType_MapType(internal_abi_StructType *t)",
    "internal_abi._ptr_StructType.NumMethod": "int_0 __golang internal_abi__ptr_StructType_NumMethod(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.Pointers": "bool __golang internal_abi__ptr_StructType_Pointers(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.Size": "uintptr_0 __golang internal_abi__ptr_StructType_Size(_ptr_abi_StructType)",
    "internal_abi._ptr_StructType.StructType": "internal_abi_StructType *__golang internal_abi__ptr_StructType_StructType(internal_abi_StructType *t)",
    "internal_abi._ptr_StructType.Uncommon": "_ptr_abi_UncommonType __golang internal_abi__ptr_StructType_Uncommon(_ptr_abi_StructType)",
    "internal_abi._ptr_MapType.Align": "int_0 __golang internal_abi__ptr_MapType_Align(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.ArrayType": "internal_abi_ArrayType *__golang internal_abi__ptr_MapType_ArrayType(internal_abi_MapType *t)",
    "internal_abi._ptr_MapType.ChanDir": "abi_ChanDir __golang internal_abi__ptr_MapType_ChanDir(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.Common": "internal_abi_Type *__golang internal_abi__ptr_MapType_Common(internal_abi_MapType *t)",
    "internal_abi._ptr_MapType.ExportedMethods": "_slice_abi_Method __golang internal_abi__ptr_MapType_ExportedMethods(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.FieldAlign": "int_0 __golang internal_abi__ptr_MapType_FieldAlign(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.FuncType": "internal_abi_FuncType *__golang internal_abi__ptr_MapType_FuncType(internal_abi_MapType *t)",
    "internal_abi._ptr_MapType.GcSlice": "_slice_uint8_0 __golang internal_abi__ptr_MapType_GcSlice(_ptr_abi_MapType, uintptr_0, uintptr_0)",
    "internal_abi._ptr_MapType.HasName": "bool __golang internal_abi__ptr_MapType_HasName(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.IfaceIndir": "bool __golang internal_abi__ptr_MapType_IfaceIndir(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.InterfaceType": "internal_abi_InterfaceType *__golang internal_abi__ptr_MapType_InterfaceType(internal_abi_MapType *t)",
    "internal_abi._ptr_MapType.IsDirectIface": "bool __golang internal_abi__ptr_MapType_IsDirectIface(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.Kind": "abi_Kind __golang internal_abi__ptr_MapType_Kind(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.Len": "int_0 __golang internal_abi__ptr_MapType_Len(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.MapType": "internal_abi_MapType *__golang internal_abi__ptr_MapType_MapType(internal_abi_MapType *t)",
    "internal_abi._ptr_MapType.NumMethod": "int_0 __golang internal_abi__ptr_MapType_NumMethod(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.Pointers": "bool __golang internal_abi__ptr_MapType_Pointers(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.Size": "uintptr_0 __golang internal_abi__ptr_MapType_Size(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.StructType": "_ptr_abi_StructType __golang internal_abi__ptr_MapType_StructType(_ptr_abi_MapType)",
    "internal_abi._ptr_MapType.Uncommon": "_ptr_abi_UncommonType __golang internal_abi__ptr_MapType_Uncommon(_ptr_abi_MapType)",
    "internal_abi._ptr_ArrayType.Align": "int_0 __golang internal_abi__ptr_ArrayType_Align(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.ArrayType": "internal_abi_ArrayType *__golang internal_abi__ptr_ArrayType_ArrayType(internal_abi_ArrayType *t)",
    "internal_abi._ptr_ArrayType.ChanDir": "abi_ChanDir __golang internal_abi__ptr_ArrayType_ChanDir(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.Common": "internal_abi_Type *__golang internal_abi__ptr_ArrayType_Common(internal_abi_ArrayType *t)",
    "internal_abi._ptr_ArrayType.ExportedMethods": "_slice_abi_Method __golang internal_abi__ptr_ArrayType_ExportedMethods(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.FieldAlign": "int_0 __golang internal_abi__ptr_ArrayType_FieldAlign(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.FuncType": "_ptr_abi_FuncType __golang internal_abi__ptr_ArrayType_FuncType(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.GcSlice": "_slice_uint8_0 __golang internal_abi__ptr_ArrayType_GcSlice(_ptr_abi_ArrayType, uintptr_0, uintptr_0)",
    "internal_abi._ptr_ArrayType.HasName": "bool __golang internal_abi__ptr_ArrayType_HasName(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.IfaceIndir": "bool __golang internal_abi__ptr_ArrayType_IfaceIndir(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.InterfaceType": "_ptr_abi_InterfaceType __golang internal_abi__ptr_ArrayType_InterfaceType(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.IsDirectIface": "bool __golang internal_abi__ptr_ArrayType_IsDirectIface(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.Key": "internal_abi_Type *__golang internal_abi__ptr_ArrayType_Key(internal_abi_ArrayType *t)",
    "internal_abi._ptr_ArrayType.Kind": "abi_Kind __golang internal_abi__ptr_ArrayType_Kind(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.MapType": "_ptr_abi_MapType __golang internal_abi__ptr_ArrayType_MapType(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.NumMethod": "int_0 __golang internal_abi__ptr_ArrayType_NumMethod(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.Pointers": "bool __golang internal_abi__ptr_ArrayType_Pointers(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.Size": "uintptr_0 __golang internal_abi__ptr_ArrayType_Size(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.StructType": "_ptr_abi_StructType __golang internal_abi__ptr_ArrayType_StructType(_ptr_abi_ArrayType)",
    "internal_abi._ptr_ArrayType.Uncommon": "_ptr_abi_UncommonType __golang internal_abi__ptr_ArrayType_Uncommon(_ptr_abi_ArrayType)",
    "internal_abi._ptr_FuncType.Align": "int_0 __golang internal_abi__ptr_FuncType_Align(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.ArrayType": "internal_abi_ArrayType *__golang internal_abi__ptr_FuncType_ArrayType(internal_abi_FuncType *t)",
    "internal_abi._ptr_FuncType.ChanDir": "abi_ChanDir __golang internal_abi__ptr_FuncType_ChanDir(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.Common": "internal_abi_Type *__golang internal_abi__ptr_FuncType_Common(internal_abi_FuncType *t)",
    "internal_abi._ptr_FuncType.Elem": "internal_abi_Type *__golang internal_abi__ptr_FuncType_Elem(internal_abi_FuncType *t)",
    "internal_abi._ptr_FuncType.ExportedMethods": "_slice_abi_Method __golang internal_abi__ptr_FuncType_ExportedMethods(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.FieldAlign": "int_0 __golang internal_abi__ptr_FuncType_FieldAlign(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.FuncType": "internal_abi_FuncType *__golang internal_abi__ptr_FuncType_FuncType(internal_abi_FuncType *t)",
    "internal_abi._ptr_FuncType.GcSlice": "_slice_uint8_0 __golang internal_abi__ptr_FuncType_GcSlice(_ptr_abi_FuncType, uintptr_0, uintptr_0)",
    "internal_abi._ptr_FuncType.HasName": "bool __golang internal_abi__ptr_FuncType_HasName(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.IfaceIndir": "bool __golang internal_abi__ptr_FuncType_IfaceIndir(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.InterfaceType": "_ptr_abi_InterfaceType __golang internal_abi__ptr_FuncType_InterfaceType(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.IsDirectIface": "bool __golang internal_abi__ptr_FuncType_IsDirectIface(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.Key": "internal_abi_Type *__golang internal_abi__ptr_FuncType_Key(internal_abi_FuncType *t)",
    "internal_abi._ptr_FuncType.Kind": "abi_Kind __golang internal_abi__ptr_FuncType_Kind(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.Len": "int_0 __golang internal_abi__ptr_FuncType_Len(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.MapType": "_ptr_abi_MapType __golang internal_abi__ptr_FuncType_MapType(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.NumMethod": "int_0 __golang internal_abi__ptr_FuncType_NumMethod(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.Pointers": "bool __golang internal_abi__ptr_FuncType_Pointers(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.Size": "uintptr_0 __golang internal_abi__ptr_FuncType_Size(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.StructType": "_ptr_abi_StructType __golang internal_abi__ptr_FuncType_StructType(_ptr_abi_FuncType)",
    "internal_abi._ptr_FuncType.Uncommon": "_ptr_abi_UncommonType __golang internal_abi__ptr_FuncType_Uncommon(_ptr_abi_FuncType)",
    "internal_abi._ptr_InterfaceType.Align": "int_0 __golang internal_abi__ptr_InterfaceType_Align(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.ArrayType": "internal_abi_ArrayType *__golang internal_abi__ptr_InterfaceType_ArrayType(internal_abi_InterfaceType *t)",
    "internal_abi._ptr_InterfaceType.ChanDir": "abi_ChanDir __golang internal_abi__ptr_InterfaceType_ChanDir(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.Common": "internal_abi_Type *__golang internal_abi__ptr_InterfaceType_Common(internal_abi_InterfaceType *t)",
    "internal_abi._ptr_InterfaceType.Elem": "internal_abi_Type *__golang internal_abi__ptr_InterfaceType_Elem(internal_abi_InterfaceType *t)",
    "internal_abi._ptr_InterfaceType.ExportedMethods": "_slice_abi_Method __golang internal_abi__ptr_InterfaceType_ExportedMethods(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.FieldAlign": "int_0 __golang internal_abi__ptr_InterfaceType_FieldAlign(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.FuncType": "internal_abi_FuncType *__golang internal_abi__ptr_InterfaceType_FuncType(internal_abi_InterfaceType *t)",
    "internal_abi._ptr_InterfaceType.GcSlice": "_slice_uint8_0 __golang internal_abi__ptr_InterfaceType_GcSlice(_ptr_abi_InterfaceType, uintptr_0, uintptr_0)",
    "internal_abi._ptr_InterfaceType.HasName": "bool __golang internal_abi__ptr_InterfaceType_HasName(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.IfaceIndir": "bool __golang internal_abi__ptr_InterfaceType_IfaceIndir(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.InterfaceType": "internal_abi_InterfaceType *__golang internal_abi__ptr_InterfaceType_InterfaceType(internal_abi_InterfaceType *t)",
    "internal_abi._ptr_InterfaceType.IsDirectIface": "bool __golang internal_abi__ptr_InterfaceType_IsDirectIface(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.Key": "internal_abi_Type *__golang internal_abi__ptr_InterfaceType_Key(internal_abi_InterfaceType *t)",
    "internal_abi._ptr_InterfaceType.Kind": "abi_Kind __golang internal_abi__ptr_InterfaceType_Kind(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.Len": "int_0 __golang internal_abi__ptr_InterfaceType_Len(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.MapType": "_ptr_abi_MapType __golang internal_abi__ptr_InterfaceType_MapType(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.Pointers": "bool __golang internal_abi__ptr_InterfaceType_Pointers(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.Size": "uintptr_0 __golang internal_abi__ptr_InterfaceType_Size(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.StructType": "_ptr_abi_StructType __golang internal_abi__ptr_InterfaceType_StructType(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_InterfaceType.Uncommon": "_ptr_abi_UncommonType __golang internal_abi__ptr_InterfaceType_Uncommon(_ptr_abi_InterfaceType)",
    "internal_abi._ptr_PtrType.Align": "int_0 __golang internal_abi__ptr_PtrType_Align(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.ArrayType": "_ptr_abi_ArrayType __golang internal_abi__ptr_PtrType_ArrayType(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.ChanDir": "abi_ChanDir __golang internal_abi__ptr_PtrType_ChanDir(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.Common": "_ptr_abi_Type __golang internal_abi__ptr_PtrType_Common(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.ExportedMethods": "_slice_abi_Method __golang internal_abi__ptr_PtrType_ExportedMethods(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.FieldAlign": "int_0 __golang internal_abi__ptr_PtrType_FieldAlign(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.FuncType": "_ptr_abi_FuncType __golang internal_abi__ptr_PtrType_FuncType(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.GcSlice": "_slice_uint8_0 __golang internal_abi__ptr_PtrType_GcSlice(_ptr_abi_PtrType, uintptr_0, uintptr_0)",
    "internal_abi._ptr_PtrType.HasName": "bool __golang internal_abi__ptr_PtrType_HasName(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.IfaceIndir": "bool __golang internal_abi__ptr_PtrType_IfaceIndir(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.InterfaceType": "_ptr_abi_InterfaceType __golang internal_abi__ptr_PtrType_InterfaceType(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.IsDirectIface": "bool __golang internal_abi__ptr_PtrType_IsDirectIface(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.Key": "_ptr_abi_Type __golang internal_abi__ptr_PtrType_Key(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.Kind": "abi_Kind __golang internal_abi__ptr_PtrType_Kind(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.Len": "int_0 __golang internal_abi__ptr_PtrType_Len(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.MapType": "_ptr_abi_MapType __golang internal_abi__ptr_PtrType_MapType(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.NumMethod": "int_0 __golang internal_abi__ptr_PtrType_NumMethod(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.Pointers": "bool __golang internal_abi__ptr_PtrType_Pointers(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.Size": "uintptr_0 __golang internal_abi__ptr_PtrType_Size(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.StructType": "_ptr_abi_StructType __golang internal_abi__ptr_PtrType_StructType(_ptr_abi_PtrType)",
    "internal_abi._ptr_PtrType.Uncommon": "_ptr_abi_UncommonType __golang internal_abi__ptr_PtrType_Uncommon(_ptr_abi_PtrType)",
    "internal_cpu.Initialize": "void __golang internal_cpu_Initialize(string env)",
    "internal_cpu.processOptions": "void __golang internal_cpu_processOptions(string env)",
    "internal_cpu.doinit": "void __golang internal_cpu_doinit()",
    "internal_cpu.cpuid": "void __golang internal_cpu_cpuid()",
    "internal_cpu.xgetbv": "void __golang internal_cpu_xgetbv()",
    "internal_cpu.getGOAMD64level": "void __golang internal_cpu_getGOAMD64level()",
    "runtime_internal_atomic._ptr_Int64.Load": "int64_0 __golang runtime_internal_atomic__ptr_Int64_Load(_ptr_atomic_Int64_0)",
    "runtime_internal_atomic._ptr_Int64.Store": "void __golang runtime_internal_atomic__ptr_Int64_Store(_ptr_atomic_Int64_0, int64_0)",
    "runtime_internal_atomic._ptr_Int64.CompareAndSwap": "bool __golang runtime_internal_atomic__ptr_Int64_CompareAndSwap(_ptr_atomic_Int64_0, int64_0, int64_0)",
    "runtime_internal_atomic._ptr_Int64.Swap": "int64_0 __golang runtime_internal_atomic__ptr_Int64_Swap(_ptr_atomic_Int64_0, int64_0)",
    "runtime_internal_atomic._ptr_Int64.Add": "int64_0 __golang runtime_internal_atomic__ptr_Int64_Add(_ptr_atomic_Int64_0, int64_0)",
    "runtime_internal_atomic._ptr_Uint8.Load": "uint8_0 __golang runtime_internal_atomic__ptr_Uint8_Load(_ptr_atomic_Uint8)",
    "runtime_internal_atomic._ptr_Uint8.Store": "void __golang runtime_internal_atomic__ptr_Uint8_Store(_ptr_atomic_Uint8, uint8_0)",
    "runtime_internal_atomic._ptr_Uint8.And": "void __golang runtime_internal_atomic__ptr_Uint8_And(_ptr_atomic_Uint8, uint8_0)",
    "runtime_internal_atomic._ptr_Uint8.Or": "void __golang runtime_internal_atomic__ptr_Uint8_Or(_ptr_atomic_Uint8, uint8_0)",
    "runtime_internal_atomic._ptr_Bool.Load": "bool __golang runtime_internal_atomic__ptr_Bool_Load(_ptr_atomic_Bool_0)",
    "runtime_internal_atomic._ptr_Bool.Store": "void __golang runtime_internal_atomic__ptr_Bool_Store(_ptr_atomic_Bool_0, bool)",
    "runtime_internal_atomic._ptr_Uint32.Load": "uint32_0 __golang runtime_internal_atomic__ptr_Uint32_Load(_ptr_atomic_Uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.LoadAcquire": "uint32_0 __golang runtime_internal_atomic__ptr_Uint32_LoadAcquire(_ptr_atomic_Uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.Store": "void __golang runtime_internal_atomic__ptr_Uint32_Store(_ptr_atomic_Uint32_0, uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.StoreRelease": "void __golang runtime_internal_atomic__ptr_Uint32_StoreRelease(_ptr_atomic_Uint32_0, uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.CompareAndSwap": "bool __golang runtime_internal_atomic__ptr_Uint32_CompareAndSwap(_ptr_atomic_Uint32_0, uint32_0, uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.CompareAndSwapRelease": "bool __golang runtime_internal_atomic__ptr_Uint32_CompareAndSwapRelease(_ptr_atomic_Uint32_0, uint32_0, uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.Swap": "uint32_0 __golang runtime_internal_atomic__ptr_Uint32_Swap(_ptr_atomic_Uint32_0, uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.And": "void __golang runtime_internal_atomic__ptr_Uint32_And(_ptr_atomic_Uint32_0, uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.Or": "void __golang runtime_internal_atomic__ptr_Uint32_Or(_ptr_atomic_Uint32_0, uint32_0)",
    "runtime_internal_atomic._ptr_Uint32.Add": "uint32_0 __golang runtime_internal_atomic__ptr_Uint32_Add(_ptr_atomic_Uint32_0, int32_0)",
    "runtime_internal_atomic._ptr_Uintptr.Load": "uintptr_0 __golang runtime_internal_atomic__ptr_Uintptr_Load(_ptr_atomic_Uintptr)",
    "runtime_internal_atomic._ptr_Uintptr.LoadAcquire": "uintptr_0 __golang runtime_internal_atomic__ptr_Uintptr_LoadAcquire(_ptr_atomic_Uintptr)",
    "runtime_internal_atomic._ptr_Uintptr.Store": "void __golang runtime_internal_atomic__ptr_Uintptr_Store(_ptr_atomic_Uintptr, uintptr_0)",
    "runtime_internal_atomic._ptr_Uintptr.StoreRelease": "void __golang runtime_internal_atomic__ptr_Uintptr_StoreRelease(_ptr_atomic_Uintptr, uintptr_0)",
    "runtime_internal_atomic._ptr_Uintptr.CompareAndSwap": "bool __golang runtime_internal_atomic__ptr_Uintptr_CompareAndSwap(_ptr_atomic_Uintptr, uintptr_0, uintptr_0)",
    "runtime_internal_atomic._ptr_Uintptr.Swap": "uintptr_0 __golang runtime_internal_atomic__ptr_Uintptr_Swap(_ptr_atomic_Uintptr, uintptr_0)",
    "runtime_internal_atomic._ptr_Uintptr.Add": "uintptr_0 __golang runtime_internal_atomic__ptr_Uintptr_Add(_ptr_atomic_Uintptr, uintptr_0)",
    "runtime_internal_atomic._ptr_UnsafePointer.Load": "unsafe_Pointer __golang runtime_internal_atomic__ptr_UnsafePointer_Load(_ptr_atomic_UnsafePointer)",
    "runtime_internal_atomic._ptr_UnsafePointer.StoreNoWB": "void __golang runtime_internal_atomic__ptr_UnsafePointer_StoreNoWB(_ptr_atomic_UnsafePointer, unsafe_Pointer)",
    "runtime_internal_atomic._ptr_UnsafePointer.Store": "void __golang runtime_internal_atomic__ptr_UnsafePointer_Store(_ptr_atomic_UnsafePointer, unsafe_Pointer)",
    "runtime_internal_atomic._ptr_UnsafePointer.CompareAndSwapNoWB": "bool __golang runtime_internal_atomic__ptr_UnsafePointer_CompareAndSwapNoWB(_ptr_atomic_UnsafePointer, unsafe_Pointer, unsafe_Pointer)",
    "runtime_internal_atomic._ptr_UnsafePointer.CompareAndSwap": "bool __golang runtime_internal_atomic__ptr_UnsafePointer_CompareAndSwap(_ptr_atomic_UnsafePointer, unsafe_Pointer, unsafe_Pointer)",
    "runtime_internal_atomic._ptr_noCopy.Lock": "void __golang runtime_internal_atomic__ptr_noCopy_Lock(_ptr_atomic_noCopy_0)",
    "runtime_internal_atomic._ptr_noCopy.Unlock": "void __golang runtime_internal_atomic__ptr_noCopy_Unlock(_ptr_atomic_noCopy_0)",
    "runtime_internal_sys.OnesCount64": "int __golang runtime_internal_sys_OnesCount64(uint64 x)",
    "internal_bytealg.countGeneric": "int __golang internal_bytealg_countGeneric(_slice_uint8 b, uint8 c)",
    "internal_bytealg.countGenericString": "int __golang internal_bytealg_countGenericString(string s, uint8 c)",
    "internal_bytealg.Compare": "void __golang internal_bytealg_Compare()",
    "runtime.cmpstring": "void __golang runtime_cmpstring()",
    "internal_bytealg.Count": "void __golang internal_bytealg_Count()",
    "internal_bytealg.CountString": "void __golang internal_bytealg_CountString()",
    "runtime.memequal": "void __golang runtime_memequal(void *p1, void *p2, uintptr len)",
    "runtime.memequal_varlen": "void __golang runtime_memequal_varlen()",
    "internal_bytealg.Index": "void __golang internal_bytealg_Index()",
    "internal_bytealg.IndexString": "void __golang internal_bytealg_IndexString()",
    "internal_bytealg.IndexByte": "void __golang internal_bytealg_IndexByte()",
    "internal_bytealg.IndexByteString": "void __golang internal_bytealg_IndexByteString()",
    "internal_bytealg.countGeneric_0": "int __golang internal_bytealg_countGeneric_0(_slice_uint8 b, uint8 c)",
    "internal_bytealg.countGenericString_0": "int __golang internal_bytealg_countGenericString_0(string s, uint8 c)",
    "runtime_internal_syscall.Syscall6": "void __golang runtime_internal_syscall_Syscall6()",
    "internal_chacha8rand._ptr_State.Init": "void __golang internal_chacha8rand__ptr_State_Init(_ptr_chacha8rand_State, _32_uint8)",
    "internal_chacha8rand._ptr_State.Init64": "void __golang internal_chacha8rand__ptr_State_Init64(_ptr_chacha8rand_State, _4_uint64)",
    "internal_chacha8rand._ptr_State.Refill": "void __golang internal_chacha8rand__ptr_State_Refill(_ptr_chacha8rand_State)",
    "internal_chacha8rand._ptr_State.Reseed": "void __golang internal_chacha8rand__ptr_State_Reseed(_ptr_chacha8rand_State)",
    "internal_chacha8rand.block": "void __golang internal_chacha8rand_block()",
    "runtime.memhash8": "uintptr __golang runtime_memhash8(void *p, uintptr h)",
    "runtime.memhash16": "uintptr __golang runtime_memhash16(void *p, uintptr h)",
    "runtime.memhash128": "uintptr __golang runtime_memhash128(void *p, uintptr h)",
    "runtime.memhash_varlen": "uintptr __golang runtime_memhash_varlen(void *p, uintptr h)",
    "runtime.strhashFallback": "uintptr __golang runtime_strhashFallback(void *a, uintptr h)",
    "runtime.f32hash": "uintptr __golang runtime_f32hash(void *p, uintptr h)",
    "runtime.f64hash": "uintptr __golang runtime_f64hash(void *p, uintptr h)",
    "runtime.c64hash": "uintptr __golang runtime_c64hash(void *p, uintptr h)",
    "runtime.c128hash": "uintptr __golang runtime_c128hash(void *p, uintptr h)",
    "runtime.interhash": "uintptr __golang runtime_interhash(void *p, uintptr h)",
    "runtime.nilinterhash": "uintptr __golang runtime_nilinterhash(void *p, uintptr h)",
    "runtime.typehash": "uintptr __golang runtime_typehash(internal_abi_Type *t, void *p, uintptr h)",
    "runtime.mapKeyError2": "error __golang runtime_mapKeyError2(internal_abi_Type *t, void *p)",
    "runtime.memequal0": "bool __golang runtime_memequal0(void *p, void *q)",
    "runtime.memequal8": "bool __golang runtime_memequal8(void *p, void *q)",
    "runtime.memequal16": "bool __golang runtime_memequal16(void *p, void *q)",
    "runtime.memequal32": "bool __golang runtime_memequal32(void *p, void *q)",
    "runtime.memequal64": "bool __golang runtime_memequal64(void *p, void *q)",
    "runtime.memequal128": "bool __golang runtime_memequal128(void *p, void *q)",
    "runtime.f32equal": "bool __golang runtime_f32equal(void *p, void *q)",
    "runtime.f64equal": "bool __golang runtime_f64equal(void *p, void *q)",
    "runtime.c64equal": "bool __golang runtime_c64equal(void *p, void *q)",
    "runtime.c128equal": "bool __golang runtime_c128equal(void *p, void *q)",
    "runtime.strequal": "bool __golang runtime_strequal(void *p, void *q)",
    "runtime.interequal": "bool __golang runtime_interequal(void *p, void *q)",
    "runtime.nilinterequal": "bool __golang runtime_nilinterequal(void *p, void *q)",
    "runtime.efaceeq": "bool __golang runtime_efaceeq(internal_abi_Type *t, void *x, void *y)",
    "runtime.ifaceeq": "bool __golang runtime_ifaceeq(runtime_itab *tab, void *x, void *y)",
    "runtime.alginit": "void __golang runtime_alginit()",
    "runtime._ptr_mspan.setUserArenaChunkToFault": "void __golang runtime__ptr_mspan_setUserArenaChunkToFault(_ptr_runtime_mspan)",
    "runtime.atomicwb": "void __golang runtime_atomicwb(void **ptr, void *new)",
    "runtime.cgoUse": "interface_ __golang __noreturn runtime_cgoUse()",
    "runtime.munmap": "void __golang runtime_munmap(void *addr, uintptr n)",
    "runtime.sigaction": "void __golang runtime_sigaction(uint32 sig, runtime_sigactiont *new, runtime_sigactiont *old)",
    "runtime.cgocall": "int32 __golang runtime_cgocall(void *fn, void *arg)",
    "runtime.callbackUpdateSystemStack": "void __golang runtime_callbackUpdateSystemStack(runtime_m *mp, uintptr sp_0, bool signal)",
    "runtime.cgocallbackg": "void __golang runtime_cgocallbackg(void *fn, void *frame, uintptr ctxt)",
    "runtime.cgocallbackg1": "void __golang runtime_cgocallbackg1(void *fn, void *frame, uintptr ctxt)",
    "runtime.cgocallbackg1.deferwrap2": "void __golang runtime_cgocallbackg1_deferwrap2()",
    "runtime.cgocallbackg1.deferwrap1": "void __golang runtime_cgocallbackg1_deferwrap1()",
    "runtime.unwindm": "void __golang runtime_unwindm(bool *restore)",
    "runtime.cgoCheckPointer": "void __golang runtime_cgoCheckPointer(interface_ ptr, interface_ arg)",
    "runtime.cgoCheckArg": "void __golang runtime_cgoCheckArg(internal_abi_Type *t, void *p, bool indir, bool top, string msg)",
    "runtime.cgoIsGoPointer": "bool __golang runtime_cgoIsGoPointer(void *p)",
    "runtime.makechan": "runtime_hchan *__golang runtime_makechan(internal_abi_ChanType *t, int size)",
    "runtime.chansend1": "void __golang runtime_chansend1(runtime_hchan *c, void *elem)",
    "runtime.chansend": "bool __golang runtime_chansend(runtime_hchan *c, void *ep, bool block, uintptr callerpc)",
    "runtime.send": "void __golang runtime_send(runtime_hchan *c, runtime_sudog *sg, void *ep, func unlockf, int skip)",
    "runtime.sendDirect": "void __golang runtime_sendDirect(internal_abi_Type *t, runtime_sudog *sg, void *src)",
    "runtime.recvDirect": "void __golang runtime_recvDirect(internal_abi_Type *t, runtime_sudog *sg, void *dst)",
    "runtime.closechan": "void __golang runtime_closechan(runtime_hchan *c)",
    "runtime.chanrecv1": "void __golang runtime_chanrecv1(runtime_hchan *c, void *elem)",
    "runtime.chanrecv2": "bool __golang runtime_chanrecv2(runtime_hchan *c, void *elem)",
    "runtime.recv": "void __golang runtime_recv(runtime_hchan *c, runtime_sudog *sg, void *ep, func unlockf, int skip)",
    "runtime.chanparkcommit": "bool __golang runtime_chanparkcommit(runtime_g *gp, void *chanLock)",
    "runtime.selectnbsend": "bool __golang runtime_selectnbsend(runtime_hchan *c, void *elem)",
    "runtime._ptr_cpuProfile.add": "void __golang runtime__ptr_cpuProfile_add(runtime_cpuProfile *p, void **tagPtr, _slice_uintptr stk)",
    "runtime._ptr_cpuProfile.addNonGo": "void __golang runtime__ptr_cpuProfile_addNonGo(runtime_cpuProfile *p, _slice_uintptr stk)",
    "runtime._ptr_cpuProfile.addExtra": "void __golang runtime__ptr_cpuProfile_addExtra(runtime_cpuProfile *p)",
    "runtime.GOMAXPROCS": "int __golang runtime_GOMAXPROCS(int n)",
    "runtime.debugCallCheck": "string __golang runtime_debugCallCheck(uintptr pc)",
    "runtime.debugCallWrap": "void __golang runtime_debugCallWrap(uintptr dispatch)",
    "runtime.debugCallWrap1": "void __golang runtime_debugCallWrap1()",
    "runtime.debugCallWrap2": "void __golang runtime_debugCallWrap2(uintptr dispatch)",
    "runtime.gogetenv": "string __golang runtime_gogetenv(string key)",
    "runtime.setenv_c": "void __golang runtime_setenv_c(string k, string v)",
    "runtime.unsetenv_c": "void __golang runtime_unsetenv_c(string k)",
    "runtime._ptr_TypeAssertionError.RuntimeError": "void __golang runtime__ptr_TypeAssertionError_RuntimeError(_ptr_runtime_TypeAssertionError)",
    "runtime._ptr_TypeAssertionError.Error": "string_0 __golang runtime__ptr_TypeAssertionError_Error(_ptr_runtime_TypeAssertionError)",
    "runtime.errorString.RuntimeError": "void __golang runtime_errorString_RuntimeError(runtime_errorString_0)",
    "runtime.errorString.Error": "string_0 __golang runtime_errorString_Error(runtime_errorString_0)",
    "runtime.errorAddressString.RuntimeError": "void __golang runtime_errorAddressString_RuntimeError(runtime_errorAddressString_0)",
    "runtime.errorAddressString.Error": "string_0 __golang runtime_errorAddressString_Error(runtime_errorAddressString_0)",
    "runtime.errorAddressString.Addr": "uintptr_0 __golang runtime_errorAddressString_Addr(runtime_errorAddressString_0)",
    "runtime.plainError.RuntimeError": "void __golang runtime_plainError_RuntimeError(runtime_plainError_0)",
    "runtime.plainError.Error": "string_0 __golang runtime_plainError_Error(runtime_plainError_0)",
    "runtime.boundsError.RuntimeError": "void __golang runtime_boundsError_RuntimeError(runtime_boundsError_0)",
    "runtime.boundsError.Error": "string_0 __golang runtime_boundsError_Error(runtime_boundsError_0)",
    "runtime.printany": "void __golang runtime_printany(interface_ i)",
    "runtime.printanycustomtype": "void __golang runtime_printanycustomtype(interface_ i)",
    "runtime.panicwrap": "void __golang __noreturn runtime_panicwrap()",
    "runtime.runExitHooks": "void __golang runtime_runExitHooks(int exitCode)",
    "runtime.checkfds": "void __golang runtime_checkfds()",
    "runtime.memhashFallback": "uintptr __golang runtime_memhashFallback(void *p, uintptr seed, uintptr s)",
    "runtime.memhash32Fallback": "uintptr __golang runtime_memhash32Fallback(void *p, uintptr seed)",
    "runtime.memhash64Fallback": "uintptr __golang runtime_memhash64Fallback(void *p, uintptr seed)",
    "runtime._ptr_timeHistogram.record": "void __golang runtime__ptr_timeHistogram_record(runtime_timeHistogram *h, int64 duration)",
    "runtime._ptr_timeHistogram.write": "void __golang runtime__ptr_timeHistogram_write(runtime_timeHistogram *h, runtime_metricValue *out)",
    "runtime.timeHistogramMetricsBuckets": "_slice_float64 __golang runtime_timeHistogramMetricsBuckets()",
    "runtime.getitab": "runtime_itab *__golang runtime_getitab(internal_abi_InterfaceType *inter, internal_abi_Type *typ, bool canfail)",
    "runtime._ptr_itabTableType.find": "runtime_itab *__golang runtime__ptr_itabTableType_find(runtime_itabTableType *t, internal_abi_InterfaceType *inter, internal_abi_Type *typ)",
    "runtime.itabAdd": "void __golang runtime_itabAdd(runtime_itab *m)",
    "runtime._ptr_itabTableType.add": "void __golang runtime__ptr_itabTableType_add(runtime_itabTableType *t, runtime_itab *m)",
    "runtime.itabsinit": "void __golang runtime_itabsinit()",
    "runtime.panicdottypeE": "void __golang __noreturn runtime_panicdottypeE(internal_abi_Type *have, internal_abi_Type *want, internal_abi_Type *iface)",
    "runtime.panicdottypeI": "void __golang __noreturn runtime_panicdottypeI(runtime_itab *have, internal_abi_Type *want, internal_abi_Type *iface)",
    "runtime.panicnildottype": "void __golang __noreturn runtime_panicnildottype(internal_abi_Type *want)",
    "runtime.convT": "void *__golang runtime_convT(internal_abi_Type *t, void *v)",
    "runtime.convTnoptr": "void *__golang runtime_convTnoptr(internal_abi_Type *t, void *v)",
    "runtime.convT16": "void *__golang runtime_convT16(uint16 val)",
    "runtime.convT32": "void *__golang runtime_convT32(uint32 val)",
    "runtime.convT64": "void *__golang runtime_convT64(uint64 val)",
    "runtime.convTstring": "void *__golang runtime_convTstring(string val)",
    "runtime.convTslice": "void *__golang runtime_convTslice(_slice_uint8 val)",
    "runtime.typeAssert": "runtime_itab *__golang runtime_typeAssert(internal_abi_TypeAssert *s, internal_abi_Type *t)",
    "runtime.buildTypeAssertCache": "internal_abi_TypeAssertCache *__golang runtime_buildTypeAssertCache(internal_abi_TypeAssertCache *oldC, internal_abi_Type *typ, runtime_itab *tab)",
    "runtime.buildInterfaceSwitchCache": "internal_abi_InterfaceSwitchCache *__golang runtime_buildInterfaceSwitchCache(internal_abi_InterfaceSwitchCache *oldC, internal_abi_Type *typ, int case_, runtime_itab *tab)",
    "runtime.iterate_itabs": "void __golang runtime_iterate_itabs(func_ptr_runtime_itab fn)",
    "runtime.unreachableMethod": "void __golang __noreturn runtime_unreachableMethod()",
    "runtime._ptr_lfstack.push": "void __golang runtime__ptr_lfstack_push(unsigned __int64 *head, runtime_lfnode *node)",
    "runtime.lfnodeValidate": "void __golang runtime_lfnodeValidate(runtime_lfnode *node)",
    "runtime.lock": "void __golang runtime_lock(runtime_mutex *l)",
    "runtime.lock2": "void __golang runtime_lock2(runtime_mutex *l)",
    "runtime.unlock": "void __golang runtime_unlock(runtime_mutex *l)",
    "runtime.unlock2": "void __golang runtime_unlock2(runtime_mutex *l)",
    "runtime.notewakeup": "void __golang runtime_notewakeup(runtime_note *n)",
    "runtime.notesleep": "void __golang runtime_notesleep(runtime_note *n)",
    "runtime.notetsleep_internal": "bool __golang runtime_notetsleep_internal(runtime_note *n, int64 ns)",
    "runtime.notetsleep": "bool __golang runtime_notetsleep(runtime_note *n, int64 ns)",
    "runtime.notetsleepg": "bool __golang runtime_notetsleepg(runtime_note *n, int64 ns)",
    "runtime.lockRank.String": "string_0 __golang runtime_lockRank_String(runtime_lockRank)",
    "runtime.mallocinit": "void __golang runtime_mallocinit()",
    "runtime._ptr_mheap.enableMetadataHugePages": "void __golang runtime__ptr_mheap_enableMetadataHugePages(runtime_mheap *h)",
    "runtime.mallocgc": "void *__golang runtime_mallocgc(uintptr size, internal_abi_Type *typ, bool needzero)",
    "runtime.deductAssistCredit": "runtime_g *__golang runtime_deductAssistCredit(uintptr size)",
    "runtime.memclrNoHeapPointersChunked": "void __golang runtime_memclrNoHeapPointersChunked(uintptr size, void *x)",
    "runtime.newobject": "void *__golang runtime_newobject(internal_abi_Type *typ)",
    "runtime.newarray": "void *__golang runtime_newarray(internal_abi_Type *typ, int n)",
    "runtime.profilealloc": "void __golang runtime_profilealloc(runtime_m *mp, void *x, uintptr size)",
    "runtime.fastexprand": "int32 __golang runtime_fastexprand(int mean)",
    "runtime.persistentalloc": "void *__golang runtime_persistentalloc(uintptr size, uintptr align, unsigned __int64 *sysStat)",
    "runtime.persistentalloc1": "runtime_notInHeap *__golang runtime_persistentalloc1(uintptr size, uintptr align, unsigned __int64 *sysStat)",
    "runtime._ptr_linearAlloc.alloc": "void *__golang runtime__ptr_linearAlloc_alloc(runtime_linearAlloc *l, uintptr size, uintptr align, unsigned __int64 *sysStat)",
    "runtime._ptr_hmap.incrnoverflow": "void __golang runtime__ptr_hmap_incrnoverflow(_ptr_runtime_hmap)",
    "runtime._ptr_hmap.newoverflow": "runtime_bmap *__golang runtime__ptr_hmap_newoverflow(runtime_hmap *h, internal_abi_MapType *t, runtime_bmap *b)",
    "runtime.makemap_small": "runtime_hmap *__golang runtime_makemap_small()",
    "runtime.makemap": "runtime_hmap *__golang runtime_makemap(internal_abi_MapType *t, int hint, runtime_hmap *h)",
    "runtime.mapaccess1": "void *__golang runtime_mapaccess1(internal_abi_MapType *t, runtime_hmap *h, void *key)",
    "runtime.mapassign": "void *__golang runtime_mapassign(internal_abi_MapType *t, runtime_hmap *h, void *key)",
    "runtime.mapdelete": "void __golang runtime_mapdelete(internal_abi_MapType *t, runtime_hmap *h, void *key)",
    "runtime.mapiterinit": "void __golang runtime_mapiterinit(internal_abi_MapType *t, runtime_hmap *h, runtime_hiter *it)",
    "runtime.mapiternext": "void __golang runtime_mapiternext(runtime_hiter *it)",
    "runtime.mapclear": "void __golang runtime_mapclear(internal_abi_MapType *t, runtime_hmap *h)",
    "runtime.hashGrow": "void __golang runtime_hashGrow(internal_abi_MapType *t, runtime_hmap *h)",
    "runtime.growWork": "void __golang runtime_growWork(internal_abi_MapType *t, runtime_hmap *h, uintptr bucket)",
    "runtime.evacuate": "void __golang runtime_evacuate(internal_abi_MapType *t, runtime_hmap *h, uintptr oldbucket)",
    "runtime.advanceEvacuationMark": "void __golang runtime_advanceEvacuationMark(runtime_hmap *h, internal_abi_MapType *t, uintptr newbit)",
    "runtime.mapclone2": "runtime_hmap *__golang runtime_mapclone2(internal_abi_MapType *t, runtime_hmap *src)",
    "runtime.mapaccess1_fast32": "void *__golang runtime_mapaccess1_fast32(internal_abi_MapType *t, runtime_hmap *h, uint32 key)",
    "runtime.mapassign_fast32": "void *__golang runtime_mapassign_fast32(internal_abi_MapType *t, runtime_hmap *h, uint32 key)",
    "runtime.mapdelete_fast32": "void __golang runtime_mapdelete_fast32(internal_abi_MapType *t, runtime_hmap *h, uint32 key)",
    "runtime.growWork_fast32": "void __golang runtime_growWork_fast32(internal_abi_MapType *t, runtime_hmap *h, uintptr bucket)",
    "runtime.evacuate_fast32": "void __golang runtime_evacuate_fast32(internal_abi_MapType *t, runtime_hmap *h, uintptr oldbucket)",
    "runtime.mapaccess1_fast64": "void *__golang runtime_mapaccess1_fast64(internal_abi_MapType *t, runtime_hmap *h, uint64 key)",
    "runtime.mapassign_fast64": "void *__golang runtime_mapassign_fast64(internal_abi_MapType *t, runtime_hmap *h, uint64 key)",
    "runtime.mapassign_fast64ptr": "void *__golang runtime_mapassign_fast64ptr(internal_abi_MapType *t, runtime_hmap *h, void *key)",
    "runtime.mapdelete_fast64": "void __golang runtime_mapdelete_fast64(internal_abi_MapType *t, runtime_hmap *h, uint64 key)",
    "runtime.growWork_fast64": "void __golang runtime_growWork_fast64(internal_abi_MapType *t, runtime_hmap *h, uintptr bucket)",
    "runtime.evacuate_fast64": "void __golang runtime_evacuate_fast64(internal_abi_MapType *t, runtime_hmap *h, uintptr oldbucket)",
    "runtime.mapaccess1_faststr": "void *__golang runtime_mapaccess1_faststr(internal_abi_MapType *t, runtime_hmap *h, string ky)",
    "runtime.mapassign_faststr": "void *__golang runtime_mapassign_faststr(internal_abi_MapType *t, runtime_hmap *h, string s)",
    "runtime.mapdelete_faststr": "void __golang runtime_mapdelete_faststr(internal_abi_MapType *t, runtime_hmap *h, string ky)",
    "runtime.growWork_faststr": "void __golang runtime_growWork_faststr(internal_abi_MapType *t, runtime_hmap *h, uintptr bucket)",
    "runtime.evacuate_faststr": "void __golang runtime_evacuate_faststr(internal_abi_MapType *t, runtime_hmap *h, uintptr oldbucket)",
    "runtime.typedmemmove": "void __golang runtime_typedmemmove(internal_abi_Type *typ, void *dst, void *src)",
    "runtime.wbZero": "void __golang runtime_wbZero(internal_abi_Type *typ, void *dst)",
    "runtime.wbMove": "void __golang runtime_wbMove(internal_abi_Type *typ, void *dst, void *src)",
    "runtime.reflectcallmove": "void __golang runtime_reflectcallmove(internal_abi_Type *typ, void *dst, void *src, uintptr size, internal_abi_RegArgs *regs)",
    "runtime.typedslicecopy": "int __golang runtime_typedslicecopy(internal_abi_Type *typ, void *dstPtr, int dstLen, void *srcPtr, int srcLen)",
    "runtime.typedmemclr": "void __golang runtime_typedmemclr(internal_abi_Type *typ, void *ptr)",
    "runtime.memclrHasPointers": "void __golang runtime_memclrHasPointers(void *ptr, uintptr n)",
    "runtime._ptr_mspan.refillAllocCache": "void __golang runtime__ptr_mspan_refillAllocCache(runtime_mspan *s, uint16 whichByte)",
    "runtime._ptr_mspan.nextFreeIndex": "uint16_0 __golang runtime__ptr_mspan_nextFreeIndex(_ptr_runtime_mspan)",
    "runtime.badPointer": "void __golang __noreturn runtime_badPointer(runtime_mspan *s, uintptr p, uintptr refBase, uintptr refOff)",
    "runtime.bulkBarrierBitmap": "void __golang runtime_bulkBarrierBitmap(uintptr dst, uintptr src, uintptr size, uintptr maskOffset, uint8 *bits)",
    "runtime.typeBitsBulkBarrier": "void __golang runtime_typeBitsBulkBarrier(internal_abi_Type *typ, uintptr dst, uintptr src, uintptr size)",
    "runtime.progToPointerMask": "runtime_bitvector __golang runtime_progToPointerMask(uint8 *prog, uintptr size)",
    "runtime.runGCProg": "uintptr __golang runtime_runGCProg(uint8 *prog, uint8 *dst)",
    "runtime.materializeGCProg": "runtime_mspan *__golang runtime_materializeGCProg(uintptr ptrdata, uint8 *prog)",
    "runtime._ptr_mspan.typePointersOf": "runtime_typePointers __golang runtime__ptr_mspan_typePointersOf(runtime_mspan *span, uintptr addr, uintptr size)",
    "runtime._ptr_mspan.typePointersOfUnchecked": "runtime_typePointers __golang runtime__ptr_mspan_typePointersOfUnchecked(runtime_mspan *span, uintptr addr)",
    "runtime.typePointers.fastForward": "runtime_typePointers __golang runtime_typePointers_fastForward(runtime_typePointers tp, uintptr n, uintptr limit)",
    "runtime.bulkBarrierPreWrite": "void __golang runtime_bulkBarrierPreWrite(uintptr dst, uintptr src, uintptr size, internal_abi_Type *typ)",
    "runtime.bulkBarrierPreWriteSrcOnly": "void __golang runtime_bulkBarrierPreWriteSrcOnly(uintptr dst, uintptr src, uintptr size, internal_abi_Type *typ)",
    "runtime._ptr_mspan.initHeapBits": "void __golang runtime__ptr_mspan_initHeapBits(_ptr_runtime_mspan, bool)",
    "runtime._ptr_mspan.heapBits": "_slice_uintptr __golang runtime__ptr_mspan_heapBits(runtime_mspan *span)",
    "runtime._ptr_mspan.heapBitsSmallForAddr": "uintptr_0 __golang runtime__ptr_mspan_heapBitsSmallForAddr(_ptr_runtime_mspan, uintptr_0)",
    "runtime._ptr_mspan.writeHeapBitsSmall": "uintptr __golang runtime__ptr_mspan_writeHeapBitsSmall(runtime_mspan *span, uintptr x, uintptr dataSize, internal_abi_Type *typ)",
    "runtime.heapSetType": "uintptr __golang runtime_heapSetType(uintptr x, uintptr dataSize, internal_abi_Type *typ, internal_abi_Type **header, runtime_mspan *span)",
    "runtime.allocmcache": "runtime_mcache *__golang runtime_allocmcache()",
    "runtime._ptr_mcache.refill": "void __golang runtime__ptr_mcache_refill(runtime_mcache *c, unsigned __int8 spc)",
    "runtime._ptr_mcache.allocLarge": "runtime_mspan *__golang runtime__ptr_mcache_allocLarge(runtime_mcache *c, uintptr size, bool noscan)",
    "runtime._ptr_mcache.releaseAll": "void __golang runtime__ptr_mcache_releaseAll(_ptr_runtime_mcache)",
    "runtime._ptr_mcache.prepareForSweep": "void __golang runtime__ptr_mcache_prepareForSweep(_ptr_runtime_mcache)",
    "runtime._ptr_mcentral.cacheSpan": "runtime_mspan *__golang runtime__ptr_mcentral_cacheSpan(runtime_mcentral *c)",
    "runtime._ptr_mcentral.uncacheSpan": "void __golang runtime__ptr_mcentral_uncacheSpan(runtime_mcentral *c, runtime_mspan *s)",
    "runtime._ptr_mcentral.grow": "runtime_mspan *__golang runtime__ptr_mcentral_grow(runtime_mcentral *c)",
    "runtime.startCheckmarks": "void __golang runtime_startCheckmarks()",
    "runtime.endCheckmarks": "void __golang runtime_endCheckmarks()",
    "runtime.setCheckmark": "bool __golang runtime_setCheckmark(uintptr obj, uintptr base, uintptr off, runtime_markBits mbits)",
    "runtime.sysAlloc": "void *__golang runtime_sysAlloc(uintptr n, unsigned __int64 *sysStat)",
    "runtime.sysFree": "void __golang runtime_sysFree(void *v, uintptr n, unsigned __int64 *sysStat)",
    "runtime.sysFault": "void __golang runtime_sysFault(void *v, uintptr n)",
    "runtime.sysReserve": "void *__golang runtime_sysReserve(void *v, uintptr n)",
    "runtime.sysMap": "void __golang runtime_sysMap(void *v, uintptr n, unsigned __int64 *sysStat)",
    "runtime.sysAllocOS": "void *__golang runtime_sysAllocOS(uintptr n)",
    "runtime.sysUnusedOS": "void __golang runtime_sysUnusedOS(void *v, uintptr n)",
    "runtime.sysUsedOS": "void __golang runtime_sysUsedOS(void *v, uintptr n)",
    "runtime.sysHugePageOS": "void __golang runtime_sysHugePageOS(void *v, uintptr n)",
    "runtime.sysNoHugePageOS": "void __golang runtime_sysNoHugePageOS(void *v, uintptr n)",
    "runtime.sysMapOS": "void __golang runtime_sysMapOS(void *v, uintptr n)",
    "runtime.initMetrics": "void __golang runtime_initMetrics()",
    "runtime.compute0": "void __golang runtime_compute0(runtime_statAggregate *_p0, runtime_metricValue *out)",
    "runtime._ptr_heapStatsAggregate.compute": "void __golang runtime__ptr_heapStatsAggregate_compute(_ptr_runtime_heapStatsAggregate)",
    "runtime._ptr_sysStatsAggregate.compute": "void __golang runtime__ptr_sysStatsAggregate_compute(_ptr_runtime_sysStatsAggregate)",
    "runtime._ptr_statAggregate.ensure": "void __golang runtime__ptr_statAggregate_ensure(runtime_statAggregate *a, runtime_statDepSet *deps)",
    "runtime.readMetricsLocked": "void __golang runtime_readMetricsLocked(void *samplesp, int len, int cap)",
    "runtime.queuefinalizer": "void __golang runtime_queuefinalizer(void *p, runtime_funcval *fn, uintptr nret, internal_abi_Type *fint, internal_abi_PtrType *ot)",
    "runtime.createfing": "void __golang runtime_createfing()",
    "runtime.finalizercommit": "bool __golang runtime_finalizercommit(runtime_g *gp, void *lock)",
    "runtime.runfinq": "void __golang __noreturn runtime_runfinq()",
    "runtime.SetFinalizer": "void __golang runtime_SetFinalizer(interface_ obj, interface_ finalizer)",
    "runtime._ptr_fixalloc.alloc": "void *__golang runtime__ptr_fixalloc_alloc(runtime_fixalloc *f)",
    "runtime._ptr_fixalloc.free": "void __golang runtime__ptr_fixalloc_free(runtime_fixalloc *f, void *p)",
    "runtime.gcinit": "void __golang runtime_gcinit()",
    "runtime.gcenable": "void __golang runtime_gcenable()",
    "runtime.gcenable.gowrap2": "void __golang runtime_gcenable_gowrap2()",
    "runtime.gcenable.gowrap1": "void __golang runtime_gcenable_gowrap1()",
    "runtime.pollFractionalWorkerExit": "bool __golang runtime_pollFractionalWorkerExit()",
    "runtime.GC": "void __golang runtime_GC()",
    "runtime.gcWaitOnMark": "void __golang runtime_gcWaitOnMark(uint32 n)",
    "runtime.gcTrigger.test": "bool __golang runtime_gcTrigger_test(runtime_gcTrigger t)",
    "runtime.gcStart": "void __golang runtime_gcStart(runtime_gcTrigger trigger)",
    "runtime.gcMarkDone": "void __golang runtime_gcMarkDone()",
    "runtime.gcMarkTermination": "void __golang runtime_gcMarkTermination(runtime_worldStop stw)",
    "runtime.gcBgMarkStartWorkers": "void __golang runtime_gcBgMarkStartWorkers()",
    "runtime.gcBgMarkWorker": "void __golang __noreturn runtime_gcBgMarkWorker()",
    "runtime.gcMark": "void __golang runtime_gcMark(int64 startTime)",
    "runtime.gcSweep": "bool __golang runtime_gcSweep(__int64 mode)",
    "runtime.gcResetMarkState": "void __golang runtime_gcResetMarkState()",
    "runtime.clearpools": "void __golang runtime_clearpools()",
    "runtime.fmtNSAsMS": "_slice_uint8 __golang runtime_fmtNSAsMS(_slice_uint8 buf, uint64 ns)",
    "runtime._ptr_gcCPULimiterState.startGCTransition": "void __golang runtime__ptr_gcCPULimiterState_startGCTransition(runtime_gcCPULimiterState *l, bool enableGC, int64 now)",
    "runtime._ptr_gcCPULimiterState.finishGCTransition": "void __golang runtime__ptr_gcCPULimiterState_finishGCTransition(runtime_gcCPULimiterState *l, int64 now)",
    "runtime._ptr_gcCPULimiterState.update": "void __golang runtime__ptr_gcCPULimiterState_update(runtime_gcCPULimiterState *l, int64 now)",
    "runtime._ptr_gcCPULimiterState.updateLocked": "void __golang runtime__ptr_gcCPULimiterState_updateLocked(runtime_gcCPULimiterState *l, int64 now)",
    "runtime._ptr_gcCPULimiterState.accumulate": "void __golang runtime__ptr_gcCPULimiterState_accumulate(runtime_gcCPULimiterState *l, int64 mutatorTime, int64 gcTime)",
    "runtime._ptr_gcCPULimiterState.unlock": "void __golang runtime__ptr_gcCPULimiterState_unlock(runtime_gcCPULimiterState *l)",
    "runtime._ptr_gcCPULimiterState.resetCapacity": "void __golang runtime__ptr_gcCPULimiterState_resetCapacity(runtime_gcCPULimiterState *l, int64 now, int32 nprocs)",
    "runtime._ptr_limiterEvent.stop": "void __golang runtime__ptr_limiterEvent_stop(runtime_limiterEvent *e, unsigned __int8 typ, int64 now)",
    "runtime.gcMarkRootPrepare": "void __golang runtime_gcMarkRootPrepare()",
    "runtime.gcMarkRootCheck": "void __golang runtime_gcMarkRootCheck()",
    "runtime.markroot": "int64 __golang runtime_markroot(runtime_gcWork *gcw, uint32 i, bool flushBgCredit)",
    "runtime.markrootBlock": "int64 __golang runtime_markrootBlock(uintptr b0, uintptr n0, uint8 *ptrmask0, runtime_gcWork *gcw, int shard)",
    "runtime.markrootFreeGStacks": "void __golang runtime_markrootFreeGStacks()",
    "runtime.markrootSpans": "void __golang runtime_markrootSpans(runtime_gcWork *gcw, int shard)",
    "runtime.gcAssistAlloc": "void __golang runtime_gcAssistAlloc(runtime_g *gp)",
    "runtime.gcAssistAlloc1": "void __golang runtime_gcAssistAlloc1(runtime_g *gp, int64 scanWork)",
    "runtime.gcWakeAllAssists": "void __golang runtime_gcWakeAllAssists()",
    "runtime.gcParkAssist": "bool __golang runtime_gcParkAssist()",
    "runtime.gcFlushBgCredit": "void __golang runtime_gcFlushBgCredit(int64 scanWork)",
    "runtime.scanstack": "int64 __golang runtime_scanstack(runtime_g *gp, runtime_gcWork *gcw)",
    "runtime.scanframeworker": "void __golang runtime_scanframeworker(runtime_stkframe *frame, runtime_stackScanState *state, runtime_gcWork *gcw)",
    "runtime.gcDrain": "void __golang runtime_gcDrain(runtime_gcWork *gcw, __int64 flags)",
    "runtime.gcDrainN": "int64 __golang runtime_gcDrainN(runtime_gcWork *gcw, int64 scanWork)",
    "runtime.scanblock": "void __golang runtime_scanblock(uintptr b0, uintptr n0, uint8 *ptrmask, runtime_gcWork *gcw, runtime_stackScanState *stk)",
    "runtime.scanobject": "void __golang runtime_scanobject(uintptr b, runtime_gcWork *gcw)",
    "runtime.scanConservative": "void __golang runtime_scanConservative(uintptr b, uintptr n, uint8 *ptrmask, runtime_gcWork *gcw, runtime_stackScanState *state)",
    "runtime.shade": "void __golang runtime_shade(uintptr b)",
    "runtime.greyobject": "void __golang runtime_greyobject(uintptr obj, uintptr base, uintptr off, runtime_mspan *span, runtime_gcWork *gcw, uintptr objIndex)",
    "runtime.gcDumpObject": "void __golang runtime_gcDumpObject(string label, uintptr obj, uintptr off)",
    "runtime.gcmarknewobject": "void __golang runtime_gcmarknewobject(runtime_mspan *span, uintptr obj)",
    "runtime.gcMarkTinyAllocs": "void __golang runtime_gcMarkTinyAllocs()",
    "runtime._ptr_gcControllerState.startCycle": "void __golang runtime__ptr_gcControllerState_startCycle(runtime_gcControllerState *c, int64 markStartTime, int procs, runtime_gcTrigger trigger)",
    "runtime._ptr_gcControllerState.revise": "void __golang runtime__ptr_gcControllerState_revise(runtime_gcControllerState *c)",
    "runtime._ptr_gcControllerState.endCycle": "void __golang runtime__ptr_gcControllerState_endCycle(runtime_gcControllerState *c, int64 now, int procs, bool userForced)",
    "runtime._ptr_gcControllerState.enlistWorker": "void __golang runtime__ptr_gcControllerState_enlistWorker(runtime_gcControllerState *c)",
    "runtime._ptr_gcControllerState.resetLive": "void __golang runtime__ptr_gcControllerState_resetLive(runtime_gcControllerState *c, uint64 bytesMarked)",
    "runtime._ptr_gcControllerState.markWorkerStop": "void __golang runtime__ptr_gcControllerState_markWorkerStop(runtime_gcControllerState *c, __int64 mode, int64 duration)",
    "runtime._ptr_gcControllerState.update": "void __golang runtime__ptr_gcControllerState_update(runtime_gcControllerState *c, int64 dHeapLive, int64 dHeapScan)",
    "runtime._ptr_gcControllerState.memoryLimitHeapGoal": "uint64 __golang runtime__ptr_gcControllerState_memoryLimitHeapGoal(runtime_gcControllerState *c)",
    "runtime._ptr_gcControllerState.commit": "void __golang runtime__ptr_gcControllerState_commit(runtime_gcControllerState *c, bool isSweepDone)",
    "runtime.readGOGC": "int32 __golang runtime_readGOGC()",
    "runtime.readGOMEMLIMIT": "int64 __golang runtime_readGOMEMLIMIT()",
    "runtime._ptr_gcControllerState.addIdleMarkWorker": "bool __golang runtime__ptr_gcControllerState_addIdleMarkWorker(runtime_gcControllerState *c)",
    "runtime._ptr_gcControllerState.removeIdleMarkWorker": "void __golang runtime__ptr_gcControllerState_removeIdleMarkWorker(runtime_gcControllerState *c)",
    "runtime._ptr_gcControllerState.setMaxIdleMarkWorkers": "void __golang runtime__ptr_gcControllerState_setMaxIdleMarkWorkers(runtime_gcControllerState *c, int32 max)",
    "runtime.gcControllerCommit": "void __golang runtime_gcControllerCommit()",
    "runtime.gcPaceScavenger": "void __golang runtime_gcPaceScavenger(int64 memoryLimit, uint64 heapGoal, uint64 lastHeapGoal)",
    "runtime._ptr_scavengerState.park": "void __golang runtime__ptr_scavengerState_park(_ptr_runtime_scavengerState)",
    "runtime._ptr_scavengerState.wake": "void __golang runtime__ptr_scavengerState_wake(_ptr_runtime_scavengerState)",
    "runtime._ptr_scavengerState.sleep": "void __golang runtime__ptr_scavengerState_sleep(_ptr_runtime_scavengerState, float64_0)",
    "runtime._ptr_scavengerState.controllerFailed": "void __golang runtime__ptr_scavengerState_controllerFailed(_ptr_runtime_scavengerState)",
    "runtime.bgscavenge": "void __golang __noreturn runtime_bgscavenge(chan_int c)",
    "runtime._ptr_pageAlloc.scavenge": "uintptr __golang runtime__ptr_pageAlloc_scavenge(runtime_pageAlloc *p, uintptr nbytes, func_bool shouldStop, bool force)",
    "runtime.printScavTrace": "void __golang runtime_printScavTrace(uintptr releasedBg, uintptr releasedEager, bool forced)",
    "runtime._ptr_pageAlloc.scavengeOne": "uintptr __golang runtime__ptr_pageAlloc_scavengeOne(runtime_pageAlloc *p, unsigned __int64 ci, uint searchIdx, uintptr max)",
    "runtime.fillAligned": "uint64 __golang runtime_fillAligned(uint64 x, uint m)",
    "runtime._ptr_scavengeIndex.grow": "uintptr __golang runtime__ptr_scavengeIndex_grow(runtime_scavengeIndex *s, uintptr base, uintptr limit, unsigned __int64 *sysStat)",
    "runtime._ptr_scavengeIndex.alloc": "void __golang runtime__ptr_scavengeIndex_alloc(runtime_scavengeIndex *s, unsigned __int64 ci, uint npages)",
    "runtime._ptr_scavengeIndex.free": "void __golang runtime__ptr_scavengeIndex_free(runtime_scavengeIndex *s, unsigned __int64 ci, uint page, uint npages)",
    "runtime._ptr_scavengeIndex.nextGen": "void __golang runtime__ptr_scavengeIndex_nextGen(runtime_scavengeIndex *s)",
    "runtime._ptr_scavengeIndex.setEmpty": "void __golang runtime__ptr_scavengeIndex_setEmpty(runtime_scavengeIndex *s, unsigned __int64 ci)",
    "runtime._ptr_scavChunkData.alloc": "void __golang runtime__ptr_scavChunkData_alloc(runtime_scavChunkData *sc, uint npages, uint32 newGen)",
    "runtime._ptr_scavChunkData.free": "void __golang runtime__ptr_scavChunkData_free(runtime_scavChunkData *sc, uint npages, uint32 newGen)",
    "runtime._ptr_stackScanState.putPtr": "void __golang runtime__ptr_stackScanState_putPtr(runtime_stackScanState *s, uintptr p, bool conservative)",
    "runtime._ptr_stackScanState.addObject": "void __golang runtime__ptr_stackScanState_addObject(runtime_stackScanState *s, uintptr addr, runtime_stackObjectRecord *r)",
    "runtime._ptr_mheap.nextSpanForSweep": "runtime_mspan *__golang runtime__ptr_mheap_nextSpanForSweep(runtime_mheap *h)",
    "runtime._ptr_activeSweep.end": "void __golang runtime__ptr_activeSweep_end(runtime_activeSweep *a, runtime_sweepLocker sl)",
    "runtime.finishsweep_m": "void __golang runtime_finishsweep_m()",
    "runtime.bgsweep": "void __golang __noreturn runtime_bgsweep(chan_int c)",
    "runtime.sweepone": "uintptr __golang runtime_sweepone()",
    "runtime._ptr_mspan.ensureSwept": "void __golang runtime__ptr_mspan_ensureSwept(_ptr_runtime_mspan)",
    "runtime._ptr_sweepLocked.sweep": "bool __golang runtime__ptr_sweepLocked_sweep(runtime_sweepLocked *sl, bool preserve)",
    "runtime._ptr_mspan.reportZombies": "void __golang runtime__ptr_mspan_reportZombies(_ptr_runtime_mspan)",
    "runtime.deductSweepCredit": "void __golang runtime_deductSweepCredit(uintptr spanBytes, uintptr callerSweepPages)",
    "runtime.gcPaceSweeper": "void __golang runtime_gcPaceSweeper(uint64 trigger)",
    "runtime._ptr_gcWork.put": "void __golang runtime__ptr_gcWork_put(_ptr_runtime_gcWork, uintptr_0)",
    "runtime._ptr_gcWork.putBatch": "void __golang runtime__ptr_gcWork_putBatch(runtime_gcWork *w, _slice_uintptr obj)",
    "runtime._ptr_gcWork.tryGet": "uintptr_0 __golang runtime__ptr_gcWork_tryGet(_ptr_runtime_gcWork)",
    "runtime._ptr_gcWork.dispose": "void __golang runtime__ptr_gcWork_dispose(_ptr_runtime_gcWork)",
    "runtime._ptr_gcWork.balance": "void __golang runtime__ptr_gcWork_balance(_ptr_runtime_gcWork)",
    "runtime._ptr_workbuf.checknonempty": "void __golang runtime__ptr_workbuf_checknonempty(_ptr_runtime_workbuf)",
    "runtime._ptr_workbuf.checkempty": "void __golang runtime__ptr_workbuf_checkempty(_ptr_runtime_workbuf)",
    "runtime.getempty": "runtime_workbuf *__golang runtime_getempty()",
    "runtime.putempty": "void __golang runtime_putempty(runtime_workbuf *b)",
    "runtime.putfull": "void __golang runtime_putfull(runtime_workbuf *b)",
    "runtime.trygetfull": "runtime_workbuf *__golang runtime_trygetfull()",
    "runtime.handoff": "runtime_workbuf *__golang runtime_handoff(runtime_workbuf *b)",
    "runtime.prepareFreeWorkbufs": "void __golang runtime_prepareFreeWorkbufs()",
    "runtime.freeSomeWbufs": "bool __golang runtime_freeSomeWbufs(bool preemptible)",
    "runtime._ptr_mspan.base": "uintptr_0 __golang runtime__ptr_mspan_base(_ptr_runtime_mspan)",
    "runtime.recordspan": "void __golang runtime_recordspan(void *vh, void *p)",
    "runtime.inHeapOrStack": "bool __golang runtime_inHeapOrStack(uintptr b)",
    "runtime.spanOfHeap": "runtime_mspan *__golang runtime_spanOfHeap(uintptr p)",
    "runtime._ptr_mheap.reclaim": "void __golang runtime__ptr_mheap_reclaim(runtime_mheap *h, uintptr npage)",
    "runtime._ptr_mheap.reclaimChunk": "uintptr __golang runtime__ptr_mheap_reclaimChunk(runtime_mheap *h, _slice_runtime_arenaIdx arenas, uintptr pageIdx, uintptr n)",
    "runtime._ptr_mheap.alloc": "runtime_mspan *__golang runtime__ptr_mheap_alloc(runtime_mheap *h, uintptr npages, unsigned __int8 spanclass)",
    "runtime._ptr_mheap.allocManual": "runtime_mspan *__golang runtime__ptr_mheap_allocManual(runtime_mheap *h, uintptr npages, unsigned __int8 typ)",
    "runtime._ptr_mheap.setSpans": "void __golang runtime__ptr_mheap_setSpans(runtime_mheap *h, uintptr base, uintptr npage, runtime_mspan *s)",
    "runtime._ptr_mheap.allocNeedsZero": "bool __golang runtime__ptr_mheap_allocNeedsZero(runtime_mheap *h, uintptr base, uintptr npage)",
    "runtime._ptr_mheap.allocMSpanLocked": "runtime_mspan *__golang runtime__ptr_mheap_allocMSpanLocked(runtime_mheap *h)",
    "runtime._ptr_mheap.allocSpan": "runtime_mspan *__golang runtime__ptr_mheap_allocSpan(runtime_mheap *h, uintptr npages, unsigned __int8 typ, unsigned __int8 spanclass)",
    "runtime._ptr_mheap.initSpan": "void __golang runtime__ptr_mheap_initSpan(runtime_mheap *h, runtime_mspan *s, unsigned __int8 typ, unsigned __int8 spanclass, uintptr base, uintptr npages)",
    "runtime._ptr_mheap.freeManual": "void __golang runtime__ptr_mheap_freeManual(runtime_mheap *h, runtime_mspan *s, unsigned __int8 typ)",
    "runtime._ptr_mheap.freeSpanLocked": "void __golang runtime__ptr_mheap_freeSpanLocked(runtime_mheap *h, runtime_mspan *s, unsigned __int8 typ)",
    "runtime._ptr_mSpanList.remove": "void __golang runtime__ptr_mSpanList_remove(runtime_mSpanList *list, runtime_mspan *span)",
    "runtime._ptr_mSpanList.insert": "void __golang runtime__ptr_mSpanList_insert(runtime_mSpanList *list, runtime_mspan *span)",
    "runtime.addspecial": "bool __golang runtime_addspecial(void *p, runtime_special *s)",
    "runtime.removespecial": "runtime_special *__golang runtime_removespecial(void *p, uint8 kind)",
    "runtime.addfinalizer": "bool __golang runtime_addfinalizer(void *p, runtime_funcval *f, uintptr nret, internal_abi_Type *fint, internal_abi_PtrType *ot)",
    "runtime.removefinalizer": "void __golang runtime_removefinalizer(void *p)",
    "runtime.setprofilebucket": "void __golang runtime_setprofilebucket(void *p, runtime_bucket *b)",
    "runtime.freeSpecial": "void __golang runtime_freeSpecial(runtime_special *s, void *p, uintptr size)",
    "runtime.newMarkBits": "runtime_gcBits *__golang runtime_newMarkBits(uintptr nelems)",
    "runtime.nextMarkBitArenaEpoch": "void __golang runtime_nextMarkBitArenaEpoch()",
    "runtime.newArenaMayUnlock": "runtime_gcBitsArena *__golang runtime_newArenaMayUnlock()",
    "runtime._ptr_pageAlloc.grow": "void __golang runtime__ptr_pageAlloc_grow(runtime_pageAlloc *p, uintptr base, uintptr size)",
    "runtime._ptr_pageAlloc.enableChunkHugePages": "void __golang runtime__ptr_pageAlloc_enableChunkHugePages(runtime_pageAlloc *p)",
    "runtime._ptr_pageAlloc.update": "void __golang runtime__ptr_pageAlloc_update(runtime_pageAlloc *p, uintptr base, uintptr npages, bool contig, bool alloc)",
    "runtime._ptr_pageAlloc.allocRange": "uintptr __golang runtime__ptr_pageAlloc_allocRange(runtime_pageAlloc *p, uintptr base, uintptr npages)",
    "runtime._ptr_pageAlloc.findMappedAddr": "runtime_offAddr __golang runtime__ptr_pageAlloc_findMappedAddr(runtime_pageAlloc *p, runtime_offAddr addr)",
    "runtime._ptr_pageAlloc.free": "void __golang runtime__ptr_pageAlloc_free(runtime_pageAlloc *p, uintptr base, uintptr npages)",
    "runtime.mergeSummaries": "unsigned __int64 __golang runtime_mergeSummaries(_slice_runtime_pallocSum sums, uint logMaxPagesPerSum)",
    "runtime._ptr_pageAlloc.sysInit": "void __golang runtime__ptr_pageAlloc_sysInit(runtime_pageAlloc *p, bool test)",
    "runtime._ptr_pageAlloc.sysGrow": "void __golang runtime__ptr_pageAlloc_sysGrow(runtime_pageAlloc *p, uintptr base, uintptr limit)",
    "runtime._ptr_scavengeIndex.sysGrow": "uintptr __golang runtime__ptr_scavengeIndex_sysGrow(runtime_scavengeIndex *s, uintptr base, uintptr limit, unsigned __int64 *sysStat)",
    "runtime._ptr_scavengeIndex.sysInit": "uintptr __golang runtime__ptr_scavengeIndex_sysInit(runtime_scavengeIndex *s, bool test, unsigned __int64 *sysStat)",
    "runtime._ptr_pageCache.flush": "void __golang runtime__ptr_pageCache_flush(runtime_pageCache *c, runtime_pageAlloc *p)",
    "runtime._ptr_pageAlloc.allocToCache": "runtime_pageCache __golang runtime__ptr_pageAlloc_allocToCache(runtime_pageAlloc *p)",
    "runtime._ptr_pageBits.setRange": "void __golang runtime__ptr_pageBits_setRange(runtime_pageBits *b, uint i, uint n)",
    "runtime._ptr_pageBits.clearRange": "void __golang runtime__ptr_pageBits_clearRange(runtime_pageBits *b, uint i, uint n)",
    "runtime._ptr_pageBits.popcntRange": "uint __golang runtime__ptr_pageBits_popcntRange(runtime_pageBits *b, uint i, uint n)",
    "runtime._ptr_pallocBits.summarize": "unsigned __int64 __golang runtime__ptr_pallocBits_summarize(runtime_pallocBits *b)",
    "runtime._ptr_pallocData.allocRange": "void __golang runtime__ptr_pallocData_allocRange(runtime_pallocData *m, uint i, uint n)",
    "runtime.newBucket": "runtime_bucket *__golang runtime_newBucket(__int64 typ, int nstk)",
    "runtime._ptr_bucket.stk": "_slice_uintptr __golang runtime__ptr_bucket_stk(runtime_bucket *b)",
    "runtime._ptr_bucket.mp": "runtime_memRecord *__golang runtime__ptr_bucket_mp(runtime_bucket *b)",
    "runtime._ptr_bucket.bp": "runtime_blockRecord *__golang runtime__ptr_bucket_bp(runtime_bucket *b)",
    "runtime.stkbucket": "runtime_bucket *__golang runtime_stkbucket(__int64 typ, uintptr size, _slice_uintptr stk, bool alloc)",
    "runtime.mProf_Flush": "void __golang runtime_mProf_Flush()",
    "runtime.mProf_FlushLocked": "void __golang runtime_mProf_FlushLocked(uint32 index)",
    "runtime.mProf_PostSweep": "void __golang runtime_mProf_PostSweep()",
    "runtime.mProf_Malloc": "void __golang runtime_mProf_Malloc(void *p, uintptr size)",
    "runtime.mProf_Free": "void __golang runtime_mProf_Free(runtime_bucket *b, uintptr size)",
    "runtime.blockevent": "void __golang runtime_blockevent(int64 cycles, int skip)",
    "runtime.blocksampled": "bool __golang runtime_blocksampled(int64 cycles, int64 rate)",
    "runtime.saveblockevent": "void __golang runtime_saveblockevent(int64 cycles, int64 rate, int skip, __int64 which)",
    "runtime._ptr_lockTimer.begin": "void __golang runtime__ptr_lockTimer_begin(runtime_lockTimer *lt)",
    "runtime._ptr_lockTimer.end": "void __golang runtime__ptr_lockTimer_end(runtime_lockTimer *lt)",
    "runtime._ptr_mLockProfile.recordLock": "void __golang runtime__ptr_mLockProfile_recordLock(runtime_mLockProfile *prof, int64 cycles, runtime_mutex *l)",
    "runtime._ptr_mLockProfile.recordUnlock": "void __golang runtime__ptr_mLockProfile_recordUnlock(runtime_mLockProfile *prof, runtime_mutex *l)",
    "runtime._ptr_mLockProfile.captureStack": "void __golang runtime__ptr_mLockProfile_captureStack(_ptr_runtime_mLockProfile)",
    "runtime._ptr_mLockProfile.store": "void __golang runtime__ptr_mLockProfile_store(_ptr_runtime_mLockProfile)",
    "runtime.saveBlockEventStack": "void __golang runtime_saveBlockEventStack(int64 cycles, int64 rate, _slice_uintptr stk, __int64 which)",
    "runtime._ptr_goroutineProfileStateHolder.Load": "runtime_goroutineProfileState __golang runtime__ptr_goroutineProfileStateHolder_Load(_ptr_runtime_goroutineProfileStateHolder)",
    "runtime._ptr_goroutineProfileStateHolder.Store": "void __golang runtime__ptr_goroutineProfileStateHolder_Store(_ptr_runtime_goroutineProfileStateHolder, runtime_goroutineProfileState)",
    "runtime._ptr_goroutineProfileStateHolder.CompareAndSwap": "bool __golang runtime__ptr_goroutineProfileStateHolder_CompareAndSwap(_ptr_runtime_goroutineProfileStateHolder, runtime_goroutineProfileState, runtime_goroutineProfileState)",
    "runtime.tryRecordGoroutineProfileWB": "void __golang runtime_tryRecordGoroutineProfileWB(runtime_g *gp1)",
    "runtime.tryRecordGoroutineProfile": "void __golang runtime_tryRecordGoroutineProfile(runtime_g *gp1, func yield)",
    "runtime.doRecordGoroutineProfile": "void __golang runtime_doRecordGoroutineProfile(runtime_g *gp1)",
    "runtime.saveg": "void __golang runtime_saveg(uintptr pc, uintptr sp_0, runtime_g *gp, runtime_StackRecord *r)",
    "runtime.Stack": "int __golang runtime_Stack(_slice_uint8 buf, bool all)",
    "runtime.tracealloc": "void __golang runtime_tracealloc(void *p, uintptr size, internal_abi_Type *typ)",
    "runtime.tracefree": "void __golang runtime_tracefree(void *p, uintptr size)",
    "runtime.tracegc": "void __golang runtime_tracegc()",
    "runtime.makeAddrRange": "runtime_addrRange __golang runtime_makeAddrRange(uintptr base, uintptr limit)",
    "runtime.addrRange.subtract": "runtime_addrRange __golang runtime_addrRange_subtract(runtime_addrRange a, runtime_addrRange b)",
    "runtime._ptr_addrRanges.findSucc": "int __golang runtime__ptr_addrRanges_findSucc(runtime_addrRanges *a, uintptr addr)",
    "runtime._ptr_addrRanges.add": "void __golang runtime__ptr_addrRanges_add(runtime_addrRanges *a, runtime_addrRange r)",
    "runtime._ptr_addrRanges.cloneInto": "void __golang runtime__ptr_addrRanges_cloneInto(runtime_addrRanges *a, runtime_addrRanges *b)",
    "runtime._ptr_spanSet.push": "void __golang runtime__ptr_spanSet_push(runtime_spanSet *b, runtime_mspan *s)",
    "runtime._ptr_spanSet.pop": "runtime_mspan *__golang runtime__ptr_spanSet_pop(runtime_spanSet *b)",
    "runtime._ptr_spanSet.reset": "void __golang runtime__ptr_spanSet_reset(runtime_spanSet *b)",
    "runtime._ptr_spanSetBlockAlloc.alloc": "runtime_spanSetBlock *__golang runtime__ptr_spanSetBlockAlloc_alloc(runtime_spanSetBlockAlloc *p)",
    "runtime._ptr_atomicHeadTailIndex.incTail": "unsigned __int64 __golang runtime__ptr_atomicHeadTailIndex_incTail(runtime_atomicHeadTailIndex *h)",
    "runtime._ptr_sysMemStat.add": "void __golang runtime__ptr_sysMemStat_add(unsigned __int64 *s, int64 n)",
    "runtime._ptr_heapStatsDelta.merge": "void __golang runtime__ptr_heapStatsDelta_merge(runtime_heapStatsDelta *a, runtime_heapStatsDelta *b)",
    "runtime._ptr_consistentHeapStats.acquire": "runtime_heapStatsDelta *__golang runtime__ptr_consistentHeapStats_acquire(runtime_consistentHeapStats *m)",
    "runtime._ptr_consistentHeapStats.release": "void __golang runtime__ptr_consistentHeapStats_release(runtime_consistentHeapStats *m)",
    "runtime._ptr_consistentHeapStats.read": "void __golang runtime__ptr_consistentHeapStats_read(runtime_consistentHeapStats *m, runtime_heapStatsDelta *out)",
    "runtime._ptr_cpuStats.accumulate": "void __golang runtime__ptr_cpuStats_accumulate(runtime_cpuStats *s, int64 now, bool gcMarkPhase)",
    "runtime._ptr_wbBuf.reset": "void __golang runtime__ptr_wbBuf_reset(_ptr_runtime_wbBuf)",
    "runtime.wbBufFlush": "void __golang runtime_wbBufFlush()",
    "runtime.wbBufFlush1": "void __golang runtime_wbBufFlush1(runtime_p *pp)",
    "runtime._ptr_pollDesc.publishInfo": "void __golang runtime__ptr_pollDesc_publishInfo(_ptr_runtime_pollDesc)",
    "runtime._ptr_pollDesc.setEventErr": "void __golang runtime__ptr_pollDesc_setEventErr(runtime_pollDesc *pd, bool b, uintptr seq)",
    "runtime.netpollGenericInit": "void __golang runtime_netpollGenericInit()",
    "runtime._ptr_pollCache.free": "void __golang runtime__ptr_pollCache_free(runtime_pollCache *c, runtime_pollDesc *pd)",
    "runtime.netpollready": "int32 __golang runtime_netpollready(runtime_gList *toRun, runtime_pollDesc *pd, int32 mode)",
    "runtime.netpollblockcommit": "bool __golang runtime_netpollblockcommit(runtime_g *gp, void *gpp)",
    "runtime.netpollgoready": "void __golang runtime_netpollgoready(runtime_g *gp, int traceskip)",
    "runtime.netpollblock": "bool __golang runtime_netpollblock(runtime_pollDesc *pd, int32 mode, bool waitio)",
    "runtime.netpolldeadlineimpl": "void __golang runtime_netpolldeadlineimpl(runtime_pollDesc *pd, uintptr seq, bool read, bool write)",
    "runtime.netpollDeadline": "void __golang runtime_netpollDeadline(interface_ arg, uintptr seq)",
    "runtime.netpollReadDeadline": "void __golang runtime_netpollReadDeadline(interface_ arg, uintptr seq)",
    "runtime.netpollWriteDeadline": "void __golang runtime_netpollWriteDeadline(interface_ arg, uintptr seq)",
    "runtime._ptr_pollCache.alloc": "runtime_pollDesc *__golang runtime__ptr_pollCache_alloc(runtime_pollCache *c)",
    "runtime.netpollinit": "void __golang runtime_netpollinit()",
    "runtime.netpollopen": "uintptr __golang runtime_netpollopen(uintptr fd, runtime_pollDesc *pd)",
    "runtime.netpollclose": "uintptr __golang runtime_netpollclose(uintptr fd)",
    "runtime.netpollBreak": "void __golang runtime_netpollBreak()",
    "runtime.futexsleep": "void __golang runtime_futexsleep(uint32 *addr, uint32 val, int64 ns)",
    "runtime.futexwakeup": "void __golang runtime_futexwakeup(uint32 *addr, uint32 cnt)",
    "runtime.getproccount": "int32 __golang runtime_getproccount()",
    "runtime.newosproc": "void __golang runtime_newosproc(runtime_m *mp)",
    "runtime.sysargs": "void __golang runtime_sysargs(int32 argc, uint8 **argv)",
    "runtime.sysauxv": "int __golang runtime_sysauxv(_slice_uintptr auxv)",
    "runtime.getHugePageSize": "uintptr __golang runtime_getHugePageSize()",
    "runtime.osinit": "void __golang runtime_osinit()",
    "runtime.readRandom": "int __golang runtime_readRandom(_slice_uint8 r)",
    "runtime.minit": "void __golang runtime_minit()",
    "runtime.setsig": "void __golang runtime_setsig(uint32 i, uintptr fn)",
    "runtime.setsigstack": "void __golang runtime_setsigstack(uint32 i)",
    "runtime.sysSigaction": "void __golang runtime_sysSigaction(uint32 sig, runtime_sigactiont *new, runtime_sigactiont *old)",
    "runtime.signalM": "void __golang runtime_signalM(runtime_m *mp, int sig)",
    "runtime.setThreadCPUProfiler": "void __golang runtime_setThreadCPUProfiler(int32 hz)",
    "runtime.runPerThreadSyscall": "void __golang runtime_runPerThreadSyscall()",
    "runtime.pageTraceFree": "void __golang runtime_pageTraceFree(runtime_p *pp, int64 now, uintptr base, uintptr npages)",
    "runtime.panicCheck1": "void __golang runtime_panicCheck1(uintptr pc, string msg)",
    "runtime.panicCheck2": "void __golang runtime_panicCheck2(string err)",
    "runtime.goPanicIndex": "void __golang __noreturn runtime_goPanicIndex(int x, int y)",
    "runtime.goPanicIndexU": "void __golang __noreturn runtime_goPanicIndexU(uint x, int y)",
    "runtime.goPanicSliceAlen": "void __golang __noreturn runtime_goPanicSliceAlen(int x, int y)",
    "runtime.goPanicSliceAlenU": "void __golang __noreturn runtime_goPanicSliceAlenU(uint x, int y)",
    "runtime.goPanicSliceAcap": "void __golang __noreturn runtime_goPanicSliceAcap(int x, int y)",
    "runtime.goPanicSliceAcapU": "void __golang __noreturn runtime_goPanicSliceAcapU(uint x, int y)",
    "runtime.goPanicSliceBU": "void __golang __noreturn runtime_goPanicSliceBU(uint x, int y)",
    "runtime.goPanicSlice3Alen": "void __golang __noreturn runtime_goPanicSlice3Alen(int x, int y)",
    "runtime.goPanicSlice3Acap": "void __golang __noreturn runtime_goPanicSlice3Acap(int x, int y)",
    "runtime.goPanicSlice3B": "void __golang __noreturn runtime_goPanicSlice3B(int x, int y)",
    "runtime.goPanicSlice3C": "void __golang __noreturn runtime_goPanicSlice3C(int x, int y)",
    "runtime.goPanicSliceConvert": "void __golang __noreturn runtime_goPanicSliceConvert(int x, int y)",
    "runtime.panicshift": "void __golang __noreturn runtime_panicshift()",
    "runtime.panicdivide": "void __golang __noreturn runtime_panicdivide()",
    "runtime.panicoverflow": "void __golang __noreturn runtime_panicoverflow()",
    "runtime.deferproc": "void __golang runtime_deferproc(func fn)",
    "runtime.deferconvert": "runtime__defer *__golang runtime_deferconvert(runtime__defer *d)",
    "runtime.deferprocStack": "void __golang runtime_deferprocStack(runtime__defer *d)",
    "runtime.newdefer": "runtime__defer *__golang runtime_newdefer()",
    "runtime.freedefer": "void __golang runtime_freedefer(runtime__defer *d)",
    "runtime.freedeferfn": "void __golang __noreturn runtime_freedeferfn()",
    "runtime.deferreturn": "void __golang runtime_deferreturn()",
    "runtime.preprintpanics": "void __golang runtime_preprintpanics(runtime__panic *p)",
    "runtime.printpanics": "void __golang runtime_printpanics(runtime__panic *p)",
    "runtime._ptr_PanicNilError.Error": "string_0 __golang runtime__ptr_PanicNilError_Error(_ptr_runtime_PanicNilError)",
    "runtime._ptr_PanicNilError.RuntimeError": "void __golang runtime__ptr_PanicNilError_RuntimeError(_ptr_runtime_PanicNilError)",
    "runtime.gopanic": "void __golang runtime_gopanic(interface_ e)",
    "runtime._ptr__panic.start": "void __golang runtime__ptr__panic_start(runtime__panic *p, uintptr pc, void *sp_0)",
    "runtime._ptr__panic.nextFrame": "bool __golang runtime__ptr__panic_nextFrame(_ptr_runtime__panic)",
    "runtime._ptr__panic.initOpenCodedDefers": "bool __golang runtime__ptr__panic_initOpenCodedDefers(runtime__panic *p, runtime_funcInfo fn, void *varp)",
    "runtime.gorecover": "interface_ __golang runtime_gorecover(uintptr argp)",
    "runtime.throw": "void __golang runtime_throw(string s)",
    "runtime.fatal": "void __golang runtime_fatal(string s)",
    "runtime.recovery": "void __golang runtime_recovery(runtime_g *gp)",
    "runtime.fatalthrow": "void __golang runtime_fatalthrow(unsigned int t)",
    "runtime.fatalpanic": "void __golang runtime_fatalpanic(runtime__panic *msgs)",
    "runtime.startpanic_m": "bool __golang runtime_startpanic_m()",
    "runtime.dopanic_m": "bool __golang runtime_dopanic_m(runtime_g *gp, uintptr pc, uintptr sp_0)",
    "runtime.canpanic": "bool __golang runtime_canpanic()",
    "runtime.shouldPushSigpanic": "bool __golang runtime_shouldPushSigpanic(runtime_g *gp, uintptr pc, uintptr lr)",
    "runtime.isAbortPC": "bool __golang runtime_isAbortPC(uintptr pc)",
    "runtime.isPinned": "bool __golang runtime_isPinned(void *ptr)",
    "runtime._ptr_mspan.refreshPinnerBits": "void __golang runtime__ptr_mspan_refreshPinnerBits(_ptr_runtime_mspan)",
    "runtime.suspendG": "runtime_suspendGState __golang runtime_suspendG(runtime_g *gp)",
    "runtime.resumeG": "void __golang runtime_resumeG(runtime_suspendGState state)",
    "runtime.asyncPreempt2": "void __golang runtime_asyncPreempt2()",
    "runtime.recordForPanic": "void __golang runtime_recordForPanic(_slice_uint8 b)",
    "runtime.printlock": "void __golang runtime_printlock()",
    "runtime.printunlock": "void __golang runtime_printunlock()",
    "runtime.gwrite": "void __golang runtime_gwrite(_slice_uint8 b)",
    "runtime.printsp": "void __golang runtime_printsp()",
    "runtime.printnl": "void __golang runtime_printnl()",
    "runtime.printbool": "void __golang runtime_printbool(bool v)",
    "runtime.printfloat": "void __golang runtime_printfloat(float64 v)",
    "runtime.printcomplex": "void __golang runtime_printcomplex(complex128 c)",
    "runtime.printuint": "void __golang runtime_printuint(uint64 v)",
    "runtime.printint": "void __golang runtime_printint(int64 v)",
    "runtime.printhex": "void __golang runtime_printhex(uint64 v)",
    "runtime.printpointer": "void __golang runtime_printpointer(void *p)",
    "runtime.printuintptr": "void __golang runtime_printuintptr(uintptr p)",
    "runtime.printstring": "void __golang runtime_printstring(string s)",
    "runtime.printslice": "void __golang runtime_printslice(_slice_uint8 s)",
    "runtime.hexdumpWords": "void __golang runtime_hexdumpWords(uintptr p, uintptr end, funcuintptr_uint8 mark)",
    "runtime.main": "void __golang runtime_main()",
    "runtime.forcegchelper": "void __golang __noreturn runtime_forcegchelper()",
    "runtime.goschedIfBusy": "void __golang runtime_goschedIfBusy()",
    "runtime.gopark": "void __golang runtime_gopark(func_ptr_runtime_g_comma_unsafe_Pointer_bool unlockf, void *lock, unsigned __int8 reason, unsigned __int8 traceReason, int traceskip)",
    "runtime.acquireSudog": "runtime_sudog *__golang runtime_acquireSudog()",
    "runtime.releaseSudog": "void __golang runtime_releaseSudog(runtime_sudog *s)",
    "runtime.badmcall": "void __golang __noreturn runtime_badmcall(func_ptr_runtime_g fn)",
    "runtime.badmcall2": "void __golang __noreturn runtime_badmcall2(func_ptr_runtime_g fn)",
    "runtime.badreflectcall": "void __golang __noreturn runtime_badreflectcall()",
    "runtime.badmorestackg0": "void __golang runtime_badmorestackg0()",
    "runtime.badmorestackgsignal": "void __golang runtime_badmorestackgsignal()",
    "runtime.badctxt": "void __golang runtime_badctxt()",
    "runtime.switchToCrashStack": "void __golang runtime_switchToCrashStack(func fn)",
    "runtime.allgadd": "void __golang runtime_allgadd(runtime_g *gp)",
    "runtime.forEachG": "void __golang runtime_forEachG(func_ptr_runtime_g fn)",
    "runtime.forEachGRace": "void __golang runtime_forEachGRace(func_ptr_runtime_g fn)",
    "runtime.getGodebugEarly": "string __golang runtime_getGodebugEarly()",
    "runtime.schedinit": "void __golang runtime_schedinit()",
    "runtime.checkmcount": "void __golang runtime_checkmcount()",
    "runtime.mReserveID": "int64 __golang runtime_mReserveID()",
    "runtime.mcommoninit": "void __golang runtime_mcommoninit(runtime_m *mp, int64 id)",
    "runtime.ready": "void __golang runtime_ready(runtime_g *gp, int traceskip, bool next)",
    "runtime.freezetheworld": "void __golang runtime_freezetheworld()",
    "runtime.casfrom_Gscanstatus": "void __golang runtime_casfrom_Gscanstatus(runtime_g *gp, uint32 oldval, uint32 newval)",
    "runtime.castogscanstatus": "bool __golang runtime_castogscanstatus(runtime_g *gp, uint32 oldval, uint32 newval)",
    "runtime.casgstatus": "void __golang runtime_casgstatus(runtime_g *gp, uint32 oldval, uint32 newval)",
    "runtime.casGToWaiting": "void __golang runtime_casGToWaiting(runtime_g *gp, uint32 old, unsigned __int8 reason)",
    "runtime.casGToPreemptScan": "void __golang runtime_casGToPreemptScan(runtime_g *gp, uint32 old, uint32 new)",
    "runtime.casGFromPreempted": "bool __golang runtime_casGFromPreempted(runtime_g *gp, uint32 old, uint32 new)",
    "runtime.stopTheWorld": "runtime_worldStop __golang runtime_stopTheWorld(unsigned __int8 reason)",
    "runtime.startTheWorld": "void __golang runtime_startTheWorld(runtime_worldStop w)",
    "runtime.stopTheWorldGC": "runtime_worldStop __golang runtime_stopTheWorldGC(unsigned __int8 reason)",
    "runtime.startTheWorldGC": "void __golang runtime_startTheWorldGC(runtime_worldStop w)",
    "runtime.stopTheWorldWithSema": "runtime_worldStop __golang runtime_stopTheWorldWithSema(unsigned __int8 reason)",
    "runtime.startTheWorldWithSema": "int64 __golang runtime_startTheWorldWithSema(int64 now, runtime_worldStop w)",
    "runtime.mstart0": "void __golang runtime_mstart0()",
    "runtime.mstart1": "void __golang runtime_mstart1()",
    "runtime.mstartm0": "void __golang runtime_mstartm0()",
    "runtime.mexit": "void __golang runtime_mexit(bool osStack)",
    "runtime.forEachPInternal": "void __golang runtime_forEachPInternal(func_ptr_runtime_p fn)",
    "runtime.runSafePointFn": "void __golang runtime_runSafePointFn()",
    "runtime.allocm": "runtime_m *__golang runtime_allocm(runtime_p *pp, func fn, int64 id)",
    "runtime.needm": "void __golang runtime_needm(bool signal)",
    "runtime.needAndBindM": "void __golang runtime_needAndBindM()",
    "runtime.newextram": "void __golang runtime_newextram()",
    "runtime.oneNewExtraM": "void __golang runtime_oneNewExtraM()",
    "runtime.dropm": "void __golang runtime_dropm()",
    "runtime.cgoBindM": "void __golang runtime_cgoBindM()",
    "runtime.lockextra": "runtime_m *__golang runtime_lockextra(bool nilokay)",
    "runtime.addExtraM": "void __golang runtime_addExtraM(runtime_m *mp)",
    "runtime.newm": "void __golang runtime_newm(func fn, runtime_p *pp, int64 id)",
    "runtime.newm1": "void __golang runtime_newm1(runtime_m *mp)",
    "runtime.startTemplateThread": "void __golang runtime_startTemplateThread()",
    "runtime.templateThread": "void __golang __noreturn runtime_templateThread()",
    "runtime.stopm": "void __golang runtime_stopm()",
    "runtime.mspinning": "void __golang runtime_mspinning()",
    "runtime.startm": "void __golang runtime_startm(runtime_p *pp, bool spinning, bool lockheld)",
    "runtime.handoffp": "void __golang runtime_handoffp(runtime_p *pp)",
    "runtime.wakep": "void __golang runtime_wakep()",
    "runtime.stoplockedm": "void __golang runtime_stoplockedm()",
    "runtime.startlockedm": "void __golang runtime_startlockedm(runtime_g *gp)",
    "runtime.gcstopm": "void __golang runtime_gcstopm()",
    "runtime.execute": "void __golang runtime_execute(runtime_g *gp, bool inheritTime)",
    "runtime.pollWork": "bool __golang runtime_pollWork()",
    "runtime.checkRunqsNoP": "runtime_p *__golang runtime_checkRunqsNoP(_slice__ptr_runtime_p allpSnapshot, runtime_pMask idlepMaskSnapshot)",
    "runtime.checkTimersNoP": "int64 __golang runtime_checkTimersNoP(_slice__ptr_runtime_p allpSnapshot, runtime_pMask timerpMaskSnapshot, int64 pollUntil)",
    "runtime.wakeNetPoller": "void __golang runtime_wakeNetPoller(int64 when)",
    "runtime.resetspinning": "void __golang runtime_resetspinning()",
    "runtime.injectglist": "void __golang runtime_injectglist(runtime_gList *glist)",
    "runtime.schedule": "void __golang runtime_schedule()",
    "runtime.parkunlock_c": "bool __golang runtime_parkunlock_c(runtime_g *gp, void *lock)",
    "runtime.park_m": "void __golang runtime_park_m(runtime_g *gp)",
    "runtime.goschedImpl": "void __golang runtime_goschedImpl(runtime_g *gp, bool preempted)",
    "runtime.gosched_m": "void __golang runtime_gosched_m(runtime_g *gp)",
    "runtime.goschedguarded_m": "void __golang runtime_goschedguarded_m(runtime_g *gp)",
    "runtime.gopreempt_m": "void __golang runtime_gopreempt_m(runtime_g *gp)",
    "runtime.preemptPark": "void __golang runtime_preemptPark(runtime_g *gp)",
    "runtime.goyield_m": "void __golang runtime_goyield_m(runtime_g *gp)",
    "runtime.goexit1": "void __golang runtime_goexit1()",
    "runtime.goexit0": "void __golang runtime_goexit0(runtime_g *gp)",
    "runtime.gdestroy": "void __golang runtime_gdestroy(runtime_g *gp)",
    "runtime.save": "void __golang runtime_save(uintptr pc, uintptr sp_0)",
    "runtime.reentersyscall": "void __golang runtime_reentersyscall(uintptr pc, uintptr sp_0)",
    "runtime.entersyscall_sysmon": "void __golang runtime_entersyscall_sysmon()",
    "runtime.entersyscall_gcwait": "void __golang runtime_entersyscall_gcwait()",
    "runtime.entersyscallblock": "void __golang runtime_entersyscallblock()",
    "runtime.entersyscallblock_handoff": "void __golang runtime_entersyscallblock_handoff()",
    "runtime.exitsyscallfast": "bool __golang runtime_exitsyscallfast(runtime_p *oldp)",
    "runtime.exitsyscallfast_reacquired": "void __golang runtime_exitsyscallfast_reacquired(runtime_traceLocker trace)",
    "runtime.exitsyscallfast_pidle": "bool __golang runtime_exitsyscallfast_pidle()",
    "runtime.exitsyscall0": "void __golang runtime_exitsyscall0(runtime_g *gp)",
    "runtime.malg": "runtime_g *__golang runtime_malg(int32 stacksize)",
    "runtime.newproc": "void __golang runtime_newproc(runtime_funcval *fn)",
    "runtime.newproc1": "runtime_g *__golang runtime_newproc1(runtime_funcval *fn, runtime_g *callergp, uintptr callerpc)",
    "runtime.saveAncestors": "_slice_runtime_ancestorInfo *__golang runtime_saveAncestors(runtime_g *callergp)",
    "runtime.gfput": "void __golang runtime_gfput(runtime_p *pp, runtime_g *gp)",
    "runtime.gfget": "runtime_g *__golang runtime_gfget(runtime_p *pp)",
    "runtime.gfpurge": "void __golang runtime_gfpurge(runtime_p *pp)",
    "runtime.LockOSThread": "void __golang runtime_LockOSThread()",
    "runtime.UnlockOSThread": "void __golang runtime_UnlockOSThread()",
    "runtime.unlockOSThread": "void __golang runtime_unlockOSThread()",
    "runtime.badunlockosthread": "void __golang __noreturn runtime_badunlockosthread()",
    "runtime.sigprof": "void __golang runtime_sigprof(uintptr pc, uintptr sp_0, uintptr lr, runtime_g *gp, runtime_m *mp)",
    "runtime._ptr_p.destroy": "void __golang runtime__ptr_p_destroy(_ptr_runtime_p)",
    "runtime.procresize": "runtime_p *__golang runtime_procresize(int32 nprocs)",
    "runtime.acquirep": "void __golang runtime_acquirep(runtime_p *pp)",
    "runtime.wirep": "void __golang runtime_wirep(runtime_p *pp)",
    "runtime.releasep": "runtime_p *__golang runtime_releasep()",
    "runtime.releasepNoTrace": "runtime_p *__golang runtime_releasepNoTrace()",
    "runtime.incidlelocked": "void __golang runtime_incidlelocked(int32 v)",
    "runtime.checkdead": "void __golang runtime_checkdead()",
    "runtime.sysmon": "void __golang __noreturn runtime_sysmon()",
    "runtime.retake": "uint32 __golang runtime_retake(int64 now)",
    "runtime.preemptall": "bool __golang runtime_preemptall()",
    "runtime.preemptone": "bool __golang runtime_preemptone(runtime_p *pp)",
    "runtime.schedtrace": "void __golang runtime_schedtrace(bool detailed)",
    "runtime.schedEnableUser": "void __golang runtime_schedEnableUser(bool enable)",
    "runtime.mput": "void __golang runtime_mput(runtime_m *mp)",
    "runtime.globrunqget": "runtime_g *__golang runtime_globrunqget(runtime_p *pp, int32 max)",
    "runtime.updateTimerPMask": "void __golang runtime_updateTimerPMask(runtime_p *pp)",
    "runtime.pidleput": "int64 __golang runtime_pidleput(runtime_p *pp, int64 now)",
    "runtime.runqput": "void __golang runtime_runqput(runtime_p *pp, runtime_g *gp, bool next)",
    "runtime.runqputslow": "bool __golang runtime_runqputslow(runtime_p *pp, runtime_g *gp, uint32 h, uint32 t)",
    "runtime.runqputbatch": "void __golang runtime_runqputbatch(runtime_p *pp, runtime_gQueue *q, int qsize)",
    "runtime.runqgrab": "uint32 __golang runtime_runqgrab(runtime_p *pp, unsigned __int64 (*batch)[256], uint32 batchHead, bool stealRunNextG)",
    "runtime.runqsteal": "runtime_g *__golang runtime_runqsteal(runtime_p *pp, runtime_p *p2, bool stealRunNextG)",
    "runtime.doInit1": "void __golang runtime_doInit1(runtime_initTask *t)",
    "runtime.newProfBuf": "runtime_profBuf *__golang runtime_newProfBuf(int hdrsize, int bufwords, int tags)",
    "runtime._ptr_profBuf.canWriteRecord": "bool __golang runtime__ptr_profBuf_canWriteRecord(_ptr_runtime_profBuf, int_0)",
    "runtime._ptr_profBuf.write": "void __golang runtime__ptr_profBuf_write(runtime_profBuf *b, void **tagPtr, int64 now, _slice_uint64 hdr, _slice_uintptr stk)",
    "runtime._ptr_profBuf.close": "void __golang runtime__ptr_profBuf_close(_ptr_runtime_profBuf)",
    "runtime._ptr_profBuf.wakeupExtra": "void __golang runtime__ptr_profBuf_wakeupExtra(_ptr_runtime_profBuf)",
    "runtime.randinit": "void __golang runtime_randinit()",
    "runtime.readTimeRandom": "void __golang runtime_readTimeRandom(_slice_uint8 r)",
    "runtime.bootstrapRand": "uint64 __golang runtime_bootstrapRand()",
    "runtime.bootstrapRandReseed": "void __golang runtime_bootstrapRandReseed()",
    "runtime.rand32": "uint32 __golang runtime_rand32()",
    "runtime.mrandinit": "void __golang runtime_mrandinit(runtime_m *mp)",
    "runtime.retryOnEAGAIN": "int32 __golang runtime_retryOnEAGAIN(func_int32 fn)",
    "runtime._ptr_godebugInc.IncNonDefault": "void __golang runtime__ptr_godebugInc_IncNonDefault(runtime_godebugInc *g)",
    "runtime.godebugNotify": "void __golang runtime_godebugNotify(bool envChanged)",
    "runtime.getAuxv": "_slice_uintptr __golang runtime_getAuxv()",
    "runtime.args": "void __golang runtime_args(int32 c, uint8 **v)",
    "runtime.goargs": "void __golang runtime_goargs()",
    "runtime.goenvs_unix": "void __golang runtime_goenvs_unix()",
    "runtime.testAtomic64": "void __golang runtime_testAtomic64()",
    "runtime.check": "void __golang runtime_check()",
    "runtime.parsedebugvars": "void __golang runtime_parsedebugvars()",
    "runtime.reparsedebugvars": "void __golang runtime_reparsedebugvars(string env)",
    "runtime.parsegodebug": "void __golang runtime_parsegodebug(string godebug, map_string_bool seen)",
    "runtime.puintptr.ptr": "runtime_p *__golang runtime_puintptr_ptr(unsigned __int64 pp)",
    "runtime.waitReason.String": "string_0 __golang runtime_waitReason_String(runtime_waitReason)",
    "runtime._ptr_rwmutex.rlock": "void __golang runtime__ptr_rwmutex_rlock(runtime_rwmutex *rw)",
    "runtime._ptr_rwmutex.runlock": "void __golang runtime__ptr_rwmutex_runlock(runtime_rwmutex *rw)",
    "runtime.sellock": "void __golang runtime_sellock(_slice_runtime_scase scases, _slice_uint16 lockorder)",
    "runtime.selunlock": "void __golang runtime_selunlock(_slice_runtime_scase scases, _slice_uint16 lockorder)",
    "runtime.block": "void __golang runtime_block()",
    "runtime.readyWithTime": "void __golang runtime_readyWithTime(runtime_sudog *s, int traceskip)",
    "runtime.semacquire1": "void __golang runtime_semacquire1(uint32 *addr, bool lifo, __int64 profile, int skipframes, unsigned __int8 reason)",
    "runtime.semrelease1": "void __golang runtime_semrelease1(uint32 *addr, bool handoff, int skipframes)",
    "runtime._ptr_semaRoot.queue": "void __golang runtime__ptr_semaRoot_queue(runtime_semaRoot *root, uint32 *addr, runtime_sudog *s, bool lifo)",
    "runtime._ptr_semaRoot.rotateLeft": "void __golang runtime__ptr_semaRoot_rotateLeft(runtime_semaRoot *root, runtime_sudog *x)",
    "runtime._ptr_semaRoot.rotateRight": "void __golang runtime__ptr_semaRoot_rotateRight(runtime_semaRoot *root, runtime_sudog *y)",
    "runtime.dumpregs": "void __golang runtime_dumpregs(runtime_sigctxt *c)",
    "runtime._ptr_sigctxt.preparePanic": "void __golang runtime__ptr_sigctxt_preparePanic(runtime_sigctxt *c, uint32 sig, runtime_g *gp)",
    "runtime.initsig": "void __golang runtime_initsig(bool preinit)",
    "runtime.sigenable": "void __golang runtime_sigenable(uint32 sig)",
    "runtime.clearSignalHandlers": "void __golang runtime_clearSignalHandlers()",
    "runtime.sigpipe": "void __golang runtime_sigpipe()",
    "runtime.doSigPreempt": "void __golang runtime_doSigPreempt(runtime_g *gp, runtime_sigctxt *ctxt)",
    "runtime.sigtrampgo": "void __golang runtime_sigtrampgo(uint32 sig, runtime_siginfo *info, void *ctx)",
    "runtime.sigprofNonGo": "void __golang runtime_sigprofNonGo(uint32 sig, runtime_siginfo *info, void *ctx)",
    "runtime.sigprofNonGoPC": "void __golang runtime_sigprofNonGoPC(uintptr pc)",
    "runtime.adjustSignalStack": "bool __golang runtime_adjustSignalStack(uint32 sig, runtime_m *mp, runtime_gsignalStack *gsigStack)",
    "runtime.sighandler": "void __golang runtime_sighandler(uint32 sig, runtime_siginfo *info, void *ctxt, runtime_g *gp)",
    "runtime.fatalsignal": "runtime_g *__golang runtime_fatalsignal(uint32 sig, runtime_sigctxt *c, runtime_g *gp, runtime_m *mp)",
    "runtime.sigpanic": "void __golang __noreturn runtime_sigpanic()",
    "runtime.dieFromSignal": "void __golang runtime_dieFromSignal(uint32 sig)",
    "runtime.raisebadsignal": "void __golang runtime_raisebadsignal(uint32 sig, runtime_sigctxt *c)",
    "runtime.ensureSigM": "void __golang runtime_ensureSigM()",
    "runtime.noSignalStack": "void __golang __noreturn runtime_noSignalStack(uint32 sig)",
    "runtime.sigNotOnStack": "void __golang __noreturn runtime_sigNotOnStack(uint32 sig, uintptr sp, runtime_m *mp)",
    "runtime.signalDuringFork": "void __golang __noreturn runtime_signalDuringFork(uint32 sig)",
    "runtime.badsignal": "void __golang runtime_badsignal(uintptr sig, runtime_sigctxt *c)",
    "runtime.sigfwdgo": "bool __golang runtime_sigfwdgo(uint32 sig, runtime_siginfo *info, void *ctx)",
    "runtime.sigblock": "void __golang runtime_sigblock(bool exiting)",
    "runtime.unblocksig": "void __golang runtime_unblocksig(uint32 sig)",
    "runtime.minitSignals": "void __golang runtime_minitSignals()",
    "runtime.minitSignalStack": "void __golang runtime_minitSignalStack()",
    "runtime.minitSignalMask": "void __golang runtime_minitSignalMask()",
    "runtime.unminitSignals": "void __golang runtime_unminitSignals()",
    "runtime.signalstack": "void __golang runtime_signalstack(runtime_stack *s)",
    "runtime.sigsend": "bool __golang runtime_sigsend(uint32 s)",
    "runtime.panicmakeslicelen": "void __golang __noreturn runtime_panicmakeslicelen()",
    "runtime.makeslicecopy": "void *__golang runtime_makeslicecopy(internal_abi_Type *et, int tolen, int fromlen, void *from)",
    "runtime.makeslice": "void *__golang runtime_makeslice(internal_abi_Type *et, int len, int cap)",
    "runtime.growslice": "runtime_slice __golang runtime_growslice(void *oldPtr, int newLen, int oldCap, int num, internal_abi_Type *et)",
    "runtime.slicecopy": "int __golang runtime_slicecopy(void *toPtr, int toLen, void *fromPtr, int fromLen, uintptr width)",
    "runtime.stackpoolalloc": "unsigned __int64 __golang runtime_stackpoolalloc(uint8 order)",
    "runtime.stackpoolfree": "void __golang runtime_stackpoolfree(unsigned __int64 x, uint8 order)",
    "runtime.stackcacherefill": "void __golang runtime_stackcacherefill(runtime_mcache *c, uint8 order)",
    "runtime.stackcacherelease": "void __golang runtime_stackcacherelease(runtime_mcache *c, uint8 order)",
    "runtime.stackcache_clear": "void __golang runtime_stackcache_clear(runtime_mcache *c)",
    "runtime.stackalloc": "runtime_stack __golang runtime_stackalloc(uint32 n)",
    "runtime.stackfree": "void __golang runtime_stackfree(runtime_stack stk)",
    "runtime.adjustpointers": "void __golang runtime_adjustpointers(void *scanp, runtime_bitvector *bv, runtime_adjustinfo *adjinfo, runtime_funcInfo f)",
    "runtime.adjustframe": "void __golang runtime_adjustframe(runtime_stkframe *frame, runtime_adjustinfo *adjinfo)",
    "runtime.adjustctxt": "void __golang runtime_adjustctxt(runtime_g *gp, runtime_adjustinfo *adjinfo)",
    "runtime.adjustdefers": "void __golang runtime_adjustdefers(runtime_g *gp, runtime_adjustinfo *adjinfo)",
    "runtime.syncadjustsudogs": "uintptr __golang runtime_syncadjustsudogs(runtime_g *gp, uintptr used, runtime_adjustinfo *adjinfo)",
    "runtime.copystack": "void __golang runtime_copystack(runtime_g *gp, uintptr newsize)",
    "runtime.newstack": "void __golang runtime_newstack()",
    "runtime.nilfunc": "void __golang runtime_nilfunc()",
    "runtime.gostartcallfn": "void __golang runtime_gostartcallfn(runtime_gobuf *gobuf, runtime_funcval *fv)",
    "runtime.shrinkstack": "void __golang runtime_shrinkstack(runtime_g *gp)",
    "runtime.freeStackSpans": "void __golang runtime_freeStackSpans()",
    "runtime.gcComputeStartingStackSize": "void __golang runtime_gcComputeStartingStackSize()",
    "runtime._ptr_stkframe.argBytes": "uintptr __golang runtime__ptr_stkframe_argBytes(runtime_stkframe *frame)",
    "runtime.stkobjinit": "void __golang runtime_stkobjinit()",
    "runtime.concatstrings": "string __golang runtime_concatstrings(runtime_tmpBuf *buf, _slice_string a)",
    "runtime.concatstring2": "string __golang runtime_concatstring2(runtime_tmpBuf *buf, string a0, string a1)",
    "runtime.concatstring3": "string __golang runtime_concatstring3(runtime_tmpBuf *buf, string a0, string a1, string a2)",
    "runtime.concatstring4": "string __golang runtime_concatstring4(runtime_tmpBuf *buf, string a0, string a1, string a2, string a3)",
    "runtime.concatstring5": "void __golang runtime_concatstring5(runtime_tmpBuf *buf, string a0, string a4, string a1, string _r0, string a2, string a3)",
    "runtime.slicebytetostring": "string __golang runtime_slicebytetostring(runtime_tmpBuf *buf, uint8 *ptr, int n)",
    "runtime.stringtoslicebyte": "_slice_uint8 __golang runtime_stringtoslicebyte(runtime_tmpBuf *buf, string s)",
    "runtime.stringtoslicerune": "_slice_int32 __golang runtime_stringtoslicerune(int32 (*buf)[32], string s)",
    "runtime.slicerunetostring": "string __golang runtime_slicerunetostring(runtime_tmpBuf *buf, _slice_int32 a)",
    "runtime.intstring": "string __golang runtime_intstring(uint8 (*buf)[4], int64 v)",
    "runtime.rawbyteslice": "void __golang runtime_rawbyteslice(_slice_uint8 b, int size)",
    "runtime.rawruneslice": "void __golang runtime_rawruneslice(_slice_int32 b, int size)",
    "runtime.findnull": "int __golang runtime_findnull(uint8 *s)",
    "runtime.badsystemstack": "void __golang runtime_badsystemstack()",
    "runtime.expandCgoFrames": "_slice_runtime_Frame __golang runtime_expandCgoFrames(uintptr pc)",
    "runtime.modulesinit": "void __golang runtime_modulesinit()",
    "runtime.moduledataverify1": "void __golang runtime_moduledataverify1(runtime_moduledata *datap)",
    "runtime._ptr_moduledata.textAddr": "uintptr __golang runtime__ptr_moduledata_textAddr(runtime_moduledata *md, uint32 off32)",
    "runtime._ptr_moduledata.funcName": "string __golang runtime__ptr_moduledata_funcName(runtime_moduledata *md, int32 nameOff)",
    "runtime.FuncForPC": "runtime_Func *__golang runtime_FuncForPC(uintptr pc)",
    "runtime._ptr_Func.Name": "string_0 __golang runtime__ptr_Func_Name(_ptr_runtime_Func)",
    "runtime._ptr_Func.Entry": "uintptr_0 __golang runtime__ptr_Func_Entry(_ptr_runtime_Func)",
    "runtime.findfunc": "runtime_funcInfo __golang runtime_findfunc(uintptr pc)",
    "runtime.funcpkgpath": "string __golang runtime_funcpkgpath(runtime_funcInfo f)",
    "runtime.funcfile": "string __golang runtime_funcfile(runtime_funcInfo f, int32 fileno)",
    "runtime.funcMaxSPDelta": "int32 __golang runtime_funcMaxSPDelta(runtime_funcInfo f)",
    "runtime.pcdatavalue": "int32 __golang runtime_pcdatavalue(runtime_funcInfo f, uint32 table, uintptr targetpc)",
    "runtime.pcdatavalue1": "int32 __golang runtime_pcdatavalue1(runtime_funcInfo f, uint32 table, uintptr targetpc, bool strict)",
    "runtime._ptr_inlineUnwinder.next": "runtime_inlineFrame __golang runtime__ptr_inlineUnwinder_next(runtime_inlineUnwinder *u, runtime_inlineFrame uf)",
    "runtime.resetForSleep": "bool __golang runtime_resetForSleep(runtime_g *gp, void *ut)",
    "runtime.goroutineReady": "void __golang runtime_goroutineReady(interface_ arg, uintptr seq)",
    "runtime.addtimer": "void __golang runtime_addtimer(runtime_timer *t)",
    "runtime.doaddtimer": "void __golang runtime_doaddtimer(runtime_p *pp, runtime_timer *t)",
    "runtime.deltimer": "bool __golang runtime_deltimer(runtime_timer *t)",
    "runtime.dodeltimer": "int __golang runtime_dodeltimer(runtime_p *pp, int i)",
    "runtime.dodeltimer0": "void __golang runtime_dodeltimer0(runtime_p *pp)",
    "runtime.modtimer": "bool __golang runtime_modtimer(runtime_timer *t, int64 when, int64 period, funcinterface__comma_uintptr f, interface_ arg, uintptr seq)",
    "runtime.cleantimers": "void __golang runtime_cleantimers(runtime_p *pp)",
    "runtime.moveTimers": "void __golang runtime_moveTimers(runtime_p *pp, _slice__ptr_runtime_timer timers)",
    "runtime.adjusttimers": "void __golang runtime_adjusttimers(runtime_p *pp, int64 now)",
    "runtime.addAdjustedTimers": "void __golang runtime_addAdjustedTimers(runtime_p *pp, _slice__ptr_runtime_timer moved)",
    "runtime.runtimer": "int64 __golang runtime_runtimer(runtime_p *pp, int64 now)",
    "runtime.runOneTimer": "void __golang runtime_runOneTimer(runtime_p *pp, runtime_timer *t, int64 now)",
    "runtime.clearDeletedTimers": "void __golang runtime_clearDeletedTimers(runtime_p *pp)",
    "runtime.timeSleepUntil": "int64 __golang runtime_timeSleepUntil()",
    "runtime.siftupTimer": "int __golang runtime_siftupTimer(_slice__ptr_runtime_timer t, int i)",
    "runtime.siftdownTimer": "void __golang runtime_siftdownTimer(_slice__ptr_runtime_timer t, int i)",
    "runtime.badTimer": "void __golang __noreturn runtime_badTimer()",
    "runtime.nanotime": "int64 __golang runtime_nanotime()",
    "runtime.write": "int32 __golang runtime_write(uintptr fd, void *p, int32 n)",
    "runtime.StartTrace": "error __golang runtime_StartTrace()",
    "runtime.traceAdvance": "void __golang runtime_traceAdvance(bool stopTrace)",
    "runtime.traceRegisterLabelsAndReasons": "void __golang runtime_traceRegisterLabelsAndReasons(uintptr gen)",
    "runtime.ReadTrace": "_slice_uint8 __golang runtime_ReadTrace()",
    "runtime.traceReader": "runtime_g *__golang runtime_traceReader()",
    "runtime._ptr_traceAdvancerState.start": "void __golang runtime__ptr_traceAdvancerState_start(_ptr_runtime_traceAdvancerState)",
    "runtime._ptr_traceAdvancerState.stop": "void __golang runtime__ptr_traceAdvancerState_stop(_ptr_runtime_traceAdvancerState)",
    "runtime._ptr_wakeableSleep.sleep": "void __golang runtime__ptr_wakeableSleep_sleep(_ptr_runtime_wakeableSleep, int64_0)",
    "runtime._ptr_wakeableSleep.wake": "void __golang runtime__ptr_wakeableSleep_wake(_ptr_runtime_wakeableSleep)",
    "runtime._ptr_wakeableSleep.close": "void __golang runtime__ptr_wakeableSleep_close(_ptr_runtime_wakeableSleep)",
    "runtime.traceWriter.flush": "runtime_traceWriter __golang runtime_traceWriter_flush(runtime_traceWriter w)",
    "runtime.traceWriter.refill": "runtime_traceWriter __golang runtime_traceWriter_refill(runtime_traceWriter w)",
    "runtime._ptr_traceBuf.varintAt": "void __golang runtime__ptr_traceBuf_varintAt(runtime_traceBuf *buf, int pos, uint64 v)",
    "runtime.traceBufFlush": "void __golang runtime_traceBufFlush(runtime_traceBuf *buf, uintptr gen)",
    "runtime.traceInitReadCPU": "void __golang runtime_traceInitReadCPU()",
    "runtime.traceStartReadCPU": "void __golang runtime_traceStartReadCPU()",
    "runtime.traceStopReadCPU": "void __golang runtime_traceStopReadCPU()",
    "runtime.traceReadCPU": "bool __golang runtime_traceReadCPU(uintptr gen)",
    "runtime.traceCPUFlush": "void __golang runtime_traceCPUFlush(uintptr gen)",
    "runtime.traceCPUSample": "void __golang runtime_traceCPUSample(runtime_g *gp, runtime_m *mp, runtime_p *pp, _slice_uintptr stk)",
    "runtime.traceLocker.eventWriter": "runtime_traceEventWriter __golang runtime_traceLocker_eventWriter(runtime_traceLocker tl, unsigned __int8 goStatus, unsigned __int8 procStatus)",
    "runtime.traceEventWriter.commit": "void __golang runtime_traceEventWriter_commit(runtime_traceEventWriter e, unsigned __int8 ev, _slice_runtime_traceArg args)",
    "runtime.traceWriter.event": "runtime_traceWriter __golang runtime_traceWriter_event(runtime_traceWriter w, unsigned __int8 ev, _slice_runtime_traceArg args)",
    "runtime.traceLocker.startPC": "unsigned __int64 __golang runtime_traceLocker_startPC(runtime_traceLocker tl, uintptr pc)",
    "runtime._ptr_traceMap.find": "uint64 __golang runtime__ptr_traceMap_find(runtime_traceMap *tab, void *data, uintptr size, uintptr hash)",
    "runtime._ptr_traceMap.newTraceMapNode": "runtime_traceMapNode *__golang runtime__ptr_traceMap_newTraceMapNode(runtime_traceMap *tab, void *data, uintptr size, uintptr hash, uint64 id)",
    "runtime._ptr_traceMap.reset": "void __golang runtime__ptr_traceMap_reset(runtime_traceMap *tab)",
    "runtime._ptr_traceRegionAlloc.alloc": "runtime_notInHeap *__golang runtime__ptr_traceRegionAlloc_alloc(runtime_traceRegionAlloc *a, uintptr n)",
    "runtime.traceAcquireEnabled": "runtime_traceLocker __golang runtime_traceAcquireEnabled()",
    "runtime.traceLocker.Gomaxprocs": "void __golang runtime_traceLocker_Gomaxprocs(runtime_traceLocker tl, int32 procs)",
    "runtime.traceLocker.ProcStart": "void __golang runtime_traceLocker_ProcStart(runtime_traceLocker tl)",
    "runtime.traceLocker.ProcStop": "void __golang runtime_traceLocker_ProcStop(runtime_traceLocker tl, runtime_p *pp)",
    "runtime.traceLocker.GCActive": "void __golang runtime_traceLocker_GCActive(runtime_traceLocker tl)",
    "runtime.traceLocker.GCStart": "void __golang runtime_traceLocker_GCStart(runtime_traceLocker tl)",
    "runtime.traceLocker.GCDone": "void __golang runtime_traceLocker_GCDone(runtime_traceLocker tl)",
    "runtime.traceLocker.STWStart": "void __golang runtime_traceLocker_STWStart(runtime_traceLocker tl, unsigned __int8 reason)",
    "runtime.traceLocker.STWDone": "void __golang runtime_traceLocker_STWDone(runtime_traceLocker tl)",
    "runtime.traceLocker.GCSweepStart": "void __golang runtime_traceLocker_GCSweepStart(runtime_traceLocker tl)",
    "runtime.traceLocker.GCSweepSpan": "void __golang runtime_traceLocker_GCSweepSpan(runtime_traceLocker tl, uintptr bytesSwept)",
    "runtime.traceLocker.GCSweepDone": "void __golang runtime_traceLocker_GCSweepDone(runtime_traceLocker tl)",
    "runtime.traceLocker.GCMarkAssistStart": "void __golang runtime_traceLocker_GCMarkAssistStart(runtime_traceLocker tl)",
    "runtime.traceLocker.GCMarkAssistDone": "void __golang runtime_traceLocker_GCMarkAssistDone(runtime_traceLocker tl)",
    "runtime.traceLocker.GoCreate": "void __golang runtime_traceLocker_GoCreate(runtime_traceLocker tl, runtime_g *newg, uintptr pc)",
    "runtime.traceLocker.GoStart": "void __golang runtime_traceLocker_GoStart(runtime_traceLocker tl)",
    "runtime.traceLocker.GoEnd": "void __golang runtime_traceLocker_GoEnd(runtime_traceLocker tl)",
    "runtime.traceLocker.GoStop": "void __golang runtime_traceLocker_GoStop(runtime_traceLocker tl, unsigned __int8 reason)",
    "runtime.traceLocker.GoPark": "void __golang runtime_traceLocker_GoPark(runtime_traceLocker tl, unsigned __int8 reason, int skip)",
    "runtime.traceLocker.GoUnpark": "void __golang runtime_traceLocker_GoUnpark(runtime_traceLocker tl, runtime_g *gp, int skip)",
    "runtime.traceLocker.GoSysCall": "void __golang runtime_traceLocker_GoSysCall(runtime_traceLocker tl)",
    "runtime.traceLocker.GoSysExit": "void __golang runtime_traceLocker_GoSysExit(runtime_traceLocker tl, bool lostP)",
    "runtime.traceLocker.ProcSteal": "void __golang runtime_traceLocker_ProcSteal(runtime_traceLocker tl, runtime_p *pp, bool inSyscall)",
    "runtime.traceLocker.HeapAlloc": "void __golang runtime_traceLocker_HeapAlloc(runtime_traceLocker tl, uint64 live)",
    "runtime.traceLocker.HeapGoal": "void __golang runtime_traceLocker_HeapGoal(runtime_traceLocker tl)",
    "runtime.traceLocker.GoCreateSyscall": "void __golang runtime_traceLocker_GoCreateSyscall(runtime_traceLocker tl, runtime_g *gp)",
    "runtime.traceLocker.GoDestroySyscall": "void __golang runtime_traceLocker_GoDestroySyscall(runtime_traceLocker tl)",
    "runtime.traceThreadDestroy": "void __golang runtime_traceThreadDestroy(runtime_m *mp)",
    "runtime.traceStack": "uint64 __golang runtime_traceStack(int skip, runtime_m *mp, uintptr gen)",
    "runtime._ptr_traceStackTable.put": "uint64 __golang runtime__ptr_traceStackTable_put(runtime_traceStackTable *t, _slice_uintptr pcs)",
    "runtime._ptr_traceStackTable.dump": "void __golang runtime__ptr_traceStackTable_dump(runtime_traceStackTable *t, uintptr gen)",
    "runtime.makeTraceFrames": "_slice_runtime_traceFrame __golang runtime_makeTraceFrames(uintptr gen, _slice_uintptr pcs)",
    "runtime.makeTraceFrame": "runtime_traceFrame __golang runtime_makeTraceFrame(uintptr gen, runtime_Frame f)",
    "runtime.fpunwindExpand": "_slice_uintptr __golang runtime_fpunwindExpand(_slice_uintptr pcBuf)",
    "runtime.startPCForTrace": "uintptr __golang runtime_startPCForTrace(uintptr pc)",
    "runtime.traceWriter.writeGoStatus": "runtime_traceWriter __golang runtime_traceWriter_writeGoStatus(runtime_traceWriter w, uint64 goid, int64 mid, unsigned __int8 status, bool markAssist)",
    "runtime.traceWriter.writeProcStatusForP": "runtime_traceWriter __golang runtime_traceWriter_writeProcStatusForP(runtime_traceWriter w, runtime_p *pp, bool inSTW)",
    "runtime.traceWriter.writeProcStatus": "runtime_traceWriter __golang runtime_traceWriter_writeProcStatus(runtime_traceWriter w, uint64 pid, unsigned __int8 status, bool inSweep)",
    "runtime.goStatusToTraceGoStatus": "unsigned __int8 __golang runtime_goStatusToTraceGoStatus(uint32 status, unsigned __int8 wr)",
    "runtime._ptr_traceStringTable.put": "uint64 __golang runtime__ptr_traceStringTable_put(runtime_traceStringTable *t, uintptr gen, string s)",
    "runtime._ptr_traceStringTable.writeString": "void __golang runtime__ptr_traceStringTable_writeString(runtime_traceStringTable *t, uintptr gen, uint64 id, string s)",
    "runtime._ptr_traceStringTable.reset": "void __golang runtime__ptr_traceStringTable_reset(runtime_traceStringTable *t, uintptr gen)",
    "runtime.traceFrequency": "void __golang runtime_traceFrequency(uintptr gen)",
    "runtime._ptr_unwinder.initAt": "void __golang runtime__ptr_unwinder_initAt(runtime_unwinder *u, uintptr pc0, uintptr sp0, uintptr lr0, runtime_g *gp, unsigned __int8 flags)",
    "runtime._ptr_unwinder.resolveInternal": "void __golang runtime__ptr_unwinder_resolveInternal(runtime_unwinder *u, bool innermost, bool isSyscall)",
    "runtime._ptr_unwinder.next": "void __golang runtime__ptr_unwinder_next(runtime_unwinder *u)",
    "runtime._ptr_unwinder.finishInternal": "void __golang runtime__ptr_unwinder_finishInternal(runtime_unwinder *u)",
    "runtime._ptr_unwinder.symPC": "uintptr __golang runtime__ptr_unwinder_symPC(runtime_unwinder *u)",
    "runtime._ptr_unwinder.cgoCallers": "int __golang runtime__ptr_unwinder_cgoCallers(runtime_unwinder *u, _slice_uintptr pcBuf)",
    "runtime.tracebackPCs": "int __golang runtime_tracebackPCs(runtime_unwinder *u, int skip, _slice_uintptr pcBuf)",
    "runtime.printArgs": "void __golang runtime_printArgs(runtime_funcInfo f, void *argp, uintptr pc)",
    "runtime.printFuncName": "void __golang runtime_printFuncName(string name)",
    "runtime.printcreatedby": "void __golang runtime_printcreatedby(runtime_g *gp)",
    "runtime.printcreatedby1": "void __golang runtime_printcreatedby1(runtime_funcInfo f, uintptr pc, uint64 goid)",
    "runtime.tracebacktrap": "void __golang runtime_tracebacktrap(uintptr pc, uintptr sp_0, uintptr lr, runtime_g *gp)",
    "runtime.traceback1": "void __golang runtime_traceback1(uintptr pc, uintptr sp_0, uintptr lr, runtime_g *gp, unsigned __int8 flags)",
    "runtime.printAncestorTraceback": "void __golang runtime_printAncestorTraceback(runtime_ancestorInfo ancestor)",
    "runtime.printAncestorTracebackFuncInfo": "void __golang runtime_printAncestorTracebackFuncInfo(runtime_funcInfo f, uintptr pc)",
    "runtime.callers": "int __golang runtime_callers(int skip, _slice_uintptr pcbuf)",
    "runtime.gcallers": "int __golang runtime_gcallers(runtime_g *gp, int skip, _slice_uintptr pcbuf)",
    "runtime.showframe": "bool __golang runtime_showframe(runtime_srcFunc sf_0, runtime_g *gp, bool firstFrame, unsigned __int8 calleeID)",
    "runtime.showfuncinfo": "bool __golang runtime_showfuncinfo(runtime_srcFunc sf_0, bool firstFrame, unsigned __int8 calleeID)",
    "runtime.goroutineheader": "void __golang runtime_goroutineheader(runtime_g *gp)",
    "runtime.tracebackothers": "void __golang runtime_tracebackothers(runtime_g *me)",
    "runtime.tracebackHexdump": "void __golang runtime_tracebackHexdump(runtime_stack stk, runtime_stkframe *frame, uintptr bad)",
    "runtime.isSystemGoroutine": "bool __golang runtime_isSystemGoroutine(runtime_g *gp, bool fixed)",
    "runtime.printCgoTraceback": "void __golang runtime_printCgoTraceback(runtime_cgoCallers *callers)",
    "runtime.printOneCgoTraceback": "bool __golang runtime_printOneCgoTraceback(uintptr pc, func_bool_comma_bool commitFrame, runtime_cgoSymbolizerArg *arg)",
    "runtime.callCgoSymbolizer": "void __golang runtime_callCgoSymbolizer(runtime_cgoSymbolizerArg *arg)",
    "runtime.cgoContextPCs": "void __golang runtime_cgoContextPCs(uintptr ctxt, _slice_uintptr buf)",
    "runtime.rtype.string": "string __golang runtime_rtype_string(runtime_rtype t)",
    "runtime.rtype.pkgpath": "string __golang runtime_rtype_pkgpath(runtime_rtype t)",
    "runtime.resolveNameOff": "internal_abi_Name __golang runtime_resolveNameOff(void *ptrInModule, int off)",
    "runtime.resolveTypeOff": "internal_abi_Type *__golang runtime_resolveTypeOff(void *ptrInModule, int off)",
    "runtime.rtype.textOff": "void *__golang runtime_rtype_textOff(runtime_rtype t, int off)",
    "runtime.pkgPath": "string __golang runtime_pkgPath(internal_abi_Name n)",
    "runtime.typelinksinit": "void __golang runtime_typelinksinit()",
    "runtime.typesEqual": "bool __golang runtime_typesEqual(internal_abi_Type *t, internal_abi_Type *v, map_runtime__typePair_struct_ seen)",
    "runtime.panicunsafestringlen": "void __golang __noreturn runtime_panicunsafestringlen()",
    "runtime.panicunsafestringnilptr": "void __golang __noreturn runtime_panicunsafestringnilptr()",
    "runtime.panicunsafeslicelen": "void __golang runtime_panicunsafeslicelen()",
    "runtime.panicunsafeslicelen1": "void __golang __noreturn runtime_panicunsafeslicelen1(uintptr pc)",
    "runtime.panicunsafeslicenilptr": "void __golang runtime_panicunsafeslicenilptr()",
    "runtime.panicunsafeslicenilptr1": "void __golang __noreturn runtime_panicunsafeslicenilptr1(uintptr pc)",
    "runtime.encoderune": "int __golang runtime_encoderune(_slice_uint8 p, int32 r)",
    "runtime.vdsoInitFromSysinfoEhdr": "void __golang runtime_vdsoInitFromSysinfoEhdr(runtime_vdsoInfo *info, runtime_elfEhdr *hdr)",
    "runtime.vdsoFindVersion": "int32 __golang runtime_vdsoFindVersion(runtime_vdsoInfo *info, runtime_vdsoVersionKey *ver)",
    "runtime.vdsoParseSymbols": "void __golang runtime_vdsoParseSymbols(runtime_vdsoInfo *info, int32 version)",
    "runtime.vdsoauxv": "void __golang runtime_vdsoauxv(uintptr tag, uintptr val)",
    "runtime_internal_atomic.storePointer": "void __golang runtime_internal_atomic_storePointer(void **ptr, void *new)",
    "runtime_internal_atomic.casPointer": "bool __golang runtime_internal_atomic_casPointer(void **ptr, void *old, void *new)",
    "sync_atomic.StorePointer": "void __golang sync_atomic_StorePointer(void **ptr, void *new)",
    "sync_atomic.SwapPointer": "void *__golang sync_atomic_SwapPointer(void **ptr, void *new)",
    "sync_atomic.CompareAndSwapPointer": "bool __golang sync_atomic_CompareAndSwapPointer(void **ptr, void *old, void *new)",
    "reflect.chansend0": "bool __golang reflect_chansend0(runtime_hchan *c, void *elem, bool nb)",
    "reflect.chanlen": "int __golang reflect_chanlen(runtime_hchan *c)",
    "internal_reflectlite.chanlen": "int __golang internal_reflectlite_chanlen(runtime_hchan *c)",
    "reflect.chancap": "int __golang reflect_chancap(runtime_hchan *c)",
    "reflect.chanclose": "void __golang reflect_chanclose(runtime_hchan *c)",
    "reflect.ifaceE2I": "void __golang reflect_ifaceE2I(internal_abi_InterfaceType *inter, runtime_eface e, runtime_iface *dst)",
    "internal_reflectlite.ifaceE2I": "void __golang internal_reflectlite_ifaceE2I(internal_abi_InterfaceType *inter, runtime_eface e, runtime_iface *dst)",
    "reflect.unsafe_New": "void *__golang reflect_unsafe_New(internal_abi_Type *typ)",
    "internal_reflectlite.unsafe_New": "void *__golang internal_reflectlite_unsafe_New(internal_abi_Type *typ)",
    "reflect.unsafe_NewArray": "void *__golang reflect_unsafe_NewArray(internal_abi_Type *typ, int n)",
    "reflect.makemap": "runtime_hmap *__golang reflect_makemap(internal_abi_MapType *t, int cap)",
    "reflect.mapaccess": "void *__golang reflect_mapaccess(internal_abi_MapType *t, runtime_hmap *h, void *key)",
    "reflect.mapaccess_faststr": "void *__golang reflect_mapaccess_faststr(internal_abi_MapType *t, runtime_hmap *h, string key)",
    "reflect.mapassign0": "void __golang reflect_mapassign0(internal_abi_MapType *t, runtime_hmap *h, void *key, void *elem)",
    "reflect.mapassign_faststr0": "void __golang reflect_mapassign_faststr0(internal_abi_MapType *t, runtime_hmap *h, string key, void *elem)",
    "reflect.mapdelete": "void __golang reflect_mapdelete(internal_abi_MapType *t, runtime_hmap *h, void *key)",
    "reflect.mapdelete_faststr": "void __golang reflect_mapdelete_faststr(internal_abi_MapType *t, runtime_hmap *h, string key)",
    "reflect.mapiterinit": "void __golang reflect_mapiterinit(internal_abi_MapType *t, runtime_hmap *h, runtime_hiter *it)",
    "reflect.mapiternext": "void __golang reflect_mapiternext(runtime_hiter *it)",
    "reflect.mapiterkey": "void *__golang reflect_mapiterkey(runtime_hiter *it)",
    "reflect.mapiterelem": "void *__golang reflect_mapiterelem(runtime_hiter *it)",
    "reflect.maplen": "int __golang reflect_maplen(runtime_hmap *h)",
    "reflect.mapclear": "void __golang reflect_mapclear(internal_abi_MapType *t, runtime_hmap *h)",
    "internal_reflectlite.maplen": "int __golang internal_reflectlite_maplen(runtime_hmap *h)",
    "maps.clone": "interface_ __golang maps_clone(interface_ m)",
    "reflect.typedmemmove": "void __golang reflect_typedmemmove(internal_abi_Type *typ, void *dst, void *src)",
    "internal_reflectlite.typedmemmove": "void __golang internal_reflectlite_typedmemmove(internal_abi_Type *typ, void *dst, void *src)",
    "reflect.typedslicecopy": "int __golang reflect_typedslicecopy(internal_abi_Type *elemType, runtime_slice dst, runtime_slice src)",
    "reflect.typedmemclr": "void __golang reflect_typedmemclr(internal_abi_Type *typ, void *ptr)",
    "reflect.typedmemclrpartial": "void __golang reflect_typedmemclrpartial(internal_abi_Type *typ, void *ptr, uintptr off, uintptr size)",
    "reflect.typedarrayclear": "void __golang reflect_typedarrayclear(internal_abi_Type *typ, void *ptr, int len)",
    "reflect.verifyNotInHeapPtr": "bool __golang reflect_verifyNotInHeapPtr(uintptr p)",
    "internal_godebug.registerMetric": "void __golang internal_godebug_registerMetric(string name, func_uint64 read)",
    "runtime_metrics.runtime_readMetrics": "void __golang runtime_metrics_runtime_readMetrics(void *samplesp, int len, int cap)",
    "sync.runtime_registerPoolCleanup": "void __golang sync_runtime_registerPoolCleanup(func f)",
    "sync.event": "void __golang sync_event(int64 cycles, int skip)",
    "internal_poll.runtime_pollServerInit": "void __golang internal_poll_runtime_pollServerInit()",
    "internal_poll.runtime_pollClose": "void __golang internal_poll_runtime_pollClose(runtime_pollDesc *pd)",
    "internal_poll.runtime_pollReset": "int __golang internal_poll_runtime_pollReset(runtime_pollDesc *pd, int mode)",
    "internal_poll.runtime_pollWait": "int __golang internal_poll_runtime_pollWait(runtime_pollDesc *pd, int mode)",
    "internal_poll.runtime_pollSetDeadline": "void __golang internal_poll_runtime_pollSetDeadline(runtime_pollDesc *pd, int64 d, int mode)",
    "internal_poll.runtime_pollUnblock": "void __golang internal_poll_runtime_pollUnblock(runtime_pollDesc *pd)",
    "sync.throw": "void __golang __noreturn sync_throw(string s)",
    "sync.fatal": "void __golang sync_fatal(string s)",
    "os.runtime_beforeExit": "void __golang os_runtime_beforeExit(int exitCode)",
    "runtime.entersyscall": "void __golang runtime_entersyscall()",
    "runtime.exitsyscall": "void __golang runtime_exitsyscall()",
    "syscall.runtime_BeforeFork": "void __golang syscall_runtime_BeforeFork()",
    "syscall.runtime_AfterFork": "void __golang syscall_runtime_AfterFork()",
    "syscall.runtime_AfterForkInChild": "void __golang syscall_runtime_AfterForkInChild()",
    "sync.runtime_procPin": "int __golang sync_runtime_procPin()",
    "sync.runtime_procUnpin": "void __golang sync_runtime_procUnpin()",
    "sync_atomic.runtime_procPin": "int __golang sync_atomic_runtime_procPin()",
    "sync_atomic.runtime_procUnpin": "void __golang sync_atomic_runtime_procUnpin()",
    "sync.runtime_canSpin": "bool __golang sync_runtime_canSpin(int i)",
    "sync.runtime_doSpin": "void __golang sync_runtime_doSpin()",
    "runtime.rand": "uint64 __golang runtime_rand()",
    "syscall.runtime_envs": "_slice_string __golang syscall_runtime_envs()",
    "syscall.Getpagesize": "int __golang syscall_Getpagesize()",
    "os.runtime_args": "_slice_string __golang os_runtime_args()",
    "syscall.Exit": "void __golang syscall_Exit(int code)",
    "internal_godebug.setUpdate": "void __golang internal_godebug_setUpdate(funcstring_comma_string update)",
    "internal_godebug.setNewIncNonDefault": "void __golang internal_godebug_setNewIncNonDefault(funcstring_func newIncNonDefault)",
    "syscall.runtimeSetenv": "void __golang syscall_runtimeSetenv(string key, string value)",
    "syscall.runtimeUnsetenv": "void __golang syscall_runtimeUnsetenv(string key)",
    "runtime_debug.SetTraceback": "void __golang runtime_debug_SetTraceback(string level)",
    "reflect.resolveNameOff": "void *__golang reflect_resolveNameOff(void *ptrInModule, int32 off)",
    "reflect.resolveTypeOff": "void *__golang reflect_resolveTypeOff(void *rtype, int32 off)",
    "reflect.resolveTextOff": "void *__golang reflect_resolveTextOff(void *rtype, int32 off)",
    "internal_reflectlite.resolveNameOff": "void *__golang internal_reflectlite_resolveNameOff(void *ptrInModule, int32 off)",
    "internal_reflectlite.resolveTypeOff": "void *__golang internal_reflectlite_resolveTypeOff(void *rtype, int32 off)",
    "reflect.addReflectOff": "int32 __golang reflect_addReflectOff(void *ptr)",
    "sync.runtime_Semacquire": "void __golang sync_runtime_Semacquire(uint32 *addr)",
    "internal_poll.runtime_Semacquire": "void __golang internal_poll_runtime_Semacquire(uint32 *addr)",
    "sync.runtime_Semrelease": "void __golang sync_runtime_Semrelease(uint32 *addr, bool handoff, int skipframes)",
    "sync.runtime_SemacquireMutex": "void __golang sync_runtime_SemacquireMutex(uint32 *addr, bool lifo, int skipframes)",
    "sync.runtime_SemacquireRWMutexR": "void __golang sync_runtime_SemacquireRWMutexR(uint32 *addr, bool lifo, int skipframes)",
    "sync.runtime_SemacquireRWMutex": "void __golang sync_runtime_SemacquireRWMutex(uint32 *addr, bool lifo, int skipframes)",
    "internal_poll.runtime_Semrelease": "void __golang internal_poll_runtime_Semrelease(uint32 *addr)",
    "sync.runtime_notifyListAdd": "uint32 __golang sync_runtime_notifyListAdd(runtime_notifyList *l)",
    "sync.runtime_notifyListWait": "void __golang sync_runtime_notifyListWait(runtime_notifyList *l, uint32 t)",
    "sync.runtime_notifyListNotifyAll": "void __golang sync_runtime_notifyListNotifyAll(runtime_notifyList *l)",
    "sync.runtime_notifyListNotifyOne": "void __golang sync_runtime_notifyListNotifyOne(runtime_notifyList *l)",
    "sync.runtime_notifyListCheck": "void __golang sync_runtime_notifyListCheck(uintptr sz)",
    "sync.runtime_nanotime": "int64 __golang sync_runtime_nanotime()",
    "os.sigpipe": "void __golang os_sigpipe()",
    "os_signal.signal_recv": "uint32 __golang os_signal_signal_recv()",
    "os_signal.signal_enable": "void __golang os_signal_signal_enable(uint32 s)",
    "reflect.growslice": "runtime_slice __golang reflect_growslice(internal_abi_Type *et, runtime_slice old, int num)",
    "internal_bytealg.MakeNoZero": "_slice_uint8 __golang internal_bytealg_MakeNoZero(int len)",
    "runtime.morestackc": "void __golang runtime_morestackc()",
    "runtime.gostring": "string __golang runtime_gostring(uint8 *p)",
    "reflect.memmove": "void __golang reflect_memmove(void *to, void *from, uintptr n)",
    "time.Sleep": "void __golang time_Sleep(int64 ns)",
    "time.startTimer": "void __golang time_startTimer(runtime_timer *t)",
    "time.stopTimer": "bool __golang time_stopTimer(runtime_timer *t)",
    "time.resetTimer": "bool __golang time_resetTimer(runtime_timer *t, int64 when)",
    "runtime.mapinitnoop": "void __golang runtime_mapinitnoop()",
    "runtime.rt0_go": "void __golang runtime_rt0_go()",
    "runtime.asminit": "void __golang runtime_asminit()",
    "runtime.mstart": "void __golang runtime_mstart()",
    "runtime.gogo": "void __golang runtime_gogo()",
    "runtime.mcall": "void __golang __noreturn runtime_mcall()",
    "runtime.systemstack_switch": "void __golang __noreturn runtime_systemstack_switch()",
    "runtime.systemstack": "void __golang runtime_systemstack()",
    "runtime.switchToCrashStack0": "void __golang __noreturn runtime_switchToCrashStack0()",
    "runtime.morestack": "void __golang runtime_morestack()",
    "runtime.morestack_noctxt": "void __golang runtime_morestack_noctxt()",
    "runtime.spillArgs": "void __golang runtime_spillArgs()",
    "runtime.unspillArgs": "void __golang runtime_unspillArgs()",
    "runtime.reflectcall_0": "void __golang runtime_reflectcall_0()",
    "runtime.call16": "void __golang runtime_call16()",
    "runtime.call32": "void __golang runtime_call32()",
    "runtime.call64": "void __golang runtime_call64()",
    "runtime.call128": "void __golang runtime_call128()",
    "runtime.call256": "void __golang runtime_call256()",
    "runtime.call512": "void __golang runtime_call512()",
    "runtime.call1024": "void __golang runtime_call1024()",
    "runtime.call2048": "void __golang runtime_call2048()",
    "runtime.call4096": "void __golang runtime_call4096()",
    "runtime.call8192": "void __golang runtime_call8192()",
    "runtime.call16384": "void __golang runtime_call16384()",
    "runtime.call32768": "void __golang runtime_call32768()",
    "runtime.call65536": "void __golang runtime_call65536()",
    "runtime.call131072": "void __golang runtime_call131072()",
    "runtime.call262144": "void __golang runtime_call262144()",
    "runtime.call524288": "void __golang runtime_call524288()",
    "runtime.call1048576": "void __golang runtime_call1048576()",
    "runtime.call2097152": "void __golang runtime_call2097152()",
    "runtime.call4194304": "void __golang runtime_call4194304()",
    "runtime.call8388608": "void __golang runtime_call8388608()",
    "runtime.call16777216": "void __golang runtime_call16777216()",
    "runtime.call33554432": "void __golang runtime_call33554432()",
    "runtime.call67108864": "void __golang runtime_call67108864()",
    "runtime.call134217728": "void __golang runtime_call134217728()",
    "runtime.call268435456": "void __golang runtime_call268435456()",
    "runtime.call536870912": "void __golang runtime_call536870912()",
    "runtime.call1073741824": "void __golang runtime_call1073741824()",
    "runtime.procyield": "void __golang runtime_procyield()",
    "runtime.publicationBarrier": "void __golang runtime_publicationBarrier()",
    "runtime.asmcgocall_landingpad": "void __golang runtime_asmcgocall_landingpad()",
    "runtime.asmcgocall_0": "void __golang runtime_asmcgocall_0()",
    "runtime.cgocallback": "void __golang runtime_cgocallback()",
    "runtime.setg": "void __golang runtime_setg()",
    "runtime.abort": "void __golang __noreturn runtime_abort()",
    "runtime.stackcheck": "void __golang runtime_stackcheck()",
    "runtime.cputicks": "void __golang runtime_cputicks()",
    "runtime.memhash": "void __golang runtime_memhash()",
    "runtime.strhash": "void __golang runtime_strhash()",
    "runtime.memhash32": "void __golang runtime_memhash32()",
    "runtime.memhash64": "void __golang runtime_memhash64()",
    "runtime.checkASM": "void __golang runtime_checkASM()",
    "runtime.return0": "void __golang runtime_return0()",
    "runtime.goexit": "void __golang __noreturn runtime_goexit()",
    "runtime.gcWriteBarrier1": "void __golang runtime_gcWriteBarrier1()",
    "runtime.gcWriteBarrier2": "void __golang runtime_gcWriteBarrier2()",
    "runtime.gcWriteBarrier3": "void __golang runtime_gcWriteBarrier3()",
    "runtime.gcWriteBarrier4": "void __golang runtime_gcWriteBarrier4()",
    "runtime.gcWriteBarrier5": "void __golang runtime_gcWriteBarrier5()",
    "runtime.gcWriteBarrier6": "void __golang runtime_gcWriteBarrier6()",
    "runtime.gcWriteBarrier7": "void __golang runtime_gcWriteBarrier7()",
    "runtime.gcWriteBarrier8": "void __golang runtime_gcWriteBarrier8()",
    "runtime.debugCallV2": "void __golang runtime_debugCallV2()",
    "runtime.debugCallPanicked": "void __golang runtime_debugCallPanicked()",
    "runtime.panicIndex": "void __golang __noreturn runtime_panicIndex()",
    "runtime.panicIndexU": "void __golang __noreturn runtime_panicIndexU()",
    "runtime.panicSliceAlen": "void __golang __noreturn runtime_panicSliceAlen()",
    "runtime.panicSliceAlenU": "void __golang __noreturn runtime_panicSliceAlenU()",
    "runtime.panicSliceAcap": "void __golang __noreturn runtime_panicSliceAcap()",
    "runtime.panicSliceAcapU": "void __golang __noreturn runtime_panicSliceAcapU()",
    "runtime.panicSliceB": "void __golang __noreturn runtime_panicSliceB()",
    "runtime.panicSliceBU": "void __golang __noreturn runtime_panicSliceBU()",
    "runtime.panicSlice3Alen": "void __golang __noreturn runtime_panicSlice3Alen()",
    "runtime.panicSlice3Acap": "void __golang __noreturn runtime_panicSlice3Acap()",
    "runtime.panicSlice3B": "void __golang __noreturn runtime_panicSlice3B()",
    "runtime.panicSlice3C": "void __golang __noreturn runtime_panicSlice3C()",
    "runtime.panicSliceConvert": "void __golang __noreturn runtime_panicSliceConvert()",
    "runtime.getfp": "void __golang runtime_getfp()",
    "runtime.duffzero": "void __golang runtime_duffzero()",
    "runtime.duffcopy": "void __golang runtime_duffcopy()",
    "runtime.memclrNoHeapPointers": "void __golang runtime_memclrNoHeapPointers()",
    "runtime.memmove": "void __golang runtime_memmove(void *dst, void *src, uintptr len)",
    "runtime.asyncPreempt": "void __golang runtime_asyncPreempt()",
    "runtime.sigprofNonGoWrapper": "void __golang runtime_sigprofNonGoWrapper()",
    "runtime.exit": "void __golang runtime_exit()",
    "runtime.exitThread": "void __golang __noreturn runtime_exitThread()",
    "runtime.open": "void __golang runtime_open()",
    "runtime.closefd": "void __golang runtime_closefd()",
    "runtime.write1": "void __golang runtime_write1()",
    "runtime.read": "void __golang runtime_read()",
    "runtime.pipe2": "void __golang runtime_pipe2()",
    "runtime.usleep": "void __golang runtime_usleep()",
    "runtime.gettid": "void __golang runtime_gettid()",
    "runtime.raise": "void __golang runtime_raise()",
    "runtime.raiseproc": "void __golang runtime_raiseproc()",
    "runtime.getpid": "void __golang runtime_getpid()",
    "runtime.tgkill": "void __golang runtime_tgkill()",
    "runtime.timer_create": "void __golang runtime_timer_create()",
    "runtime.timer_settime": "void __golang runtime_timer_settime()",
    "runtime.timer_delete": "void __golang runtime_timer_delete()",
    "runtime.mincore": "void __golang runtime_mincore()",
    "runtime.nanotime1": "void __golang runtime_nanotime1()",
    "runtime.rtsigprocmask": "void __golang runtime_rtsigprocmask()",
    "runtime.rt_sigaction": "void __golang runtime_rt_sigaction()",
    "runtime.sigfwd": "void __golang runtime_sigfwd()",
    "runtime.sigtramp": "void __golang runtime_sigtramp()",
    "runtime.cgoSigtramp": "void __golang runtime_cgoSigtramp()",
    "runtime.sigreturn__sigaction": "void __golang runtime_sigreturn__sigaction()",
    "runtime.sysMmap": "void __golang runtime_sysMmap()",
    "runtime.callCgoMmap": "void __golang runtime_callCgoMmap()",
    "runtime.sysMunmap": "void __golang runtime_sysMunmap()",
    "runtime.callCgoMunmap": "void __golang runtime_callCgoMunmap()",
    "runtime.madvise": "void __golang runtime_madvise()",
    "runtime.futex": "void __golang runtime_futex()",
    "runtime.clone": "void __golang runtime_clone()",
    "runtime.sigaltstack": "void __golang runtime_sigaltstack()",
    "runtime.settls": "void __golang runtime_settls()",
    "runtime.osyield_0": "void __golang runtime_osyield_0()",
    "runtime.sched_getaffinity": "void __golang runtime_sched_getaffinity()",
    "time.now": "void __golang time_now()",
    "runtime_internal_atomic._ptr_Pointer_runtime._defer_.CompareAndSwap": "bool __golang runtime_internal_atomic__ptr_Pointer_runtime__defer__CompareAndSwap(_ptr_atomic_Pointer_runtime__defer_, _ptr_runtime__defer, _ptr_runtime__defer)",
    "runtime_internal_atomic._ptr_Pointer_runtime._defer_.CompareAndSwapNoWB": "bool __golang runtime_internal_atomic__ptr_Pointer_runtime__defer__CompareAndSwapNoWB(_ptr_atomic_Pointer_runtime__defer_, _ptr_runtime__defer, _ptr_runtime__defer)",
    "runtime_internal_atomic._ptr_Pointer_runtime._defer_.Store": "void __golang runtime_internal_atomic__ptr_Pointer_runtime__defer__Store(_ptr_atomic_Pointer_runtime__defer_, _ptr_runtime__defer)",
    "runtime_internal_atomic._ptr_Pointer_runtime._defer_.StoreNoWB": "void __golang runtime_internal_atomic__ptr_Pointer_runtime__defer__StoreNoWB(_ptr_atomic_Pointer_runtime__defer_, _ptr_runtime__defer)",
    "runtime_internal_atomic._ptr_Pointer_runtime._defer_.Load": "_ptr_runtime__defer __golang runtime_internal_atomic__ptr_Pointer_runtime__defer__Load(_ptr_atomic_Pointer_runtime__defer_)",
    "runtime._ptr_lockRank.String": "string_0 __golang runtime__ptr_lockRank_String(_ptr_runtime_lockRank)",
    "runtime._ptr_waitReason.String": "string_0 __golang runtime__ptr_waitReason_String(_ptr_runtime_waitReason)",
    "runtime._ptr_errorString.Error": "string_0 __golang runtime__ptr_errorString_Error(_ptr_runtime_errorString)",
    "runtime._ptr_errorString.RuntimeError": "void __golang runtime__ptr_errorString_RuntimeError(_ptr_runtime_errorString)",
    "runtime._ptr_errorAddressString.Addr": "uintptr_0 __golang runtime__ptr_errorAddressString_Addr(_ptr_runtime_errorAddressString)",
    "runtime._ptr_errorAddressString.Error": "string_0 __golang runtime__ptr_errorAddressString_Error(_ptr_runtime_errorAddressString)",
    "runtime._ptr_errorAddressString.RuntimeError": "void __golang runtime__ptr_errorAddressString_RuntimeError(_ptr_runtime_errorAddressString)",
    "runtime._ptr_plainError.Error": "string_0 __golang runtime__ptr_plainError_Error(_ptr_runtime_plainError)",
    "runtime._ptr_plainError.RuntimeError": "void __golang runtime__ptr_plainError_RuntimeError(_ptr_runtime_plainError)",
    "runtime._ptr_boundsError.Error": "string_0 __golang runtime__ptr_boundsError_Error(_ptr_runtime_boundsError)",
    "runtime._ptr_boundsError.RuntimeError": "void __golang runtime__ptr_boundsError_RuntimeError(_ptr_runtime_boundsError)",
    "runtime.metricReader.compute_fm": "void __golang runtime_metricReader_compute_fm(runtime_statAggregate *_p0, runtime_metricValue *out)",
    "runtime._ptr_itabTableType.add_fm": "void __golang runtime__ptr_itabTableType_add_fm(runtime_itab *m)",
    "runtime.cgocallbackg_0": "void __golang runtime_cgocallbackg_0(void *fn, void *frame, uintptr ctxt)",
    "runtime.debugCallCheck_0": "string __golang runtime_debugCallCheck_0(uintptr pc)",
    "runtime.debugCallWrap_0": "void __golang runtime_debugCallWrap_0(uintptr dispatch)",
    "runtime.reflectcallmove_0": "void __golang runtime_reflectcallmove_0(internal_abi_Type *typ, void *dst, void *src, uintptr size, internal_abi_RegArgs *regs)",
    "runtime.wbBufFlush_0": "void __golang runtime_wbBufFlush_0()",
    "runtime.osinit_0": "void __golang runtime_osinit_0()",
    "runtime.osyield": "void __golang runtime_osyield()",
    "runtime.asyncPreempt2_0": "void __golang runtime_asyncPreempt2_0()",
    "runtime.badmcall_0": "void __golang __noreturn runtime_badmcall_0(func_ptr_runtime_g fn)",
    "runtime.badmcall2_0": "void __golang __noreturn runtime_badmcall2_0(func_ptr_runtime_g fn)",
    "runtime.badreflectcall_0": "void __golang __noreturn runtime_badreflectcall_0()",
    "runtime.badmorestackg0_0": "void __golang runtime_badmorestackg0_0()",
    "runtime.badmorestackgsignal_0": "void __golang runtime_badmorestackgsignal_0()",
    "runtime.schedinit_0": "void __golang runtime_schedinit_0()",
    "runtime.mstart0_0": "void __golang runtime_mstart0_0()",
    "runtime.dropm_0": "void __golang runtime_dropm_0()",
    "runtime.goexit1_0": "void __golang __noreturn runtime_goexit1_0()",
    "runtime.newproc_0": "void __golang runtime_newproc_0(runtime_funcval *fn)",
    "runtime.args_0": "void __golang runtime_args_0(int32 c, uint8 **v)",
    "runtime.check_0": "void __golang runtime_check_0()",
    "runtime.newstack_0": "void __golang runtime_newstack_0()",
    "runtime.morestackc_0": "void __golang runtime_morestackc_0()",
    "runtime.badsystemstack_0": "void __golang runtime_badsystemstack_0()",
    "runtime.reflectcall": "void __golang runtime_reflectcall(internal_abi_Type *stackArgsType, void *fn, void *stackArgs, uint32 stackArgsSize, uint32 stackRetOffset, uint32 frameSize, internal_abi_RegArgs *regArgs)",
    "runtime.asmcgocall": "int32 __golang runtime_asmcgocall(void *fn, void *arg)",
    "runtime.write_0": "int32 __golang runtime_write_0(uintptr fd, void *p, int32 n)",
    "sync_atomic._ptr_Bool.Load": "bool __golang sync_atomic__ptr_Bool_Load(_ptr_atomic_Bool)",
    "sync_atomic._ptr_Bool.Store": "void __golang sync_atomic__ptr_Bool_Store(_ptr_atomic_Bool, bool)",
    "sync_atomic._ptr_Bool.Swap": "bool __golang sync_atomic__ptr_Bool_Swap(_ptr_atomic_Bool, bool)",
    "sync_atomic._ptr_Bool.CompareAndSwap": "bool __golang sync_atomic__ptr_Bool_CompareAndSwap(_ptr_atomic_Bool, bool, bool)",
    "sync_atomic._ptr_Int32.Load": "int32_0 __golang sync_atomic__ptr_Int32_Load(_ptr_atomic_Int32)",
    "sync_atomic._ptr_Int32.Store": "void __golang sync_atomic__ptr_Int32_Store(_ptr_atomic_Int32, int32_0)",
    "sync_atomic._ptr_Int32.Swap": "int32_0 __golang sync_atomic__ptr_Int32_Swap(_ptr_atomic_Int32, int32_0)",
    "sync_atomic._ptr_Int32.CompareAndSwap": "bool __golang sync_atomic__ptr_Int32_CompareAndSwap(_ptr_atomic_Int32, int32_0, int32_0)",
    "sync_atomic._ptr_Int32.Add": "int32_0 __golang sync_atomic__ptr_Int32_Add(_ptr_atomic_Int32, int32_0)",
    "sync_atomic._ptr_Int64.Load": "int64_0 __golang sync_atomic__ptr_Int64_Load(_ptr_atomic_Int64)",
    "sync_atomic._ptr_Int64.Store": "void __golang sync_atomic__ptr_Int64_Store(_ptr_atomic_Int64, int64_0)",
    "sync_atomic._ptr_Int64.Swap": "int64_0 __golang sync_atomic__ptr_Int64_Swap(_ptr_atomic_Int64, int64_0)",
    "sync_atomic._ptr_Int64.CompareAndSwap": "bool __golang sync_atomic__ptr_Int64_CompareAndSwap(_ptr_atomic_Int64, int64_0, int64_0)",
    "sync_atomic._ptr_Int64.Add": "int64_0 __golang sync_atomic__ptr_Int64_Add(_ptr_atomic_Int64, int64_0)",
    "sync_atomic._ptr_Uint32.Load": "uint32_0 __golang sync_atomic__ptr_Uint32_Load(_ptr_atomic_Uint32)",
    "sync_atomic._ptr_Uint32.Store": "void __golang sync_atomic__ptr_Uint32_Store(_ptr_atomic_Uint32, uint32_0)",
    "sync_atomic._ptr_Uint32.Swap": "uint32_0 __golang sync_atomic__ptr_Uint32_Swap(_ptr_atomic_Uint32, uint32_0)",
    "sync_atomic._ptr_Uint32.CompareAndSwap": "bool __golang sync_atomic__ptr_Uint32_CompareAndSwap(_ptr_atomic_Uint32, uint32_0, uint32_0)",
    "sync_atomic._ptr_Uint32.Add": "uint32_0 __golang sync_atomic__ptr_Uint32_Add(_ptr_atomic_Uint32, uint32_0)",
    "sync_atomic._ptr_Uint64.Load": "uint64_0 __golang sync_atomic__ptr_Uint64_Load(_ptr_atomic_Uint64)",
    "sync_atomic._ptr_Uint64.Store": "void __golang sync_atomic__ptr_Uint64_Store(_ptr_atomic_Uint64, uint64_0)",
    "sync_atomic._ptr_Uint64.Swap": "uint64_0 __golang sync_atomic__ptr_Uint64_Swap(_ptr_atomic_Uint64, uint64_0)",
    "sync_atomic._ptr_Uint64.CompareAndSwap": "bool __golang sync_atomic__ptr_Uint64_CompareAndSwap(_ptr_atomic_Uint64, uint64_0, uint64_0)",
    "sync_atomic._ptr_Uint64.Add": "uint64_0 __golang sync_atomic__ptr_Uint64_Add(_ptr_atomic_Uint64, uint64_0)",
    "sync_atomic._ptr_noCopy.Lock": "void __golang sync_atomic__ptr_noCopy_Lock(_ptr_atomic_noCopy)",
    "sync_atomic._ptr_noCopy.Unlock": "void __golang sync_atomic__ptr_noCopy_Unlock(_ptr_atomic_noCopy)",
    "sync_atomic._ptr_Value.Load": "interface__0 __golang sync_atomic__ptr_Value_Load(_ptr_atomic_Value)",
    "sync_atomic._ptr_Value.Store": "void __golang sync_atomic__ptr_Value_Store(_ptr_atomic_Value, interface__0)",
    "sync_atomic._ptr_Value.Swap": "interface__0 __golang sync_atomic__ptr_Value_Swap(_ptr_atomic_Value, interface__0)",
    "sync_atomic._ptr_Value.CompareAndSwap": "bool __golang sync_atomic__ptr_Value_CompareAndSwap(_ptr_atomic_Value, interface__0, interface__0)",
    "sync_atomic.SwapUintptr": "uintptr __golang sync_atomic_SwapUintptr(uintptr *addr, uintptr new)",
    "sync_atomic.CompareAndSwapUintptr": "bool __golang sync_atomic_CompareAndSwapUintptr(uintptr *addr, uintptr old, uintptr new)",
    "sync_atomic.StoreUintptr": "void __golang sync_atomic_StoreUintptr(uintptr *addr, uintptr val)",
    "internal_reflectlite.Swapper": "funcint_comma_int __golang internal_reflectlite_Swapper(interface_ slice)",
    "internal_reflectlite.name.name": "string __golang internal_reflectlite_name_name(internal_reflectlite_name n)",
    "internal_reflectlite.pkgPath": "string __golang internal_reflectlite_pkgPath(internal_abi_Name n)",
    "internal_reflectlite.rtype.String": "string_0 __golang internal_reflectlite_rtype_String(reflectlite_rtype)",
    "internal_reflectlite.rtype.common": "_ptr_abi_Type __golang internal_reflectlite_rtype_common(reflectlite_rtype)",
    "internal_reflectlite.rtype.exportedMethods": "_slice_abi_Method __golang internal_reflectlite_rtype_exportedMethods(reflectlite_rtype)",
    "internal_reflectlite.rtype.PkgPath": "string_0 __golang internal_reflectlite_rtype_PkgPath(reflectlite_rtype)",
    "internal_reflectlite.rtype.Name": "string_0 __golang internal_reflectlite_rtype_Name(reflectlite_rtype)",
    "internal_reflectlite.elem": "internal_abi_Type *__golang internal_reflectlite_elem(internal_abi_Type *t)",
    "internal_reflectlite.rtype.Elem": "reflectlite_Type __golang internal_reflectlite_rtype_Elem(reflectlite_rtype)",
    "internal_reflectlite.rtype.In": "reflectlite_Type __golang internal_reflectlite_rtype_In(reflectlite_rtype, int_0)",
    "internal_reflectlite.rtype.Key": "reflectlite_Type __golang internal_reflectlite_rtype_Key(reflectlite_rtype)",
    "internal_reflectlite.rtype.Len": "int_0 __golang internal_reflectlite_rtype_Len(reflectlite_rtype)",
    "internal_reflectlite.rtype.NumField": "int_0 __golang internal_reflectlite_rtype_NumField(reflectlite_rtype)",
    "internal_reflectlite.rtype.NumIn": "int_0 __golang internal_reflectlite_rtype_NumIn(reflectlite_rtype)",
    "internal_reflectlite.rtype.NumOut": "int_0 __golang internal_reflectlite_rtype_NumOut(reflectlite_rtype)",
    "internal_reflectlite.rtype.Out": "reflectlite_Type __golang internal_reflectlite_rtype_Out(reflectlite_rtype, int_0)",
    "internal_reflectlite.rtype.Implements": "bool __golang internal_reflectlite_rtype_Implements(reflectlite_rtype, reflectlite_Type)",
    "internal_reflectlite.rtype.AssignableTo": "bool __golang internal_reflectlite_rtype_AssignableTo(reflectlite_rtype, reflectlite_Type)",
    "internal_reflectlite.rtype.Comparable": "bool __golang internal_reflectlite_rtype_Comparable(reflectlite_rtype)",
    "internal_reflectlite.implements": "bool __golang internal_reflectlite_implements(internal_abi_Type *T, internal_abi_Type *V)",
    "internal_reflectlite.directlyAssignable": "bool __golang internal_reflectlite_directlyAssignable(internal_abi_Type *T, internal_abi_Type *V)",
    "internal_reflectlite.haveIdenticalType": "bool __golang internal_reflectlite_haveIdenticalType(internal_abi_Type *T, internal_abi_Type *V, bool cmpTags)",
    "internal_reflectlite.haveIdenticalUnderlyingType": "bool __golang internal_reflectlite_haveIdenticalUnderlyingType(internal_abi_Type *T, internal_abi_Type *V, bool cmpTags)",
    "internal_reflectlite.packEface": "interface_ __golang internal_reflectlite_packEface(internal_reflectlite_Value v)",
    "internal_reflectlite._ptr_ValueError.Error": "string_0 __golang internal_reflectlite__ptr_ValueError_Error(_ptr_reflectlite_ValueError)",
    "internal_reflectlite.methodName": "string __golang internal_reflectlite_methodName()",
    "internal_reflectlite.flag.mustBeExported": "void __golang internal_reflectlite_flag_mustBeExported(unsigned __int64 f)",
    "internal_reflectlite.flag.mustBeAssignable": "void __golang internal_reflectlite_flag_mustBeAssignable(unsigned __int64 f)",
    "internal_reflectlite.Value.Elem": "internal_reflectlite_Value __golang internal_reflectlite_Value_Elem(internal_reflectlite_Value v)",
    "internal_reflectlite.valueInterface": "interface_ __golang internal_reflectlite_valueInterface(internal_reflectlite_Value v)",
    "internal_reflectlite.Value.Len": "int __golang internal_reflectlite_Value_Len(internal_reflectlite_Value v)",
    "internal_reflectlite.Value.numMethod": "int __golang internal_reflectlite_Value_numMethod(internal_reflectlite_Value v)",
    "internal_reflectlite.Value.Set": "void __golang internal_reflectlite_Value_Set(internal_reflectlite_Value v, internal_reflectlite_Value x)",
    "internal_reflectlite.Value.assignTo": "internal_reflectlite_Value __golang internal_reflectlite_Value_assignTo(internal_reflectlite_Value v, string context, internal_abi_Type *dst, void *target)",
    "internal_reflectlite.rtype.Align": "int_0 __golang internal_reflectlite_rtype_Align(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Align": "int_0 __golang internal_reflectlite__ptr_rtype_Align(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.ArrayType": "_ptr_abi_ArrayType __golang internal_reflectlite_rtype_ArrayType(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.ArrayType": "_ptr_abi_ArrayType __golang internal_reflectlite__ptr_rtype_ArrayType(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.AssignableTo": "bool __golang internal_reflectlite__ptr_rtype_AssignableTo(_ptr_reflectlite_rtype, reflectlite_Type)",
    "internal_reflectlite.rtype.ChanDir": "abi_ChanDir __golang internal_reflectlite_rtype_ChanDir(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.ChanDir": "abi_ChanDir __golang internal_reflectlite__ptr_rtype_ChanDir(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.Common": "_ptr_abi_Type __golang internal_reflectlite_rtype_Common(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Common": "_ptr_abi_Type __golang internal_reflectlite__ptr_rtype_Common(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Comparable": "bool __golang internal_reflectlite__ptr_rtype_Comparable(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Elem": "reflectlite_Type __golang internal_reflectlite__ptr_rtype_Elem(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.ExportedMethods": "_slice_abi_Method __golang internal_reflectlite_rtype_ExportedMethods(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.ExportedMethods": "_slice_abi_Method __golang internal_reflectlite__ptr_rtype_ExportedMethods(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.FieldAlign": "int_0 __golang internal_reflectlite_rtype_FieldAlign(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.FieldAlign": "int_0 __golang internal_reflectlite__ptr_rtype_FieldAlign(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.FuncType": "_ptr_abi_FuncType __golang internal_reflectlite_rtype_FuncType(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.FuncType": "_ptr_abi_FuncType __golang internal_reflectlite__ptr_rtype_FuncType(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.GcSlice": "_slice_uint8_0 __golang internal_reflectlite_rtype_GcSlice(reflectlite_rtype, uintptr_0, uintptr_0)",
    "internal_reflectlite._ptr_rtype.GcSlice": "_slice_uint8_0 __golang internal_reflectlite__ptr_rtype_GcSlice(_ptr_reflectlite_rtype, uintptr_0, uintptr_0)",
    "internal_reflectlite.rtype.HasName": "bool __golang internal_reflectlite_rtype_HasName(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.HasName": "bool __golang internal_reflectlite__ptr_rtype_HasName(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.IfaceIndir": "bool __golang internal_reflectlite_rtype_IfaceIndir(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.IfaceIndir": "bool __golang internal_reflectlite__ptr_rtype_IfaceIndir(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Implements": "bool __golang internal_reflectlite__ptr_rtype_Implements(_ptr_reflectlite_rtype, reflectlite_Type)",
    "internal_reflectlite._ptr_rtype.In": "reflectlite_Type __golang internal_reflectlite__ptr_rtype_In(_ptr_reflectlite_rtype, int_0)",
    "internal_reflectlite.rtype.InterfaceType": "_ptr_abi_InterfaceType __golang internal_reflectlite_rtype_InterfaceType(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.InterfaceType": "_ptr_abi_InterfaceType __golang internal_reflectlite__ptr_rtype_InterfaceType(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.IsDirectIface": "bool __golang internal_reflectlite_rtype_IsDirectIface(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.IsDirectIface": "bool __golang internal_reflectlite__ptr_rtype_IsDirectIface(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Key": "reflectlite_Type __golang internal_reflectlite__ptr_rtype_Key(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.Kind": "abi_Kind __golang internal_reflectlite_rtype_Kind(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Kind": "abi_Kind __golang internal_reflectlite__ptr_rtype_Kind(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Len": "int_0 __golang internal_reflectlite__ptr_rtype_Len(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.MapType": "_ptr_abi_MapType __golang internal_reflectlite_rtype_MapType(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.MapType": "_ptr_abi_MapType __golang internal_reflectlite__ptr_rtype_MapType(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Name": "string_0 __golang internal_reflectlite__ptr_rtype_Name(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.NumField": "int_0 __golang internal_reflectlite__ptr_rtype_NumField(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.NumIn": "int_0 __golang internal_reflectlite__ptr_rtype_NumIn(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.NumMethod": "int_0 __golang internal_reflectlite__ptr_rtype_NumMethod(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.NumOut": "int_0 __golang internal_reflectlite__ptr_rtype_NumOut(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Out": "reflectlite_Type __golang internal_reflectlite__ptr_rtype_Out(_ptr_reflectlite_rtype, int_0)",
    "internal_reflectlite._ptr_rtype.PkgPath": "string_0 __golang internal_reflectlite__ptr_rtype_PkgPath(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.Pointers": "bool __golang internal_reflectlite_rtype_Pointers(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Pointers": "bool __golang internal_reflectlite__ptr_rtype_Pointers(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.Size": "uintptr_0 __golang internal_reflectlite_rtype_Size(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Size": "uintptr_0 __golang internal_reflectlite__ptr_rtype_Size(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.String": "string_0 __golang internal_reflectlite__ptr_rtype_String(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.StructType": "_ptr_abi_StructType __golang internal_reflectlite_rtype_StructType(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.StructType": "_ptr_abi_StructType __golang internal_reflectlite__ptr_rtype_StructType(_ptr_reflectlite_rtype)",
    "internal_reflectlite.rtype.Uncommon": "_ptr_abi_UncommonType __golang internal_reflectlite_rtype_Uncommon(reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.Uncommon": "_ptr_abi_UncommonType __golang internal_reflectlite__ptr_rtype_Uncommon(_ptr_reflectlite_rtype)",
    "internal_reflectlite._ptr_rtype.common": "_ptr_abi_Type __golang internal_reflectlite__ptr_rtype_common(_ptr_reflectlite_rtype)",
    "errors.New": "error __golang errors_New(string text)",
    "errors._ptr_errorString.Error": "string_0 __golang errors__ptr_errorString_Error(_ptr_errors_errorString)",
    "errors._ptr_joinError.Error": "string_0 __golang errors__ptr_joinError_Error(_ptr_errors_joinError)",
    "errors._ptr_joinError.Unwrap": "_slice_error_0 __golang errors__ptr_joinError_Unwrap(_ptr_errors_joinError)",
    "errors.Is": "bool __golang errors_Is(error err, error target)",
    "errors.is": "bool __golang errors_is(error err, error target, bool targetComparable)",
    "errors.As": "bool __golang errors_As(error err, interface_ target)",
    "errors.as": "bool __golang errors_as(error err, interface_ target, internal_reflectlite_Value targetVal, internal_reflectlite_Type targetType)",
    "math_bits.OnesCount": "int __golang math_bits_OnesCount(uint x)",
    "math_bits.OnesCount16": "int __golang math_bits_OnesCount16(uint16 x)",
    "math_bits.OnesCount32": "int __golang math_bits_OnesCount32(uint32 x)",
    "math_bits.OnesCount64": "int __golang math_bits_OnesCount64(uint64 x)",
    "sort.Search": "int __golang sort_Search(int n, funcint_bool f)",
    "sort.IntSlice.Search": "int_0 __golang sort_IntSlice_Search(sort_IntSlice_0, int_0)",
    "sort.SliceStable": "void __golang sort_SliceStable(interface_ x, funcint_comma_int_bool less)",
    "sort.Sort": "void __golang sort_Sort(sort_Interface data)",
    "sort.reverse.Less": "bool __golang sort_reverse_Less(sort_reverse_0, int_0, int_0)",
    "sort.IntSlice.Len": "int_0 __golang sort_IntSlice_Len(sort_IntSlice_0)",
    "sort.IntSlice.Less": "bool __golang sort_IntSlice_Less(sort_IntSlice_0, int_0, int_0)",
    "sort.IntSlice.Sort": "void __golang sort_IntSlice_Sort(sort_IntSlice_0)",
    "sort.Stable": "void __golang sort_Stable(sort_Interface data)",
    "sort.intsImpl": "void __golang sort_intsImpl(_slice_int x)",
    "sort.float64sImpl": "void __golang sort_float64sImpl(_slice_float64 x)",
    "sort.stringsImpl": "void __golang sort_stringsImpl(_slice_string x)",
    "sort.insertionSort_func": "void __golang sort_insertionSort_func(sort_lessSwap data, int a, int b)",
    "sort.siftDown_func": "void __golang sort_siftDown_func(sort_lessSwap data, int lo, int hi, int first)",
    "sort.heapSort_func": "void __golang sort_heapSort_func(sort_lessSwap data, int a, int b)",
    "sort.pdqsort_func": "void __golang sort_pdqsort_func(sort_lessSwap data, int a, int b, int limit)",
    "sort.partitionEqual_func": "int __golang sort_partitionEqual_func(sort_lessSwap data, int a, int b, int pivot)",
    "sort.partialInsertionSort_func": "bool __golang sort_partialInsertionSort_func(sort_lessSwap data, int a, int b)",
    "sort.breakPatterns_func": "void __golang sort_breakPatterns_func(sort_lessSwap data, int a, int b)",
    "sort.median_func": "int __golang sort_median_func(sort_lessSwap data, int a, int b, int c, int *swaps)",
    "sort.reverseRange_func": "void __golang sort_reverseRange_func(sort_lessSwap data, int a, int b)",
    "sort.stable_func": "void __golang sort_stable_func(sort_lessSwap data, int n)",
    "sort.symMerge_func": "void __golang sort_symMerge_func(sort_lessSwap data, int a, int m, int b)",
    "sort.rotate_func": "void __golang sort_rotate_func(sort_lessSwap data, int a, int m, int b)",
    "sort.insertionSort": "void __golang sort_insertionSort(sort_Interface data, int a, int b)",
    "sort.siftDown": "void __golang sort_siftDown(sort_Interface data, int lo, int hi, int first)",
    "sort.heapSort": "void __golang sort_heapSort(sort_Interface data, int a, int b)",
    "sort.pdqsort": "void __golang sort_pdqsort(sort_Interface data, int a, int b, int limit)",
    "sort.partitionEqual": "int __golang sort_partitionEqual(sort_Interface data, int a, int b, int pivot)",
    "sort.partialInsertionSort": "bool __golang sort_partialInsertionSort(sort_Interface data, int a, int b)",
    "sort.breakPatterns": "void __golang sort_breakPatterns(sort_Interface data, int a, int b)",
    "sort.median": "int __golang sort_median(sort_Interface data, int a, int b, int c, int *swaps)",
    "sort.reverseRange": "void __golang sort_reverseRange(sort_Interface data, int a, int b)",
    "sort.stable": "void __golang sort_stable(sort_Interface data, int n)",
    "sort.symMerge": "void __golang sort_symMerge(sort_Interface data, int a, int m, int b)",
    "sort.rotate": "void __golang sort_rotate(sort_Interface data, int a, int m, int b)",
    "slices.pdqsortOrdered_go.shape.string_": "void __golang slices_pdqsortOrdered_go_shape_string_(slices_pdqsortOrdered_go_shape_string_::_param10 data, int a, int b, int limit)",
    "slices.partitionEqualOrdered_go.shape.string_": "int __golang slices_partitionEqualOrdered_go_shape_string_(slices_partitionEqualOrdered_go_shape_string_::_param1 data, int a, int b, int pivot)",
    "slices.partialInsertionSortOrdered_go.shape.string_": "bool __golang slices_partialInsertionSortOrdered_go_shape_string_(slices_partialInsertionSortOrdered_go_shape_string_::_param1 data, int a, int b)",
    "slices.medianOrdered_go.shape.string_": "int __golang slices_medianOrdered_go_shape_string_(slices_medianOrdered_go_shape_string_::_param1 data, int a, int b, int c, int *swaps)",
    "slices.breakPatternsOrdered_go.shape.string_": "void __golang slices_breakPatternsOrdered_go_shape_string_(slices_breakPatternsOrdered_go_shape_string_::_param0 data, int a, int b)",
    "slices.heapSortOrdered_go.shape.string_": "void __golang slices_heapSortOrdered_go_shape_string_(slices_heapSortOrdered_go_shape_string_::_param1 data, int a, int b)",
    "slices.siftDownOrdered_go.shape.string_": "void __golang slices_siftDownOrdered_go_shape_string_(slices_siftDownOrdered_go_shape_string_::_param1 data, int lo, int hi, int first)",
    "slices.insertionSortOrdered_go.shape.string_": "void __golang slices_insertionSortOrdered_go_shape_string_(slices_insertionSortOrdered_go_shape_string_::_param1 data, int a, int b)",
    "slices.pdqsortOrdered_go.shape.float64_": "void __golang slices_pdqsortOrdered_go_shape_float64_(slices_pdqsortOrdered_go_shape_float64_::_param10 data, int a, int b, int limit)",
    "slices.partialInsertionSortOrdered_go.shape.float64_": "bool __golang slices_partialInsertionSortOrdered_go_shape_float64_(slices_partialInsertionSortOrdered_go_shape_float64_::_param1 data, int a, int b)",
    "slices.medianOrdered_go.shape.float64_": "int __golang slices_medianOrdered_go_shape_float64_(slices_medianOrdered_go_shape_float64_::_param1 data, int a, int b, int c, int *swaps)",
    "slices.heapSortOrdered_go.shape.float64_": "void __golang slices_heapSortOrdered_go_shape_float64_(slices_heapSortOrdered_go_shape_float64_::_param1 data, int a, int b)",
    "slices.siftDownOrdered_go.shape.float64_": "void __golang slices_siftDownOrdered_go_shape_float64_(slices_siftDownOrdered_go_shape_float64_::_param1 data, int lo, int hi, int first)",
    "slices.pdqsortOrdered_go.shape.int_": "void __golang slices_pdqsortOrdered_go_shape_int_(slices_pdqsortOrdered_go_shape_int_::_param10 data, int a, int b, int limit)",
    "slices.partialInsertionSortOrdered_go.shape.int_": "bool __golang slices_partialInsertionSortOrdered_go_shape_int_(slices_partialInsertionSortOrdered_go_shape_int_::_param1 data, int a, int b)",
    "slices.medianOrdered_go.shape.int_": "int __golang slices_medianOrdered_go_shape_int_(slices_medianOrdered_go_shape_int_::_param1 data, int a, int b, int c, int *swaps)",
    "slices.heapSortOrdered_go.shape.int_": "void __golang slices_heapSortOrdered_go_shape_int_(slices_heapSortOrdered_go_shape_int_::_param1 data, int a, int b)",
    "slices.siftDownOrdered_go.shape.int_": "void __golang slices_siftDownOrdered_go_shape_int_(slices_siftDownOrdered_go_shape_int_::_param1 data, int lo, int hi, int first)",
    "sort._ptr_IntSlice.Len": "int_0 __golang sort__ptr_IntSlice_Len(_ptr_sort_IntSlice)",
    "sort._ptr_IntSlice.Less": "bool __golang sort__ptr_IntSlice_Less(_ptr_sort_IntSlice, int_0, int_0)",
    "sort._ptr_IntSlice.Search": "int_0 __golang sort__ptr_IntSlice_Search(_ptr_sort_IntSlice, int_0)",
    "sort._ptr_IntSlice.Sort": "void __golang sort__ptr_IntSlice_Sort(_ptr_sort_IntSlice)",
    "sort._ptr_IntSlice.Swap": "void __golang sort__ptr_IntSlice_Swap(_ptr_sort_IntSlice, int_0, int_0)",
    "sort.reverse.Len": "int_0 __golang sort_reverse_Len(sort_reverse_0)",
    "sort._ptr_reverse.Len": "int_0 __golang sort__ptr_reverse_Len(_ptr_sort_reverse)",
    "sort._ptr_reverse.Less": "bool __golang sort__ptr_reverse_Less(_ptr_sort_reverse, int_0, int_0)",
    "sort.reverse.Swap": "void __golang sort_reverse_Swap(sort_reverse_0, int_0, int_0)",
    "sort._ptr_reverse.Swap": "void __golang sort__ptr_reverse_Swap(_ptr_sort_reverse, int_0, int_0)",
    "math.acosh": "float64 __golang math_acosh(float64 x)",
    "math.asin": "float64 __golang math_asin(float64 x)",
    "math.asinh": "float64 __golang math_asinh(float64 x)",
    "math.satan": "float64 __golang math_satan(float64 x)",
    "math.atan": "float64 __golang math_atan(float64 x)",
    "math.atan2": "float64 __golang math_atan2(float64 y, float64 x)",
    "math.atanh": "float64 __golang math_atanh(float64 x)",
    "math.cbrt": "float64 __golang math_cbrt(float64 x)",
    "math.exp2": "float64 __golang math_exp2(float64 x)",
    "math.expmulti": "float64 __golang math_expmulti(float64 hi, float64 lo, int k)",
    "math.expm1": "float64 __golang math_expm1(float64 x)",
    "math.Floor": "float64 __golang math_Floor(float64 x)",
    "math.Ceil": "float64 __golang math_Ceil(float64 x)",
    "math.Trunc": "float64 __golang math_Trunc(float64 x)",
    "math.RoundToEven": "float64 __golang math_RoundToEven(float64 x)",
    "math.ldexp": "float64 __golang math_ldexp(float64 frac, int exp)",
    "math.log2": "float64 __golang math_log2(float64 x)",
    "math.log1p": "float64 __golang math_log1p(float64 x)",
    "math.mod": "float64 __golang math_mod(float64 x, float64 y)",
    "math.isOddInt": "bool __golang math_isOddInt(float64 x)",
    "math.pow": "float64 __golang math_pow(float64 x, float64 y)",
    "math.remainder": "float64 __golang math_remainder(float64 x, float64 y)",
    "math.cos": "float64 __golang math_cos(float64 x)",
    "math.sin": "float64 __golang math_sin(float64 x)",
    "math.sinh": "float64 __golang math_sinh(float64 x)",
    "math.cosh": "float64 __golang math_cosh(float64 x)",
    "math.tan": "float64 __golang math_tan(float64 x)",
    "math.tanh": "float64 __golang math_tanh(float64 x)",
    "math.archFloor": "void __golang math_archFloor()",
    "math.archCeil": "void __golang math_archCeil()",
    "math.archTrunc": "void __golang math_archTrunc()",
    "math.archHypot": "void __golang math_archHypot()",
    "math.archLog": "void __golang math_archLog()",
    "unicode_utf8.EncodeRune": "int __golang unicode_utf8_EncodeRune(_slice_uint8 p, int32 r)",
    "unicode_utf8.RuneCount": "int __golang unicode_utf8_RuneCount(_slice_uint8 p)",
    "unicode_utf8.Valid": "bool __golang unicode_utf8_Valid(_slice_uint8 p)",
    "strconv._ptr_NumError.Error": "string_0 __golang strconv__ptr_NumError_Error(_ptr_strconv_NumError)",
    "strconv._ptr_NumError.Unwrap": "error_0 __golang strconv__ptr_NumError_Unwrap(_ptr_strconv_NumError)",
    "strconv.baseError": "strconv_NumError *__golang strconv_baseError(string fn, string str, int base)",
    "strconv.bitSizeError": "strconv_NumError *__golang strconv_bitSizeError(string fn, string str, int bitSize)",
    "strconv.underscoreOK": "bool __golang strconv_underscoreOK(string s)",
    "strconv._ptr_decimal.Assign": "void __golang strconv__ptr_decimal_Assign(strconv_decimal *a, uint64 v)",
    "strconv.leftShift": "void __golang strconv_leftShift(strconv_decimal *a, uint k)",
    "strconv._ptr_decimal.Round": "void __golang strconv__ptr_decimal_Round(strconv_decimal *a, int nd)",
    "strconv.genericFtoa": "_slice_uint8 __golang strconv_genericFtoa(_slice_uint8 dst, float64 val, uint8 fmt, int prec, int bitSize)",
    "strconv.bigFtoa": "_slice_uint8 __golang strconv_bigFtoa(_slice_uint8 dst, int prec, uint8 fmt, bool neg, uint64 mant, int exp, strconv_floatInfo *flt)",
    "strconv.formatDigits": "void __golang strconv_formatDigits(_slice_uint8 dst, strconv_decimalSlice digs, bool shortest, int prec, uint8 fmt, _slice_uint8 _r0, bool neg)",
    "strconv.roundShortest": "void __golang strconv_roundShortest(strconv_decimal *d, uint64 mant, int exp, strconv_floatInfo *flt)",
    "strconv.fmtE": "void __golang strconv_fmtE(_slice_uint8 dst, int prec, uint8 fmt, bool neg, _slice_uint8 _r0, strconv_decimalSlice d)",
    "strconv.fmtF": "void __golang strconv_fmtF(_slice_uint8 dst, int prec, _slice_uint8 _r0, bool neg, strconv_decimalSlice d)",
    "strconv.fmtB": "_slice_uint8 __golang strconv_fmtB(_slice_uint8 dst, bool neg, uint64 mant, int exp, strconv_floatInfo *flt)",
    "strconv.fmtX": "_slice_uint8 __golang strconv_fmtX(_slice_uint8 dst, int prec, uint8 fmt, bool neg, uint64 mant, int exp, strconv_floatInfo *flt)",
    "strconv.ryuFtoaFixed32": "void __golang strconv_ryuFtoaFixed32(strconv_decimalSlice *d, uint32 mant, int exp, int prec)",
    "strconv.ryuFtoaFixed64": "void __golang strconv_ryuFtoaFixed64(strconv_decimalSlice *d, uint64 mant, int exp, int prec)",
    "strconv.formatDecimal": "void __golang strconv_formatDecimal(strconv_decimalSlice *d, uint64 m, bool trunc, bool roundUp, int prec)",
    "strconv.ryuDigits": "void __golang strconv_ryuDigits(strconv_decimalSlice *d, uint64 lower, uint64 central, uint64 upper, bool c0, bool cup)",
    "strconv.ryuDigits32": "void __golang strconv_ryuDigits32(strconv_decimalSlice *d, uint32 lower, uint32 central, uint32 upper, bool c0, bool cup, int endindex)",
    "strconv.FormatUint": "string __golang strconv_FormatUint(uint64 i, int base)",
    "strconv.FormatInt": "string __golang strconv_FormatInt(int64 i, int base)",
    "strconv.Itoa": "string __golang strconv_Itoa(int i)",
    "strconv.AppendInt": "_slice_uint8 __golang strconv_AppendInt(_slice_uint8 dst, int64 i, int base)",
    "strconv.AppendUint": "_slice_uint8 __golang strconv_AppendUint(_slice_uint8 dst, uint64 i, int base)",
    "strconv.appendQuotedWith": "_slice_uint8 __golang strconv_appendQuotedWith(_slice_uint8 buf, string s, uint8 quote, bool ASCIIonly, bool graphicOnly)",
    "strconv.appendQuotedRuneWith": "_slice_uint8 __golang strconv_appendQuotedRuneWith(_slice_uint8 buf, int32 r, uint8 quote, bool ASCIIonly, bool graphicOnly)",
    "strconv.appendEscapedRune": "_slice_uint8 __golang strconv_appendEscapedRune(_slice_uint8 buf, int32 r, uint8 quote, bool ASCIIonly, bool graphicOnly)",
    "strconv.CanBackquote": "bool __golang strconv_CanBackquote(string s)",
    "strconv.IsPrint": "bool __golang strconv_IsPrint(int32 r)",
    "sync._ptr_Cond.Wait": "void __golang sync__ptr_Cond_Wait(_ptr_sync_Cond)",
    "sync._ptr_Cond.Signal": "void __golang sync__ptr_Cond_Signal(_ptr_sync_Cond)",
    "sync._ptr_Cond.Broadcast": "void __golang sync__ptr_Cond_Broadcast(_ptr_sync_Cond)",
    "sync._ptr_noCopy.Lock": "void __golang sync__ptr_noCopy_Lock(_ptr_sync_noCopy)",
    "sync._ptr_noCopy.Unlock": "void __golang sync__ptr_noCopy_Unlock(_ptr_sync_noCopy)",
    "sync._ptr_Map.Delete": "void __golang sync__ptr_Map_Delete(_ptr_sync_Map, interface__0)",
    "sync._ptr_Map.Range": "void __golang sync__ptr_Map_Range(sync_Map *m, funcinterface__comma_interface__bool f)",
    "sync._ptr_Map.missLocked": "void __golang sync__ptr_Map_missLocked(_ptr_sync_Map)",
    "sync._ptr_Map.dirtyLocked": "void __golang sync__ptr_Map_dirtyLocked(_ptr_sync_Map)",
    "sync._ptr_entry.tryExpungeLocked": "bool __golang sync__ptr_entry_tryExpungeLocked(_ptr_sync_entry)",
    "sync._ptr_Mutex.Lock": "void __golang sync__ptr_Mutex_Lock(_ptr_sync_Mutex)",
    "sync._ptr_Mutex.TryLock": "bool __golang sync__ptr_Mutex_TryLock(_ptr_sync_Mutex)",
    "sync._ptr_Mutex.lockSlow": "void __golang sync__ptr_Mutex_lockSlow(_ptr_sync_Mutex)",
    "sync._ptr_Mutex.Unlock": "void __golang sync__ptr_Mutex_Unlock(_ptr_sync_Mutex)",
    "sync._ptr_Mutex.unlockSlow": "void __golang sync__ptr_Mutex_unlockSlow(_ptr_sync_Mutex, int32_0)",
    "sync._ptr_Once.Do": "void __golang sync__ptr_Once_Do(_ptr_sync_Once, PTR_func_0)",
    "sync._ptr_Once.doSlow": "void __golang sync__ptr_Once_doSlow(_ptr_sync_Once, PTR_func_0)",
    "sync._ptr_Once.doSlow.deferwrap2": "void __golang sync__ptr_Once_doSlow_deferwrap2()",
    "sync._ptr_Once.doSlow.deferwrap1": "void __golang sync__ptr_Once_doSlow_deferwrap1()",
    "sync._ptr_Pool.Put": "void __golang sync__ptr_Pool_Put(_ptr_sync_Pool, interface__0)",
    "sync._ptr_Pool.Get": "interface__0 __golang sync__ptr_Pool_Get(_ptr_sync_Pool)",
    "sync._ptr_Pool.getSlow": "interface_ __golang sync__ptr_Pool_getSlow(sync_Pool *p, int pid)",
    "sync._ptr_Pool.pinSlow.deferwrap1": "void __golang sync__ptr_Pool_pinSlow_deferwrap1()",
    "sync.poolCleanup": "void __golang sync_poolCleanup()",
    "sync._ptr_poolDequeue.pushHead": "bool __golang sync__ptr_poolDequeue_pushHead(_ptr_sync_poolDequeue, interface__0)",
    "sync._ptr_poolChain.pushHead": "void __golang sync__ptr_poolChain_pushHead(_ptr_sync_poolChain, interface__0)",
    "sync._ptr_RWMutex.RLock": "void __golang sync__ptr_RWMutex_RLock(_ptr_sync_RWMutex)",
    "sync._ptr_RWMutex.TryRLock": "bool __golang sync__ptr_RWMutex_TryRLock(_ptr_sync_RWMutex)",
    "sync._ptr_RWMutex.RUnlock": "void __golang sync__ptr_RWMutex_RUnlock(_ptr_sync_RWMutex)",
    "sync._ptr_RWMutex.rUnlockSlow": "void __golang sync__ptr_RWMutex_rUnlockSlow(_ptr_sync_RWMutex, int32_0)",
    "sync._ptr_RWMutex.Lock": "void __golang sync__ptr_RWMutex_Lock(_ptr_sync_RWMutex)",
    "sync._ptr_RWMutex.TryLock": "bool __golang sync__ptr_RWMutex_TryLock(_ptr_sync_RWMutex)",
    "sync._ptr_RWMutex.Unlock": "void __golang sync__ptr_RWMutex_Unlock(_ptr_sync_RWMutex)",
    "sync._ptr_RWMutex.RLocker": "sync_Locker_0 __golang sync__ptr_RWMutex_RLocker(_ptr_sync_RWMutex)",
    "sync._ptr_rlocker.Lock": "void __golang sync__ptr_rlocker_Lock(_ptr_sync_rlocker)",
    "sync._ptr_rlocker.Unlock": "void __golang sync__ptr_rlocker_Unlock(_ptr_sync_rlocker)",
    "sync._ptr_WaitGroup.Add": "void __golang sync__ptr_WaitGroup_Add(_ptr_sync_WaitGroup, int_0)",
    "sync._ptr_WaitGroup.Done": "void __golang sync__ptr_WaitGroup_Done(_ptr_sync_WaitGroup)",
    "sync._ptr_WaitGroup.Wait": "void __golang sync__ptr_WaitGroup_Wait(_ptr_sync_WaitGroup)",
    "syscall.hasWaitingReaders": "bool __golang syscall_hasWaitingReaders(sync_RWMutex *rw)",
    "unicode.IsGraphic": "bool __golang unicode_IsGraphic(int32 r)",
    "unicode.IsPrint": "bool __golang unicode_IsPrint(int32 r)",
    "unicode.IsLetter": "bool __golang unicode_IsLetter(int32 r)",
    "unicode.IsNumber": "bool __golang unicode_IsNumber(int32 r)",
    "unicode.IsPunct": "bool __golang unicode_IsPunct(int32 r)",
    "unicode.IsSpace": "bool __golang unicode_IsSpace(int32 r)",
    "unicode.is16": "bool __golang unicode_is16(_slice_unicode_Range16 ranges, uint16 r)",
    "unicode.Is": "bool __golang unicode_Is(unicode_RangeTable *rangeTab, int32 r)",
    "unicode.isExcludingLatin": "bool __golang unicode_isExcludingLatin(unicode_RangeTable *rangeTab, int32 r)",
    "unicode.ToLower": "int32 __golang unicode_ToLower(int32 r)",
    "unicode.ToTitle": "int32 __golang unicode_ToTitle(int32 r)",
    "unicode.SpecialCase.ToUpper": "int32 __golang unicode_SpecialCase_ToUpper(unicode_SpecialCase special, int32 r)",
    "unicode.SpecialCase.ToTitle": "int32 __golang unicode_SpecialCase_ToTitle(unicode_SpecialCase special, int32 r)",
    "unicode.SpecialCase.ToLower": "int32 __golang unicode_SpecialCase_ToLower(unicode_SpecialCase special, int32 r)",
    "unicode.SimpleFold": "int32 __golang unicode_SimpleFold(int32 r)",
    "internal_itoa.Itoa": "string __golang internal_itoa_Itoa(int val)",
    "reflect._ptr_abiSeq.addArg": "reflect_abiStep *__golang reflect__ptr_abiSeq_addArg(reflect_abiSeq *a, internal_abi_Type *t)",
    "reflect._ptr_abiSeq.regAssign": "bool __golang reflect__ptr_abiSeq_regAssign(reflect_abiSeq *a, internal_abi_Type *t, uintptr offset)",
    "reflect._ptr_abiSeq.assignIntN": "bool __golang reflect__ptr_abiSeq_assignIntN(reflect_abiSeq *a, uintptr offset, uintptr size, int n, uint8 ptrMap)",
    "reflect.newAbiDesc": "reflect_abiDesc __golang reflect_newAbiDesc(internal_abi_FuncType *t, internal_abi_Type *rcvr)",
    "reflect.intFromReg": "void __golang reflect_intFromReg(internal_abi_RegArgs *r, int reg, uintptr argSize, void *to)",
    "reflect.intToReg": "void __golang reflect_intToReg(internal_abi_RegArgs *r, int reg, uintptr argSize, void *from)",
    "reflect.deepValueEqual": "bool __golang reflect_deepValueEqual(reflect_Value v1, reflect_Value v2, map_reflect_visit_bool visited)",
    "reflect.DeepEqual": "bool __golang reflect_DeepEqual(interface_ x, interface_ y)",
    "reflect.MakeFunc": "reflect_Value __golang reflect_MakeFunc(reflect_Type typ, func_slice_reflect_Value__slice_reflect_Value fn)",
    "reflect.makeMethodValue": "reflect_Value __golang reflect_makeMethodValue(string op, reflect_Value v)",
    "reflect.moveMakeFuncArgPtrs": "void __golang reflect_moveMakeFuncArgPtrs(reflect_makeFuncCtxt *ctxt, internal_abi_RegArgs *args)",
    "reflect.pkgPath": "string __golang reflect_pkgPath(internal_abi_Name n)",
    "reflect.Method.IsExported": "bool __golang reflect_Method_IsExported(reflect_Method_0)",
    "reflect.Kind.String": "string_0 __golang reflect_Kind_String(reflect_Kind)",
    "reflect._ptr_rtype.String": "string_0 __golang reflect__ptr_rtype_String(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Size": "uintptr_0 __golang reflect__ptr_rtype_Size(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Bits": "int_0 __golang reflect__ptr_rtype_Bits(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Align": "int_0 __golang reflect__ptr_rtype_Align(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.FieldAlign": "int_0 __golang reflect__ptr_rtype_FieldAlign(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Kind": "reflect_Kind __golang reflect__ptr_rtype_Kind(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.exportedMethods": "_slice_abi_Method __golang reflect__ptr_rtype_exportedMethods(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Method": "reflect_Method_0 __golang reflect__ptr_rtype_Method(_ptr_reflect_rtype, int_0)",
    "reflect._ptr_rtype.PkgPath": "string_0 __golang reflect__ptr_rtype_PkgPath(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Name": "string_0 __golang reflect__ptr_rtype_Name(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.ChanDir": "reflect_ChanDir __golang reflect__ptr_rtype_ChanDir(_ptr_reflect_rtype)",
    "reflect.elem": "internal_abi_Type *__golang reflect_elem(internal_abi_Type *t)",
    "reflect._ptr_rtype.Elem": "reflect_Type_0 __golang reflect__ptr_rtype_Elem(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Field": "reflect_StructField_0 __golang reflect__ptr_rtype_Field(_ptr_reflect_rtype, int_0)",
    "reflect._ptr_rtype.FieldByIndex": "reflect_StructField_0 __golang reflect__ptr_rtype_FieldByIndex(_ptr_reflect_rtype, _slice_int_0)",
    "reflect._ptr_rtype.Key": "reflect_Type_0 __golang reflect__ptr_rtype_Key(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Len": "int_0 __golang reflect__ptr_rtype_Len(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.NumField": "int_0 __golang reflect__ptr_rtype_NumField(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.In": "reflect_Type_0 __golang reflect__ptr_rtype_In(_ptr_reflect_rtype, int_0)",
    "reflect._ptr_rtype.NumIn": "int_0 __golang reflect__ptr_rtype_NumIn(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.NumOut": "int_0 __golang reflect__ptr_rtype_NumOut(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Out": "reflect_Type_0 __golang reflect__ptr_rtype_Out(_ptr_reflect_rtype, int_0)",
    "reflect._ptr_rtype.IsVariadic": "bool __golang reflect__ptr_rtype_IsVariadic(_ptr_reflect_rtype)",
    "reflect.ChanDir.String": "string_0 __golang reflect_ChanDir_String(reflect_ChanDir)",
    "reflect._ptr_interfaceType.Method": "void __golang reflect__ptr_interfaceType_Method(reflect_interfaceType *t, reflect_Method m, int i)",
    "reflect._ptr_interfaceType.MethodByName": "void __golang reflect__ptr_interfaceType_MethodByName(reflect_interfaceType *t, reflect_Method m, bool ok, string name)",
    "reflect.StructField.IsExported": "bool __golang reflect_StructField_IsExported(reflect_StructField_0)",
    "reflect.StructTag.Get": "string_0 __golang reflect_StructTag_Get(reflect_StructTag_0, string_0)",
    "reflect._ptr_structType.Field": "reflect_StructField_0 __golang reflect__ptr_structType_Field(_ptr_reflect_structType, int_0)",
    "reflect._ptr_structType.FieldByIndex": "reflect_StructField_0 __golang reflect__ptr_structType_FieldByIndex(_ptr_reflect_structType, _slice_int_0)",
    "reflect._ptr_rtype.ptrTo": "_ptr_abi_Type __golang reflect__ptr_rtype_ptrTo(_ptr_reflect_rtype)",
    "reflect._ptr_rtype.Implements": "bool __golang reflect__ptr_rtype_Implements(_ptr_reflect_rtype, reflect_Type_0)",
    "reflect._ptr_rtype.AssignableTo": "bool __golang reflect__ptr_rtype_AssignableTo(_ptr_reflect_rtype, reflect_Type_0)",
    "reflect._ptr_rtype.ConvertibleTo": "bool __golang reflect__ptr_rtype_ConvertibleTo(_ptr_reflect_rtype, reflect_Type_0)",
    "reflect._ptr_rtype.Comparable": "bool __golang reflect__ptr_rtype_Comparable(_ptr_reflect_rtype)",
    "reflect.implements": "bool __golang reflect_implements(internal_abi_Type *T, internal_abi_Type *V)",
    "reflect.specialChannelAssignability": "bool __golang reflect_specialChannelAssignability(internal_abi_Type *T, internal_abi_Type *V)",
    "reflect.directlyAssignable": "bool __golang reflect_directlyAssignable(internal_abi_Type *T, internal_abi_Type *V)",
    "reflect.haveIdenticalType": "bool __golang reflect_haveIdenticalType(internal_abi_Type *T, internal_abi_Type *V, bool cmpTags)",
    "reflect.haveIdenticalUnderlyingType": "bool __golang reflect_haveIdenticalUnderlyingType(internal_abi_Type *T, internal_abi_Type *V, bool cmpTags)",
    "reflect.typesByString": "_slice__ptr_internal_abi_Type __golang reflect_typesByString(string s)",
    "reflect.initFuncTypes.deferwrap1": "void __golang reflect_initFuncTypes_deferwrap1()",
    "reflect.FuncOf.deferwrap1": "void __golang reflect_FuncOf_deferwrap1()",
    "reflect.funcStr": "string __golang reflect_funcStr(internal_abi_FuncType *ft)",
    "reflect.emitGCMask": "void __golang reflect_emitGCMask(_slice_uint8 out, uintptr base, internal_abi_Type *typ, uintptr n)",
    "reflect.appendGCProg": "_slice_uint8 __golang reflect_appendGCProg(_slice_uint8 dst, internal_abi_Type *typ)",
    "reflect.SliceOf": "reflect_Type __golang reflect_SliceOf(reflect_Type t)",
    "reflect.isLetter": "bool __golang reflect_isLetter(int32 ch_0)",
    "reflect.isValidFieldName": "bool __golang reflect_isValidFieldName(string fieldName)",
    "reflect.StructOf.deferwrap1": "void __golang reflect_StructOf_deferwrap1()",
    "reflect.embeddedIfaceMethStub": "void __golang __noreturn reflect_embeddedIfaceMethStub()",
    "reflect.typeptrdata": "uintptr __golang reflect_typeptrdata(internal_abi_Type *t)",
    "reflect.ArrayOf": "reflect_Type __golang reflect_ArrayOf(int length, reflect_Type elem)",
    "reflect.addTypeBits": "void __golang reflect_addTypeBits(reflect_bitVector *bv, uintptr offset, internal_abi_Type *t)",
    "reflect.packEface": "interface_ __golang reflect_packEface(reflect_Value v)",
    "reflect._ptr_ValueError.Error": "string_0 __golang reflect__ptr_ValueError_Error(_ptr_reflect_ValueError)",
    "reflect.valueMethodName": "string __golang reflect_valueMethodName()",
    "reflect.flag.mustBeExportedSlow": "void __golang reflect_flag_mustBeExportedSlow(reflect_flag)",
    "reflect.flag.mustBeAssignableSlow": "void __golang reflect_flag_mustBeAssignableSlow(reflect_flag)",
    "reflect.Value.Addr": "reflect_Value_0 __golang reflect_Value_Addr(reflect_Value_0)",
    "reflect.Value.Bool": "bool __golang reflect_Value_Bool(reflect_Value_0)",
    "reflect.Value.panicNotBool": "void __golang reflect_Value_panicNotBool(reflect_Value_0)",
    "reflect.Value.Bytes": "_slice_uint8_0 __golang reflect_Value_Bytes(reflect_Value_0)",
    "reflect.Value.bytesSlow": "_slice_uint8_0 __golang reflect_Value_bytesSlow(reflect_Value_0)",
    "reflect.Value.runes": "_slice_int32 __golang reflect_Value_runes(reflect_Value v)",
    "reflect.Value.CanAddr": "bool __golang reflect_Value_CanAddr(reflect_Value_0)",
    "reflect.Value.CanSet": "bool __golang reflect_Value_CanSet(reflect_Value_0)",
    "reflect.Value.Call": "_slice_reflect_Value_0 __golang reflect_Value_Call(reflect_Value_0, _slice_reflect_Value_0)",
    "reflect.Value.CallSlice": "_slice_reflect_Value_0 __golang reflect_Value_CallSlice(reflect_Value_0, _slice_reflect_Value_0)",
    "reflect.Value.call": "_slice_reflect_Value __golang reflect_Value_call(reflect_Value v, string op, _slice_reflect_Value in)",
    "reflect.callReflect": "void __golang reflect_callReflect(reflect_makeFuncImpl *ctxt, void *frame, bool *retValid, internal_abi_RegArgs *regs)",
    "reflect.callMethod": "void __golang reflect_callMethod(reflect_methodValue *ctxt, void *frame, bool *retValid, internal_abi_RegArgs *regs)",
    "reflect.funcName": "string __golang reflect_funcName(func_slice_reflect_Value__slice_reflect_Value f)",
    "reflect.Value.Cap": "int_0 __golang reflect_Value_Cap(reflect_Value_0)",
    "reflect.Value.capNonSlice": "int_0 __golang reflect_Value_capNonSlice(reflect_Value_0)",
    "reflect.Value.Close": "void __golang reflect_Value_Close(reflect_Value_0)",
    "reflect.Value.CanComplex": "bool __golang reflect_Value_CanComplex(reflect_Value_0)",
    "reflect.Value.Complex": "complex128_0 __golang reflect_Value_Complex(reflect_Value_0)",
    "reflect.Value.Elem": "reflect_Value_0 __golang reflect_Value_Elem(reflect_Value_0)",
    "reflect.Value.Field": "reflect_Value_0 __golang reflect_Value_Field(reflect_Value_0, int_0)",
    "reflect.Value.FieldByIndex": "reflect_Value_0 __golang reflect_Value_FieldByIndex(reflect_Value_0, _slice_int_0)",
    "reflect.Value.FieldByName": "reflect_Value_0 __golang reflect_Value_FieldByName(reflect_Value_0, string_0)",
    "reflect.Value.FieldByNameFunc": "reflect_Value_0 __golang reflect_Value_FieldByNameFunc(reflect_Value_0, PTR_funcstring_bool_0)",
    "reflect.Value.CanFloat": "bool __golang reflect_Value_CanFloat(reflect_Value_0)",
    "reflect.Value.Float": "float64_0 __golang reflect_Value_Float(reflect_Value_0)",
    "reflect.Value.Index": "reflect_Value_0 __golang reflect_Value_Index(reflect_Value_0, int_0)",
    "reflect.Value.CanInt": "bool __golang reflect_Value_CanInt(reflect_Value_0)",
    "reflect.Value.Int": "int64_0 __golang reflect_Value_Int(reflect_Value_0)",
    "reflect.Value.CanInterface": "bool __golang reflect_Value_CanInterface(reflect_Value_0)",
    "reflect.Value.Interface": "interface__0 __golang reflect_Value_Interface(reflect_Value_0)",
    "reflect.valueInterface": "interface_ __golang reflect_valueInterface(reflect_Value v, bool safe)",
    "reflect.Value.InterfaceData": "_2_uintptr __golang reflect_Value_InterfaceData(reflect_Value_0)",
    "reflect.Value.IsNil": "bool __golang reflect_Value_IsNil(reflect_Value_0)",
    "reflect.Value.IsValid": "bool __golang reflect_Value_IsValid(reflect_Value_0)",
    "reflect.Value.IsZero": "bool __golang reflect_Value_IsZero(reflect_Value_0)",
    "reflect.isZero": "bool __golang reflect_isZero(_slice_uint8 b)",
    "reflect.Value.SetZero": "void __golang reflect_Value_SetZero(reflect_Value_0)",
    "reflect.Value.Kind": "reflect_Kind __golang reflect_Value_Kind(reflect_Value_0)",
    "reflect.Value.Len": "int_0 __golang reflect_Value_Len(reflect_Value_0)",
    "reflect.Value.lenNonSlice": "int_0 __golang reflect_Value_lenNonSlice(reflect_Value_0)",
    "reflect.Value.MapIndex": "reflect_Value_0 __golang reflect_Value_MapIndex(reflect_Value_0, reflect_Value_0)",
    "reflect.Value.MapKeys": "_slice_reflect_Value_0 __golang reflect_Value_MapKeys(reflect_Value_0)",
    "reflect._ptr_MapIter.Key": "reflect_Value_0 __golang reflect__ptr_MapIter_Key(_ptr_reflect_MapIter)",
    "reflect.Value.SetIterKey": "void __golang reflect_Value_SetIterKey(reflect_Value_0, _ptr_reflect_MapIter)",
    "reflect._ptr_MapIter.Value": "reflect_Value_0 __golang reflect__ptr_MapIter_Value(_ptr_reflect_MapIter)",
    "reflect.Value.SetIterValue": "void __golang reflect_Value_SetIterValue(reflect_Value_0, _ptr_reflect_MapIter)",
    "reflect._ptr_MapIter.Next": "bool __golang reflect__ptr_MapIter_Next(_ptr_reflect_MapIter)",
    "reflect._ptr_MapIter.Reset": "void __golang reflect__ptr_MapIter_Reset(_ptr_reflect_MapIter, reflect_Value_0)",
    "reflect.Value.MapRange": "_ptr_reflect_MapIter __golang reflect_Value_MapRange(reflect_Value_0)",
    "reflect.flag.panicNotMap": "void __golang reflect_flag_panicNotMap(reflect_flag)",
    "reflect.copyVal": "reflect_Value __golang reflect_copyVal(internal_abi_Type *typ, unsigned __int64 fl, void *ptr)",
    "reflect.Value.Method": "reflect_Value_0 __golang reflect_Value_Method(reflect_Value_0, int_0)",
    "reflect.Value.NumMethod": "int_0 __golang reflect_Value_NumMethod(reflect_Value_0)",
    "reflect.Value.MethodByName": "reflect_Value_0 __golang reflect_Value_MethodByName(reflect_Value_0, string_0)",
    "reflect.Value.NumField": "int_0 __golang reflect_Value_NumField(reflect_Value_0)",
    "reflect.Value.OverflowComplex": "bool __golang reflect_Value_OverflowComplex(reflect_Value_0, complex128_0)",
    "reflect.Value.OverflowFloat": "bool __golang reflect_Value_OverflowFloat(reflect_Value_0, float64_0)",
    "reflect.Value.OverflowInt": "bool __golang reflect_Value_OverflowInt(reflect_Value_0, int64_0)",
    "reflect.Value.OverflowUint": "bool __golang reflect_Value_OverflowUint(reflect_Value_0, uint64_0)",
    "reflect.Value.Pointer": "uintptr_0 __golang reflect_Value_Pointer(reflect_Value_0)",
    "reflect.Value.recv": "void __golang reflect_Value_recv(reflect_Value val, reflect_Value v, bool ok, bool nb)",
    "reflect.Value.Send": "void __golang reflect_Value_Send(reflect_Value_0, reflect_Value_0)",
    "reflect.Value.send": "bool __golang reflect_Value_send(reflect_Value v, reflect_Value x, bool nb)",
    "reflect.Value.Set": "void __golang reflect_Value_Set(reflect_Value_0, reflect_Value_0)",
    "reflect.Value.SetBool": "void __golang reflect_Value_SetBool(reflect_Value_0, bool)",
    "reflect.Value.SetBytes": "void __golang reflect_Value_SetBytes(reflect_Value_0, _slice_uint8_0)",
    "reflect.Value.setRunes": "void __golang reflect_Value_setRunes(reflect_Value v, _slice_int32 x)",
    "reflect.Value.SetComplex": "void __golang reflect_Value_SetComplex(reflect_Value_0, complex128_0)",
    "reflect.Value.SetFloat": "void __golang reflect_Value_SetFloat(reflect_Value_0, float64_0)",
    "reflect.Value.SetInt": "void __golang reflect_Value_SetInt(reflect_Value_0, int64_0)",
    "reflect.Value.SetLen": "void __golang reflect_Value_SetLen(reflect_Value_0, int_0)",
    "reflect.Value.SetCap": "void __golang reflect_Value_SetCap(reflect_Value_0, int_0)",
    "reflect.Value.SetMapIndex": "void __golang reflect_Value_SetMapIndex(reflect_Value_0, reflect_Value_0, reflect_Value_0)",
    "reflect.Value.SetUint": "void __golang reflect_Value_SetUint(reflect_Value_0, uint64_0)",
    "reflect.Value.SetPointer": "void __golang reflect_Value_SetPointer(reflect_Value_0, unsafe_Pointer)",
    "reflect.Value.SetString": "void __golang reflect_Value_SetString(reflect_Value_0, string_0)",
    "reflect.Value.Slice": "reflect_Value_0 __golang reflect_Value_Slice(reflect_Value_0, int_0, int_0)",
    "reflect.Value.Slice3": "reflect_Value_0 __golang reflect_Value_Slice3(reflect_Value_0, int_0, int_0, int_0)",
    "reflect.Value.String": "string_0 __golang reflect_Value_String(reflect_Value_0)",
    "reflect.Value.stringNonString": "string_0 __golang reflect_Value_stringNonString(reflect_Value_0)",
    "reflect.Value.TrySend": "bool __golang reflect_Value_TrySend(reflect_Value_0, reflect_Value_0)",
    "reflect.Value.Type": "reflect_Type_0 __golang reflect_Value_Type(reflect_Value_0)",
    "reflect.Value.typeSlow": "reflect_Type_0 __golang reflect_Value_typeSlow(reflect_Value_0)",
    "reflect.Value.CanUint": "bool __golang reflect_Value_CanUint(reflect_Value_0)",
    "reflect.Value.Uint": "uint64_0 __golang reflect_Value_Uint(reflect_Value_0)",
    "reflect.Value.UnsafeAddr": "uintptr_0 __golang reflect_Value_UnsafeAddr(reflect_Value_0)",
    "reflect.Value.UnsafePointer": "unsafe_Pointer __golang reflect_Value_UnsafePointer(reflect_Value_0)",
    "reflect.typesMustMatch": "void __golang reflect_typesMustMatch(string what, reflect_Type t1, reflect_Type t2)",
    "reflect.Value.Grow": "void __golang reflect_Value_Grow(reflect_Value_0, int_0)",
    "reflect.Value.grow": "void __golang reflect_Value_grow(reflect_Value_0, int_0)",
    "reflect.Value.Clear": "void __golang reflect_Value_Clear(reflect_Value_0)",
    "reflect.Copy": "int __golang reflect_Copy(reflect_Value dst, reflect_Value src)",
    "reflect.MakeSlice": "reflect_Value __golang reflect_MakeSlice(reflect_Type typ, int len, int cap)",
    "reflect.MakeMapWithSize": "reflect_Value __golang reflect_MakeMapWithSize(reflect_Type typ, int n)",
    "reflect.Zero": "reflect_Value __golang reflect_Zero(reflect_Type typ)",
    "reflect.New": "reflect_Value __golang reflect_New(reflect_Type typ)",
    "reflect.Value.assignTo": "reflect_Value __golang reflect_Value_assignTo(reflect_Value v, string context, internal_abi_Type *dst, void *target)",
    "reflect.Value.Convert": "reflect_Value_0 __golang reflect_Value_Convert(reflect_Value_0, reflect_Type_0)",
    "reflect.Value.CanConvert": "bool __golang reflect_Value_CanConvert(reflect_Value_0, reflect_Type_0)",
    "reflect.Value.Comparable": "bool __golang reflect_Value_Comparable(reflect_Value_0)",
    "reflect.Value.Equal": "bool __golang reflect_Value_Equal(reflect_Value_0, reflect_Value_0)",
    "reflect.convertOp": "funcreflect_Value_comma_reflect_Type_reflect_Value __golang reflect_convertOp(internal_abi_Type *dst, internal_abi_Type *src)",
    "reflect.makeInt": "reflect_Value __golang reflect_makeInt(unsigned __int64 f, uint64 bits, reflect_Type t)",
    "reflect.makeFloat": "reflect_Value __golang reflect_makeFloat(unsigned __int64 f, float64 v, reflect_Type t)",
    "reflect.makeFloat32": "reflect_Value __golang reflect_makeFloat32(unsigned __int64 f, float32 v, reflect_Type t)",
    "reflect.makeComplex": "reflect_Value __golang reflect_makeComplex(unsigned __int64 f, complex128 v, reflect_Type t)",
    "reflect.makeString": "reflect_Value __golang reflect_makeString(unsigned __int64 f, string v, reflect_Type t)",
    "reflect.makeBytes": "reflect_Value __golang reflect_makeBytes(unsigned __int64 f, _slice_uint8 v, reflect_Type t)",
    "reflect.makeRunes": "reflect_Value __golang reflect_makeRunes(unsigned __int64 f, _slice_int32 v, reflect_Type t)",
    "reflect.cvtInt": "reflect_Value __golang reflect_cvtInt(reflect_Value v, reflect_Type t)",
    "reflect.cvtUint": "reflect_Value __golang reflect_cvtUint(reflect_Value v, reflect_Type t)",
    "reflect.cvtFloatInt": "reflect_Value __golang reflect_cvtFloatInt(reflect_Value v, reflect_Type t)",
    "reflect.cvtFloatUint": "reflect_Value __golang reflect_cvtFloatUint(reflect_Value v, reflect_Type t)",
    "reflect.cvtIntFloat": "reflect_Value __golang reflect_cvtIntFloat(reflect_Value v, reflect_Type t)",
    "reflect.cvtUintFloat": "reflect_Value __golang reflect_cvtUintFloat(reflect_Value v, reflect_Type t)",
    "reflect.cvtFloat": "reflect_Value __golang reflect_cvtFloat(reflect_Value v, reflect_Type t)",
    "reflect.cvtComplex": "reflect_Value __golang reflect_cvtComplex(reflect_Value v, reflect_Type t)",
    "reflect.cvtIntString": "reflect_Value __golang reflect_cvtIntString(reflect_Value v, reflect_Type t)",
    "reflect.cvtUintString": "reflect_Value __golang reflect_cvtUintString(reflect_Value v, reflect_Type t)",
    "reflect.cvtBytesString": "reflect_Value __golang reflect_cvtBytesString(reflect_Value v, reflect_Type t)",
    "reflect.cvtStringBytes": "reflect_Value __golang reflect_cvtStringBytes(reflect_Value v, reflect_Type t)",
    "reflect.cvtRunesString": "reflect_Value __golang reflect_cvtRunesString(reflect_Value v, reflect_Type t)",
    "reflect.cvtStringRunes": "reflect_Value __golang reflect_cvtStringRunes(reflect_Value v, reflect_Type t)",
    "reflect.cvtSliceArrayPtr": "reflect_Value __golang reflect_cvtSliceArrayPtr(reflect_Value v, reflect_Type t)",
    "reflect.cvtSliceArray": "reflect_Value __golang reflect_cvtSliceArray(reflect_Value v, reflect_Type t)",
    "reflect.cvtDirect": "reflect_Value __golang reflect_cvtDirect(reflect_Value v, reflect_Type typ)",
    "reflect.cvtT2I": "reflect_Value __golang reflect_cvtT2I(reflect_Value v, reflect_Type typ)",
    "reflect.cvtI2I": "reflect_Value __golang reflect_cvtI2I(reflect_Value v, reflect_Type typ)",
    "reflect.mapassign": "void __golang reflect_mapassign(internal_abi_Type *t, void *m, void *key, void *val)",
    "reflect.mapassign_faststr": "void __golang reflect_mapassign_faststr(internal_abi_Type *t, void *m, string key, void *val)",
    "reflect.makeFuncStub": "void __golang reflect_makeFuncStub()",
    "reflect.methodValueCall": "void __golang reflect_methodValueCall()",
    "reflect._ptr_Kind.String": "string_0 __golang reflect__ptr_Kind_String(_ptr_reflect_Kind)",
    "reflect._ptr_ChanDir.String": "string_0 __golang reflect__ptr_ChanDir_String(_ptr_reflect_ChanDir)",
    "reflect._ptr_StructTag.Get": "string_0 __golang reflect__ptr_StructTag_Get(_ptr_reflect_StructTag, string_0)",
    "reflect._ptr_StructField.IsExported": "bool __golang reflect__ptr_StructField_IsExported(_ptr_reflect_StructField)",
    "reflect._ptr_Value.Addr": "reflect_Value_0 __golang reflect__ptr_Value_Addr(_ptr_reflect_Value)",
    "reflect._ptr_Value.Bool": "bool __golang reflect__ptr_Value_Bool(_ptr_reflect_Value)",
    "reflect._ptr_Value.Bytes": "_slice_uint8_0 __golang reflect__ptr_Value_Bytes(_ptr_reflect_Value)",
    "reflect._ptr_Value.Call": "_slice_reflect_Value_0 __golang reflect__ptr_Value_Call(_ptr_reflect_Value, _slice_reflect_Value_0)",
    "reflect._ptr_Value.CallSlice": "_slice_reflect_Value_0 __golang reflect__ptr_Value_CallSlice(_ptr_reflect_Value, _slice_reflect_Value_0)",
    "reflect._ptr_Value.CanAddr": "bool __golang reflect__ptr_Value_CanAddr(_ptr_reflect_Value)",
    "reflect._ptr_Value.CanComplex": "bool __golang reflect__ptr_Value_CanComplex(_ptr_reflect_Value)",
    "reflect._ptr_Value.CanConvert": "bool __golang reflect__ptr_Value_CanConvert(_ptr_reflect_Value, reflect_Type_0)",
    "reflect._ptr_Value.CanFloat": "bool __golang reflect__ptr_Value_CanFloat(_ptr_reflect_Value)",
    "reflect._ptr_Value.CanInt": "bool __golang reflect__ptr_Value_CanInt(_ptr_reflect_Value)",
    "reflect._ptr_Value.CanInterface": "bool __golang reflect__ptr_Value_CanInterface(_ptr_reflect_Value)",
    "reflect._ptr_Value.CanSet": "bool __golang reflect__ptr_Value_CanSet(_ptr_reflect_Value)",
    "reflect._ptr_Value.CanUint": "bool __golang reflect__ptr_Value_CanUint(_ptr_reflect_Value)",
    "reflect._ptr_Value.Cap": "int_0 __golang reflect__ptr_Value_Cap(_ptr_reflect_Value)",
    "reflect._ptr_Value.Clear": "void __golang reflect__ptr_Value_Clear(_ptr_reflect_Value)",
    "reflect._ptr_Value.Close": "void __golang reflect__ptr_Value_Close(_ptr_reflect_Value)",
    "reflect._ptr_Value.Comparable": "bool __golang reflect__ptr_Value_Comparable(_ptr_reflect_Value)",
    "reflect._ptr_Value.Complex": "complex128_0 __golang reflect__ptr_Value_Complex(_ptr_reflect_Value)",
    "reflect._ptr_Value.Convert": "reflect_Value_0 __golang reflect__ptr_Value_Convert(_ptr_reflect_Value, reflect_Type_0)",
    "reflect._ptr_Value.Elem": "reflect_Value_0 __golang reflect__ptr_Value_Elem(_ptr_reflect_Value)",
    "reflect._ptr_Value.Equal": "bool __golang reflect__ptr_Value_Equal(_ptr_reflect_Value, reflect_Value_0)",
    "reflect._ptr_Value.Field": "reflect_Value_0 __golang reflect__ptr_Value_Field(_ptr_reflect_Value, int_0)",
    "reflect._ptr_Value.FieldByIndex": "reflect_Value_0 __golang reflect__ptr_Value_FieldByIndex(_ptr_reflect_Value, _slice_int_0)",
    "reflect._ptr_Value.FieldByName": "reflect_Value_0 __golang reflect__ptr_Value_FieldByName(_ptr_reflect_Value, string_0)",
    "reflect._ptr_Value.FieldByNameFunc": "reflect_Value_0 __golang reflect__ptr_Value_FieldByNameFunc(_ptr_reflect_Value, PTR_funcstring_bool_0)",
    "reflect._ptr_Value.Float": "float64_0 __golang reflect__ptr_Value_Float(_ptr_reflect_Value)",
    "reflect._ptr_Value.Grow": "void __golang reflect__ptr_Value_Grow(_ptr_reflect_Value, int_0)",
    "reflect._ptr_Value.Index": "reflect_Value_0 __golang reflect__ptr_Value_Index(_ptr_reflect_Value, int_0)",
    "reflect._ptr_Value.Int": "int64_0 __golang reflect__ptr_Value_Int(_ptr_reflect_Value)",
    "reflect._ptr_Value.Interface": "interface__0 __golang reflect__ptr_Value_Interface(_ptr_reflect_Value)",
    "reflect._ptr_Value.InterfaceData": "_2_uintptr __golang reflect__ptr_Value_InterfaceData(_ptr_reflect_Value)",
    "reflect._ptr_Value.IsNil": "bool __golang reflect__ptr_Value_IsNil(_ptr_reflect_Value)",
    "reflect._ptr_Value.IsValid": "bool __golang reflect__ptr_Value_IsValid(_ptr_reflect_Value)",
    "reflect._ptr_Value.IsZero": "bool __golang reflect__ptr_Value_IsZero(_ptr_reflect_Value)",
    "reflect._ptr_Value.Kind": "reflect_Kind __golang reflect__ptr_Value_Kind(_ptr_reflect_Value)",
    "reflect._ptr_Value.Len": "int_0 __golang reflect__ptr_Value_Len(_ptr_reflect_Value)",
    "reflect._ptr_Value.MapIndex": "reflect_Value_0 __golang reflect__ptr_Value_MapIndex(_ptr_reflect_Value, reflect_Value_0)",
    "reflect._ptr_Value.MapKeys": "_slice_reflect_Value_0 __golang reflect__ptr_Value_MapKeys(_ptr_reflect_Value)",
    "reflect._ptr_Value.MapRange": "_ptr_reflect_MapIter __golang reflect__ptr_Value_MapRange(_ptr_reflect_Value)",
    "reflect._ptr_Value.Method": "reflect_Value_0 __golang reflect__ptr_Value_Method(_ptr_reflect_Value, int_0)",
    "reflect._ptr_Value.MethodByName": "reflect_Value_0 __golang reflect__ptr_Value_MethodByName(_ptr_reflect_Value, string_0)",
    "reflect._ptr_Value.NumField": "int_0 __golang reflect__ptr_Value_NumField(_ptr_reflect_Value)",
    "reflect._ptr_Value.NumMethod": "int_0 __golang reflect__ptr_Value_NumMethod(_ptr_reflect_Value)",
    "reflect._ptr_Value.OverflowComplex": "bool __golang reflect__ptr_Value_OverflowComplex(_ptr_reflect_Value, complex128_0)",
    "reflect._ptr_Value.OverflowFloat": "bool __golang reflect__ptr_Value_OverflowFloat(_ptr_reflect_Value, float64_0)",
    "reflect._ptr_Value.OverflowInt": "bool __golang reflect__ptr_Value_OverflowInt(_ptr_reflect_Value, int64_0)",
    "reflect._ptr_Value.OverflowUint": "bool __golang reflect__ptr_Value_OverflowUint(_ptr_reflect_Value, uint64_0)",
    "reflect._ptr_Value.Pointer": "uintptr_0 __golang reflect__ptr_Value_Pointer(_ptr_reflect_Value)",
    "reflect._ptr_Value.Send": "void __golang reflect__ptr_Value_Send(_ptr_reflect_Value, reflect_Value_0)",
    "reflect._ptr_Value.Set": "void __golang reflect__ptr_Value_Set(_ptr_reflect_Value, reflect_Value_0)",
    "reflect._ptr_Value.SetBool": "void __golang reflect__ptr_Value_SetBool(_ptr_reflect_Value, bool)",
    "reflect._ptr_Value.SetBytes": "void __golang reflect__ptr_Value_SetBytes(_ptr_reflect_Value, _slice_uint8_0)",
    "reflect._ptr_Value.SetCap": "void __golang reflect__ptr_Value_SetCap(_ptr_reflect_Value, int_0)",
    "reflect._ptr_Value.SetComplex": "void __golang reflect__ptr_Value_SetComplex(_ptr_reflect_Value, complex128_0)",
    "reflect._ptr_Value.SetFloat": "void __golang reflect__ptr_Value_SetFloat(_ptr_reflect_Value, float64_0)",
    "reflect._ptr_Value.SetInt": "void __golang reflect__ptr_Value_SetInt(_ptr_reflect_Value, int64_0)",
    "reflect._ptr_Value.SetIterKey": "void __golang reflect__ptr_Value_SetIterKey(_ptr_reflect_Value, _ptr_reflect_MapIter)",
    "reflect._ptr_Value.SetIterValue": "void __golang reflect__ptr_Value_SetIterValue(_ptr_reflect_Value, _ptr_reflect_MapIter)",
    "reflect._ptr_Value.SetLen": "void __golang reflect__ptr_Value_SetLen(_ptr_reflect_Value, int_0)",
    "reflect._ptr_Value.SetMapIndex": "void __golang reflect__ptr_Value_SetMapIndex(_ptr_reflect_Value, reflect_Value_0, reflect_Value_0)",
    "reflect._ptr_Value.SetPointer": "void __golang reflect__ptr_Value_SetPointer(_ptr_reflect_Value, unsafe_Pointer)",
    "reflect._ptr_Value.SetString": "void __golang reflect__ptr_Value_SetString(_ptr_reflect_Value, string_0)",
    "reflect._ptr_Value.SetUint": "void __golang reflect__ptr_Value_SetUint(_ptr_reflect_Value, uint64_0)",
    "reflect._ptr_Value.SetZero": "void __golang reflect__ptr_Value_SetZero(_ptr_reflect_Value)",
    "reflect._ptr_Value.Slice": "reflect_Value_0 __golang reflect__ptr_Value_Slice(_ptr_reflect_Value, int_0, int_0)",
    "reflect._ptr_Value.Slice3": "reflect_Value_0 __golang reflect__ptr_Value_Slice3(_ptr_reflect_Value, int_0, int_0, int_0)",
    "reflect._ptr_Value.String": "string_0 __golang reflect__ptr_Value_String(_ptr_reflect_Value)",
    "reflect._ptr_Value.TrySend": "bool __golang reflect__ptr_Value_TrySend(_ptr_reflect_Value, reflect_Value_0)",
    "reflect._ptr_Value.Type": "reflect_Type_0 __golang reflect__ptr_Value_Type(_ptr_reflect_Value)",
    "reflect._ptr_Value.Uint": "uint64_0 __golang reflect__ptr_Value_Uint(_ptr_reflect_Value)",
    "reflect._ptr_Value.UnsafeAddr": "uintptr_0 __golang reflect__ptr_Value_UnsafeAddr(_ptr_reflect_Value)",
    "reflect._ptr_Value.UnsafePointer": "unsafe_Pointer __golang reflect__ptr_Value_UnsafePointer(_ptr_reflect_Value)",
    "reflect._ptr_Method.IsExported": "bool __golang reflect__ptr_Method_IsExported(_ptr_reflect_Method)",
    "reflect._ptr_ptrType.Align": "int_0 __golang reflect__ptr_ptrType_Align(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.ArrayType": "_ptr_abi_ArrayType __golang reflect__ptr_ptrType_ArrayType(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.ChanDir": "abi_ChanDir __golang reflect__ptr_ptrType_ChanDir(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.Common": "_ptr_abi_Type __golang reflect__ptr_ptrType_Common(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.ExportedMethods": "_slice_abi_Method __golang reflect__ptr_ptrType_ExportedMethods(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.FieldAlign": "int_0 __golang reflect__ptr_ptrType_FieldAlign(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.FuncType": "_ptr_abi_FuncType __golang reflect__ptr_ptrType_FuncType(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.GcSlice": "_slice_uint8_0 __golang reflect__ptr_ptrType_GcSlice(_ptr_reflect_ptrType, uintptr_0, uintptr_0)",
    "reflect._ptr_ptrType.HasName": "bool __golang reflect__ptr_ptrType_HasName(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.IfaceIndir": "bool __golang reflect__ptr_ptrType_IfaceIndir(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.InterfaceType": "_ptr_abi_InterfaceType __golang reflect__ptr_ptrType_InterfaceType(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.IsDirectIface": "bool __golang reflect__ptr_ptrType_IsDirectIface(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.Key": "_ptr_abi_Type __golang reflect__ptr_ptrType_Key(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.Kind": "abi_Kind __golang reflect__ptr_ptrType_Kind(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.Len": "int_0 __golang reflect__ptr_ptrType_Len(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.MapType": "_ptr_abi_MapType __golang reflect__ptr_ptrType_MapType(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.NumMethod": "int_0 __golang reflect__ptr_ptrType_NumMethod(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.Pointers": "bool __golang reflect__ptr_ptrType_Pointers(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.Size": "uintptr_0 __golang reflect__ptr_ptrType_Size(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.StructType": "_ptr_abi_StructType __golang reflect__ptr_ptrType_StructType(_ptr_reflect_ptrType)",
    "reflect._ptr_ptrType.Uncommon": "_ptr_abi_UncommonType __golang reflect__ptr_ptrType_Uncommon(_ptr_reflect_ptrType)",
    "reflect._ptr_structType.Align": "int_0 __golang reflect__ptr_structType_Align(_ptr_reflect_structType)",
    "reflect._ptr_structType.ArrayType": "_ptr_abi_ArrayType __golang reflect__ptr_structType_ArrayType(_ptr_reflect_structType)",
    "reflect._ptr_structType.ChanDir": "abi_ChanDir __golang reflect__ptr_structType_ChanDir(_ptr_reflect_structType)",
    "reflect._ptr_structType.Common": "_ptr_abi_Type __golang reflect__ptr_structType_Common(_ptr_reflect_structType)",
    "reflect._ptr_structType.Elem": "_ptr_abi_Type __golang reflect__ptr_structType_Elem(_ptr_reflect_structType)",
    "reflect._ptr_structType.ExportedMethods": "_slice_abi_Method __golang reflect__ptr_structType_ExportedMethods(_ptr_reflect_structType)",
    "reflect._ptr_structType.FieldAlign": "int_0 __golang reflect__ptr_structType_FieldAlign(_ptr_reflect_structType)",
    "reflect._ptr_structType.FuncType": "_ptr_abi_FuncType __golang reflect__ptr_structType_FuncType(_ptr_reflect_structType)",
    "reflect._ptr_structType.GcSlice": "_slice_uint8_0 __golang reflect__ptr_structType_GcSlice(_ptr_reflect_structType, uintptr_0, uintptr_0)",
    "reflect._ptr_structType.HasName": "bool __golang reflect__ptr_structType_HasName(_ptr_reflect_structType)",
    "reflect._ptr_structType.IfaceIndir": "bool __golang reflect__ptr_structType_IfaceIndir(_ptr_reflect_structType)",
    "reflect._ptr_structType.InterfaceType": "_ptr_abi_InterfaceType __golang reflect__ptr_structType_InterfaceType(_ptr_reflect_structType)",
    "reflect._ptr_structType.IsDirectIface": "bool __golang reflect__ptr_structType_IsDirectIface(_ptr_reflect_structType)",
    "reflect._ptr_structType.Key": "_ptr_abi_Type __golang reflect__ptr_structType_Key(_ptr_reflect_structType)",
    "reflect._ptr_structType.Kind": "abi_Kind __golang reflect__ptr_structType_Kind(_ptr_reflect_structType)",
    "reflect._ptr_structType.Len": "int_0 __golang reflect__ptr_structType_Len(_ptr_reflect_structType)",
    "reflect._ptr_structType.MapType": "_ptr_abi_MapType __golang reflect__ptr_structType_MapType(_ptr_reflect_structType)",
    "reflect._ptr_structType.NumMethod": "int_0 __golang reflect__ptr_structType_NumMethod(_ptr_reflect_structType)",
    "reflect._ptr_structType.Pointers": "bool __golang reflect__ptr_structType_Pointers(_ptr_reflect_structType)",
    "reflect._ptr_structType.Size": "uintptr_0 __golang reflect__ptr_structType_Size(_ptr_reflect_structType)",
    "reflect._ptr_structType.Uncommon": "_ptr_abi_UncommonType __golang reflect__ptr_structType_Uncommon(_ptr_reflect_structType)",
    "reflect.moveMakeFuncArgPtrs_0": "void __golang reflect_moveMakeFuncArgPtrs_0(reflect_makeFuncCtxt *ctxt, internal_abi_RegArgs *args)",
    "reflect.callReflect_0": "void __golang reflect_callReflect_0(reflect_makeFuncImpl *ctxt, void *frame, bool *retValid, internal_abi_RegArgs *regs)",
    "reflect.callMethod_0": "void __golang reflect_callMethod_0(reflect_methodValue *ctxt, void *frame, bool *retValid, internal_abi_RegArgs *regs)",
    "internal_fmtsort._ptr_SortedMap.Len": "int_0 __golang internal_fmtsort__ptr_SortedMap_Len(_ptr_fmtsort_SortedMap)",
    "internal_fmtsort._ptr_SortedMap.Less": "bool __golang internal_fmtsort__ptr_SortedMap_Less(_ptr_fmtsort_SortedMap, int_0, int_0)",
    "internal_fmtsort._ptr_SortedMap.Swap": "void __golang internal_fmtsort__ptr_SortedMap_Swap(_ptr_fmtsort_SortedMap, int_0, int_0)",
    "internal_fmtsort.Sort": "internal_fmtsort_SortedMap *__golang internal_fmtsort_Sort(reflect_Value mapValue)",
    "internal_fmtsort.compare": "int __golang internal_fmtsort_compare(reflect_Value aVal, reflect_Value bVal)",
    "io._ptr_SectionReader.Size": "int64_0 __golang io__ptr_SectionReader_Size(_ptr_io_SectionReader)",
    "io.NopCloser": "io_ReadCloser __golang io_NopCloser(io_Reader r)",
    "io.nopCloser.Close": "error_0 __golang io_nopCloser_Close(io_nopCloser_0)",
    "io.nopCloserWriterTo.Close": "error_0 __golang io_nopCloserWriterTo_Close(io_nopCloserWriterTo_0)",
    "io._ptr_onceError.Store": "void __golang io__ptr_onceError_Store(_ptr_io_onceError, error_0)",
    "io._ptr_onceError.Store.deferwrap1": "void __golang io__ptr_onceError_Store_deferwrap1()",
    "io._ptr_onceError.Load": "error_0 __golang io__ptr_onceError_Load(_ptr_io_onceError)",
    "io._ptr_onceError.Load.deferwrap1": "void __golang io__ptr_onceError_Load_deferwrap1()",
    "io._ptr_pipe.closeRead": "error_0 __golang io__ptr_pipe_closeRead(_ptr_io_pipe, error_0)",
    "io._ptr_pipe.write.deferwrap1": "void __golang io__ptr_pipe_write_deferwrap1()",
    "io._ptr_pipe.closeWrite": "error_0 __golang io__ptr_pipe_closeWrite(_ptr_io_pipe, error_0)",
    "io._ptr_pipe.readCloseError": "error_0 __golang io__ptr_pipe_readCloseError(_ptr_io_pipe)",
    "io._ptr_pipe.writeCloseError": "error_0 __golang io__ptr_pipe_writeCloseError(_ptr_io_pipe)",
    "io._ptr_PipeReader.Close": "error_0 __golang io__ptr_PipeReader_Close(_ptr_io_PipeReader)",
    "io._ptr_PipeReader.CloseWithError": "error_0 __golang io__ptr_PipeReader_CloseWithError(_ptr_io_PipeReader, error_0)",
    "io._ptr_PipeWriter.Close": "error_0 __golang io__ptr_PipeWriter_Close(_ptr_io_PipeWriter)",
    "io._ptr_PipeWriter.CloseWithError": "error_0 __golang io__ptr_PipeWriter_CloseWithError(_ptr_io_PipeWriter, error_0)",
    "io._ptr_nopCloser.Close": "error_0 __golang io__ptr_nopCloser_Close(_ptr_io_nopCloser)",
    "io._ptr_nopCloserWriterTo.Close": "error_0 __golang io__ptr_nopCloserWriterTo_Close(_ptr_io_nopCloserWriterTo)",
    "io._ptr_onceError.Lock": "void __golang io__ptr_onceError_Lock(_ptr_io_onceError)",
    "io._ptr_onceError.TryLock": "bool __golang io__ptr_onceError_TryLock(_ptr_io_onceError)",
    "io._ptr_onceError.Unlock": "void __golang io__ptr_onceError_Unlock(_ptr_io_onceError)",
    "syscall.copyenv": "void __golang syscall_copyenv()",
    "syscall.Unsetenv.deferwrap1": "void __golang syscall_Unsetenv_deferwrap1()",
    "syscall.Getenv": "void __golang syscall_Getenv(string value, bool found, bool found, string key)",
    "syscall.Getenv.deferwrap1": "void __golang syscall_Getenv_deferwrap1()",
    "syscall.Setenv.deferwrap1": "void __golang syscall_Setenv_deferwrap1()",
    "syscall.Environ.deferwrap1": "void __golang syscall_Environ_deferwrap1()",
    "syscall.forkAndExecInChild": "void __golang syscall_forkAndExecInChild(uint8 *argv0, _slice__ptr_uint8 argv, syscall_ProcAttr *attr, syscall_SysProcAttr *sys, int pipe, _slice__ptr_uint8 envv, int pid, unsigned __int64 err, uint8 *chroot, uint8 *dir)",
    "syscall.forkAndExecInChild1": "void __golang syscall_forkAndExecInChild1(uint8 *argv0, _slice__ptr_uint8 argv, syscall_ProcAttr *attr, syscall_SysProcAttr *sys, int pipe, _slice__ptr_uint8 envv, uintptr pid, int32 pidfd, int32 pidfd, unsigned __int64 err1, uint8 *chroot, unsigned __int64 err1, int mapPipe[2], bool locked, uint8 *dir)",
    "syscall.formatIDMappings": "_slice_uint8 __golang syscall_formatIDMappings(_slice_syscall_SysProcIDMap idMap)",
    "syscall.writeIDMappings": "error __golang syscall_writeIDMappings(string path, _slice_syscall_SysProcIDMap idMap)",
    "syscall.writeSetgroups": "error __golang syscall_writeSetgroups(int pid, bool enable)",
    "syscall.writeUidGidMappings": "error __golang syscall_writeUidGidMappings(int pid, syscall_SysProcAttr *sys)",
    "syscall.SetNonblock": "error __golang syscall_SetNonblock(int fd, bool nonblocking)",
    "syscall.acquireForkLock": "void __golang syscall_acquireForkLock()",
    "syscall.acquireForkLock.deferwrap1": "void __golang syscall_acquireForkLock_deferwrap1()",
    "syscall.releaseForkLock": "void __golang syscall_releaseForkLock()",
    "syscall.releaseForkLock.deferwrap1": "void __golang syscall_releaseForkLock_deferwrap1()",
    "syscall.newNetlinkRouteRequest": "_slice_uint8 __golang syscall_newNetlinkRouteRequest(int proto, int seq, int family)",
    "syscall.NetlinkRIB.deferwrap2": "void __golang syscall_NetlinkRIB_deferwrap2()",
    "syscall.NetlinkRIB.deferwrap1": "void __golang syscall_NetlinkRIB_deferwrap1()",
    "syscall._ptr_Timespec.Nano": "int64_0 __golang syscall__ptr_Timespec_Nano(_ptr_syscall_Timespec)",
    "syscall._ptr_Timeval.Nano": "int64_0 __golang syscall__ptr_Timeval_Nano(_ptr_syscall_Timeval)",
    "syscall.isGroupMember": "bool __golang syscall_isGroupMember(int gid)",
    "syscall.isCapDacOverrideSet": "bool __golang syscall_isCapDacOverrideSet()",
    "syscall.Faccessat": "error __golang syscall_Faccessat(int dirfd, string path, uint32 mode, int flags)",
    "syscall.Fchmodat": "error __golang syscall_Fchmodat(int dirfd, string path, uint32 mode, int flags)",
    "syscall.Pipe2": "error __golang syscall_Pipe2(_slice_int p, int flags)",
    "syscall.WaitStatus.Exited": "bool __golang syscall_WaitStatus_Exited(syscall_WaitStatus)",
    "syscall.WaitStatus.Signaled": "bool __golang syscall_WaitStatus_Signaled(syscall_WaitStatus)",
    "syscall.WaitStatus.Stopped": "bool __golang syscall_WaitStatus_Stopped(syscall_WaitStatus)",
    "syscall.WaitStatus.Continued": "bool __golang syscall_WaitStatus_Continued(syscall_WaitStatus)",
    "syscall.WaitStatus.CoreDump": "bool __golang syscall_WaitStatus_CoreDump(syscall_WaitStatus)",
    "syscall.WaitStatus.ExitStatus": "int_0 __golang syscall_WaitStatus_ExitStatus(syscall_WaitStatus)",
    "syscall.WaitStatus.Signal": "syscall_Signal __golang syscall_WaitStatus_Signal(syscall_WaitStatus)",
    "syscall.WaitStatus.StopSignal": "syscall_Signal __golang syscall_WaitStatus_StopSignal(syscall_WaitStatus)",
    "syscall.WaitStatus.TrapCause": "int_0 __golang syscall_WaitStatus_TrapCause(syscall_WaitStatus)",
    "syscall.sendmsgN": "void __golang syscall_sendmsgN(int fd, _slice_uint8 p, int flags, int n, error err, _slice_uint8 oob, void *ptr, unsigned int salen)",
    "syscall._ptr_Iovec.SetLen": "void __golang syscall__ptr_Iovec_SetLen(_ptr_syscall_Iovec, int_0)",
    "syscall.Errno.Error": "string_0 __golang syscall_Errno_Error(syscall_Errno)",
    "syscall.Errno.Is": "bool __golang syscall_Errno_Is(syscall_Errno, error_0)",
    "syscall.Errno.Temporary": "bool __golang syscall_Errno_Temporary(syscall_Errno)",
    "syscall.Errno.Timeout": "bool __golang syscall_Errno_Timeout(syscall_Errno)",
    "syscall.Signal.Signal": "void __golang syscall_Signal_Signal(syscall_Signal)",
    "syscall.Signal.String": "string_0 __golang syscall_Signal_String(syscall_Signal)",
    "syscall.Bind": "error __golang syscall_Bind(int fd, syscall_Sockaddr sa)",
    "syscall.Connect": "error __golang syscall_Connect(int fd, syscall_Sockaddr sa)",
    "syscall.SendmsgN": "void __golang syscall_SendmsgN(int fd, _slice_uint8 p, int flags, int n, error err, _slice_uint8 oob, syscall_Sockaddr to)",
    "syscall.sendtoInet4": "error __golang syscall_sendtoInet4(int fd, _slice_uint8 p, int flags, syscall_SockaddrInet4 *to)",
    "syscall.sendtoInet6": "error __golang syscall_sendtoInet6(int fd, _slice_uint8 p, int flags, syscall_SockaddrInet6 *to)",
    "syscall.Sendto": "error __golang syscall_Sendto(int fd, _slice_uint8 p, int flags, syscall_Sockaddr to)",
    "syscall.faccessat": "error __golang syscall_faccessat(int dirfd, string path, uint32 mode)",
    "syscall.faccessat2": "error __golang syscall_faccessat2(int dirfd, string path, uint32 mode, int flags)",
    "syscall.fchmodat": "error __golang syscall_fchmodat(int dirfd, string path, uint32 mode)",
    "syscall.fchmodat2": "error __golang syscall_fchmodat2(int dirfd, string path, uint32 mode, int flags)",
    "syscall.pipe2": "error __golang syscall_pipe2(int (*p)[2], int flags)",
    "syscall.symlinkat": "error __golang syscall_symlinkat(string oldpath, int newdirfd, string newpath)",
    "syscall.unlinkat": "error __golang syscall_unlinkat(int dirfd, string path, int flags)",
    "syscall.utimensat": "error __golang syscall_utimensat(int dirfd, string path, syscall_Timespec (*times)[2], int flag)",
    "syscall.Close": "error __golang syscall_Close(int fd)",
    "syscall.Fchdir": "error __golang syscall_Fchdir(int fd)",
    "syscall.Fchmod": "error __golang syscall_Fchmod(int fd, uint32 mode)",
    "syscall.Fsync": "error __golang syscall_Fsync(int fd)",
    "syscall.Kill": "error __golang syscall_Kill(int pid, __int64 sig)",
    "syscall.Mkdirat": "error __golang syscall_Mkdirat(int dirfd, string path, uint32 mode)",
    "syscall.Uname": "error __golang syscall_Uname(syscall_Utsname *buf)",
    "syscall.munmap": "error __golang syscall_munmap(uintptr addr, uintptr length)",
    "syscall.Fchown": "error __golang syscall_Fchown(int fd, int uid, int gid)",
    "syscall.Fstat": "error __golang syscall_Fstat(int fd, syscall_Stat_t *stat)",
    "syscall.Ftruncate": "error __golang syscall_Ftruncate(int fd, int64 length)",
    "syscall.Getrlimit": "error __golang syscall_Getrlimit(int resource, syscall_Rlimit *rlim)",
    "syscall.Listen": "error __golang syscall_Listen(int s, int n)",
    "syscall.setrlimit": "error __golang syscall_setrlimit(int resource, syscall_Rlimit *rlim)",
    "syscall.Shutdown": "error __golang syscall_Shutdown(int fd, int how)",
    "syscall.bind": "error __golang syscall_bind(int s, void *addr, unsigned int addrlen)",
    "syscall.connect": "error __golang syscall_connect(int s, void *addr, unsigned int addrlen)",
    "syscall.fstatat": "error __golang syscall_fstatat(int fd, string path, syscall_Stat_t *stat, int flags)",
    "syscall.getsockopt": "error __golang syscall_getsockopt(int s, int level, int name, void *val, unsigned int *vallen)",
    "syscall.setsockopt": "error __golang syscall_setsockopt(int s, int level, int name, void *val, uintptr vallen)",
    "syscall.getpeername": "error __golang syscall_getpeername(int fd, syscall_RawSockaddrAny *rsa, unsigned int *addrlen)",
    "syscall.getsockname": "error __golang syscall_getsockname(int fd, syscall_RawSockaddrAny *rsa, unsigned int *addrlen)",
    "syscall.sendto": "error __golang syscall_sendto(int s, _slice_uint8 buf, int flags, void *to, unsigned int addrlen)",
    "syscall.rawVforkSyscall": "void __golang syscall_rawVforkSyscall()",
    "syscall.rawSyscallNoError": "void __golang syscall_rawSyscallNoError()",
    "syscall._ptr_Errno.Error": "string_0 __golang syscall__ptr_Errno_Error(_ptr_syscall_Errno)",
    "syscall._ptr_Errno.Is": "bool __golang syscall__ptr_Errno_Is(_ptr_syscall_Errno, error_0)",
    "syscall._ptr_Errno.Temporary": "bool __golang syscall__ptr_Errno_Temporary(_ptr_syscall_Errno)",
    "syscall._ptr_Errno.Timeout": "bool __golang syscall__ptr_Errno_Timeout(_ptr_syscall_Errno)",
    "syscall._ptr_Signal.Signal": "void __golang syscall__ptr_Signal_Signal(_ptr_syscall_Signal)",
    "syscall._ptr_Signal.String": "string_0 __golang syscall__ptr_Signal_String(_ptr_syscall_Signal)",
    "syscall._ptr_WaitStatus.Continued": "bool __golang syscall__ptr_WaitStatus_Continued(_ptr_syscall_WaitStatus)",
    "syscall._ptr_WaitStatus.CoreDump": "bool __golang syscall__ptr_WaitStatus_CoreDump(_ptr_syscall_WaitStatus)",
    "syscall._ptr_WaitStatus.ExitStatus": "int_0 __golang syscall__ptr_WaitStatus_ExitStatus(_ptr_syscall_WaitStatus)",
    "syscall._ptr_WaitStatus.Exited": "bool __golang syscall__ptr_WaitStatus_Exited(_ptr_syscall_WaitStatus)",
    "syscall._ptr_WaitStatus.Signal": "syscall_Signal __golang syscall__ptr_WaitStatus_Signal(_ptr_syscall_WaitStatus)",
    "syscall._ptr_WaitStatus.Signaled": "bool __golang syscall__ptr_WaitStatus_Signaled(_ptr_syscall_WaitStatus)",
    "syscall._ptr_WaitStatus.StopSignal": "syscall_Signal __golang syscall__ptr_WaitStatus_StopSignal(_ptr_syscall_WaitStatus)",
    "syscall._ptr_WaitStatus.Stopped": "bool __golang syscall__ptr_WaitStatus_Stopped(_ptr_syscall_WaitStatus)",
    "syscall._ptr_WaitStatus.TrapCause": "int_0 __golang syscall__ptr_WaitStatus_TrapCause(_ptr_syscall_WaitStatus)",
    "time.appendInt": "_slice_uint8 __golang time_appendInt(_slice_uint8 b, int x, int width)",
    "time.appendNano": "_slice_uint8 __golang time_appendNano(_slice_uint8 b, int nanosec, int std)",
    "time.Time.String": "string_0 __golang time_Time_String(time_Time_0)",
    "time.Time.GoString": "string_0 __golang time_Time_GoString(time_Time_0)",
    "time.Time.Format": "string_0 __golang time_Time_Format(time_Time_0, string_0)",
    "time.Time.AppendFormat": "_slice_uint8_0 __golang time_Time_AppendFormat(time_Time_0, _slice_uint8_0, string_0)",
    "time.Time.appendFormat": "_slice_uint8_0 __golang time_Time_appendFormat(time_Time_0, _slice_uint8_0, string_0)",
    "time.quote": "string __golang time_quote(string s)",
    "time._ptr_ParseError.Error": "string_0 __golang time__ptr_ParseError_Error(_ptr_time_ParseError)",
    "time.parseSignedOffset": "int __golang time_parseSignedOffset(string value)",
    "time.Time.appendFormatRFC3339": "_slice_uint8 __golang time_Time_appendFormatRFC3339(time_Time t, _slice_uint8 b, bool nanos)",
    "time.when": "int64 __golang time_when(__int64 d)",
    "time._ptr_Timer.Stop": "bool __golang time__ptr_Timer_Stop(_ptr_time_Timer)",
    "time.NewTimer": "time_Timer *__golang time_NewTimer(__int64 d)",
    "time._ptr_Timer.Reset": "bool __golang time__ptr_Timer_Reset(_ptr_time_Timer, time_Duration)",
    "time.sendTime": "void __golang time_sendTime(interface_ c, uintptr seq)",
    "time.AfterFunc": "time_Timer *__golang time_AfterFunc(__int64 d, func f)",
    "time.goFunc": "void __golang time_goFunc(interface_ arg, uintptr seq)",
    "time.closefd": "void __golang time_closefd(uintptr fd)",
    "time.preadn": "error __golang time_preadn(uintptr fd, _slice_uint8 buf, int off)",
    "time.NewTicker": "time_Ticker *__golang time_NewTicker(__int64 d)",
    "time._ptr_Ticker.Stop": "void __golang time__ptr_Ticker_Stop(_ptr_time_Ticker)",
    "time._ptr_Time.addSec": "void __golang time__ptr_Time_addSec(_ptr_time_Time, int64_0)",
    "time.Time.After": "bool __golang time_Time_After(time_Time_0, time_Time_0)",
    "time.Time.Before": "bool __golang time_Time_Before(time_Time_0, time_Time_0)",
    "time.Time.Compare": "int_0 __golang time_Time_Compare(time_Time_0, time_Time_0)",
    "time.Time.Equal": "bool __golang time_Time_Equal(time_Time_0, time_Time_0)",
    "time.Month.String": "string_0 __golang time_Month_String(time_Month)",
    "time.Weekday.String": "string_0 __golang time_Weekday_String(time_Weekday)",
    "time.Time.IsZero": "bool __golang time_Time_IsZero(time_Time_0)",
    "time.Time.abs": "uint64_0 __golang time_Time_abs(time_Time_0)",
    "time.Time.Year": "int_0 __golang time_Time_Year(time_Time_0)",
    "time.Time.Month": "time_Month __golang time_Time_Month(time_Time_0)",
    "time.Time.Day": "int_0 __golang time_Time_Day(time_Time_0)",
    "time.Time.Weekday": "time_Weekday __golang time_Time_Weekday(time_Time_0)",
    "time.Time.Hour": "int_0 __golang time_Time_Hour(time_Time_0)",
    "time.Time.Minute": "int_0 __golang time_Time_Minute(time_Time_0)",
    "time.Time.Second": "int_0 __golang time_Time_Second(time_Time_0)",
    "time.Time.Nanosecond": "int_0 __golang time_Time_Nanosecond(time_Time_0)",
    "time.Time.YearDay": "int_0 __golang time_Time_YearDay(time_Time_0)",
    "time.Duration.String": "string_0 __golang time_Duration_String(time_Duration)",
    "time.Duration.format": "int __golang time_Duration_format(__int64 d, uint8 (*buf)[32])",
    "time.Duration.Microseconds": "int64_0 __golang time_Duration_Microseconds(time_Duration)",
    "time.Duration.Milliseconds": "int64_0 __golang time_Duration_Milliseconds(time_Duration)",
    "time.Duration.Seconds": "float64_0 __golang time_Duration_Seconds(time_Duration)",
    "time.Duration.Minutes": "float64_0 __golang time_Duration_Minutes(time_Duration)",
    "time.Duration.Hours": "float64_0 __golang time_Duration_Hours(time_Duration)",
    "time.Duration.Truncate": "time_Duration __golang time_Duration_Truncate(time_Duration, time_Duration)",
    "time.Duration.Round": "time_Duration __golang time_Duration_Round(time_Duration, time_Duration)",
    "time.Duration.Abs": "time_Duration __golang time_Duration_Abs(time_Duration)",
    "time.Time.Add": "time_Time_0 __golang time_Time_Add(time_Time_0, time_Duration)",
    "time.Time.Sub": "time_Duration __golang time_Time_Sub(time_Time_0, time_Time_0)",
    "time.Since": "__int64 __golang time_Since(time_Time t)",
    "time.Until": "__int64 __golang time_Until(time_Time t)",
    "time.Time.AddDate": "time_Time_0 __golang time_Time_AddDate(time_Time_0, int_0, int_0, int_0)",
    "time.Time.UTC": "time_Time_0 __golang time_Time_UTC(time_Time_0)",
    "time.Time.Local": "time_Time_0 __golang time_Time_Local(time_Time_0)",
    "time.Time.In": "time_Time_0 __golang time_Time_In(time_Time_0, _ptr_time_Location)",
    "time.Time.Location": "_ptr_time_Location __golang time_Time_Location(time_Time_0)",
    "time.Time.Unix": "int64_0 __golang time_Time_Unix(time_Time_0)",
    "time.Time.UnixMilli": "int64_0 __golang time_Time_UnixMilli(time_Time_0)",
    "time.Time.UnixMicro": "int64_0 __golang time_Time_UnixMicro(time_Time_0)",
    "time.Time.UnixNano": "int64_0 __golang time_Time_UnixNano(time_Time_0)",
    "time._ptr_Time.UnmarshalBinary": "error_0 __golang time__ptr_Time_UnmarshalBinary(_ptr_time_Time, _slice_uint8_0)",
    "time._ptr_Time.GobDecode": "error_0 __golang time__ptr_Time_GobDecode(_ptr_time_Time, _slice_uint8_0)",
    "time._ptr_Time.UnmarshalJSON": "error_0 __golang time__ptr_Time_UnmarshalJSON(_ptr_time_Time, _slice_uint8_0)",
    "time._ptr_Time.UnmarshalText": "error_0 __golang time__ptr_Time_UnmarshalText(_ptr_time_Time, _slice_uint8_0)",
    "time.Time.IsDST": "bool __golang time_Time_IsDST(time_Time_0)",
    "time.Date": "time_Time __golang time_Date(int year, __int64 month, int day, int hour, int min, int sec, int nsec, time_Location *loc)",
    "time.Time.Truncate": "time_Time_0 __golang time_Time_Truncate(time_Time_0, time_Duration)",
    "time.Time.Round": "time_Time_0 __golang time_Time_Round(time_Time_0, time_Duration)",
    "time._ptr_Location.String": "string_0 __golang time__ptr_Location_String(_ptr_time_Location)",
    "time.FixedZone": "time_Location *__golang time_FixedZone(string name, int offset)",
    "time._ptr_Location.lookupFirstZone": "int_0 __golang time__ptr_Location_lookupFirstZone(_ptr_time_Location)",
    "time.tzruleTime": "int __golang time_tzruleTime(int year, time_rule r, int off)",
    "time.fileSizeError.Error": "string_0 __golang time_fileSizeError_Error(time_fileSizeError_0)",
    "time.loadTzinfoFromZip.deferwrap1": "void __golang time_loadTzinfoFromZip_deferwrap1()",
    "time.readFile.deferwrap1": "void __golang time_readFile_deferwrap1()",
    "time.initLocal": "void __golang time_initLocal()",
    "time._ptr_Time.Add": "time_Time_0 __golang time__ptr_Time_Add(_ptr_time_Time, time_Duration)",
    "time._ptr_Time.AddDate": "time_Time_0 __golang time__ptr_Time_AddDate(_ptr_time_Time, int_0, int_0, int_0)",
    "time._ptr_Time.After": "bool __golang time__ptr_Time_After(_ptr_time_Time, time_Time_0)",
    "time._ptr_Time.AppendFormat": "_slice_uint8_0 __golang time__ptr_Time_AppendFormat(_ptr_time_Time, _slice_uint8_0, string_0)",
    "time._ptr_Time.Before": "bool __golang time__ptr_Time_Before(_ptr_time_Time, time_Time_0)",
    "time._ptr_Time.Compare": "int_0 __golang time__ptr_Time_Compare(_ptr_time_Time, time_Time_0)",
    "time._ptr_Time.Day": "int_0 __golang time__ptr_Time_Day(_ptr_time_Time)",
    "time._ptr_Time.Equal": "bool __golang time__ptr_Time_Equal(_ptr_time_Time, time_Time_0)",
    "time._ptr_Time.Format": "string_0 __golang time__ptr_Time_Format(_ptr_time_Time, string_0)",
    "time._ptr_Time.GoString": "string_0 __golang time__ptr_Time_GoString(_ptr_time_Time)",
    "time._ptr_Time.Hour": "int_0 __golang time__ptr_Time_Hour(_ptr_time_Time)",
    "time._ptr_Time.In": "time_Time_0 __golang time__ptr_Time_In(_ptr_time_Time, _ptr_time_Location)",
    "time._ptr_Time.IsDST": "bool __golang time__ptr_Time_IsDST(_ptr_time_Time)",
    "time._ptr_Time.IsZero": "bool __golang time__ptr_Time_IsZero(_ptr_time_Time)",
    "time._ptr_Time.Local": "time_Time_0 __golang time__ptr_Time_Local(_ptr_time_Time)",
    "time._ptr_Time.Location": "_ptr_time_Location __golang time__ptr_Time_Location(_ptr_time_Time)",
    "time._ptr_Time.Minute": "int_0 __golang time__ptr_Time_Minute(_ptr_time_Time)",
    "time._ptr_Time.Month": "time_Month __golang time__ptr_Time_Month(_ptr_time_Time)",
    "time._ptr_Time.Nanosecond": "int_0 __golang time__ptr_Time_Nanosecond(_ptr_time_Time)",
    "time._ptr_Time.Round": "time_Time_0 __golang time__ptr_Time_Round(_ptr_time_Time, time_Duration)",
    "time._ptr_Time.Second": "int_0 __golang time__ptr_Time_Second(_ptr_time_Time)",
    "time._ptr_Time.String": "string_0 __golang time__ptr_Time_String(_ptr_time_Time)",
    "time._ptr_Time.Sub": "time_Duration __golang time__ptr_Time_Sub(_ptr_time_Time, time_Time_0)",
    "time._ptr_Time.Truncate": "time_Time_0 __golang time__ptr_Time_Truncate(_ptr_time_Time, time_Duration)",
    "time._ptr_Time.UTC": "time_Time_0 __golang time__ptr_Time_UTC(_ptr_time_Time)",
    "time._ptr_Time.Unix": "int64_0 __golang time__ptr_Time_Unix(_ptr_time_Time)",
    "time._ptr_Time.UnixMicro": "int64_0 __golang time__ptr_Time_UnixMicro(_ptr_time_Time)",
    "time._ptr_Time.UnixMilli": "int64_0 __golang time__ptr_Time_UnixMilli(_ptr_time_Time)",
    "time._ptr_Time.UnixNano": "int64_0 __golang time__ptr_Time_UnixNano(_ptr_time_Time)",
    "time._ptr_Time.Weekday": "time_Weekday __golang time__ptr_Time_Weekday(_ptr_time_Time)",
    "time._ptr_Time.Year": "int_0 __golang time__ptr_Time_Year(_ptr_time_Time)",
    "time._ptr_Time.YearDay": "int_0 __golang time__ptr_Time_YearDay(_ptr_time_Time)",
    "time._ptr_Month.String": "string_0 __golang time__ptr_Month_String(_ptr_time_Month)",
    "time._ptr_Weekday.String": "string_0 __golang time__ptr_Weekday_String(_ptr_time_Weekday)",
    "time._ptr_Duration.Abs": "time_Duration __golang time__ptr_Duration_Abs(_ptr_time_Duration)",
    "time._ptr_Duration.Hours": "float64_0 __golang time__ptr_Duration_Hours(_ptr_time_Duration)",
    "time._ptr_Duration.Microseconds": "int64_0 __golang time__ptr_Duration_Microseconds(_ptr_time_Duration)",
    "time._ptr_Duration.Milliseconds": "int64_0 __golang time__ptr_Duration_Milliseconds(_ptr_time_Duration)",
    "time._ptr_Duration.Minutes": "float64_0 __golang time__ptr_Duration_Minutes(_ptr_time_Duration)",
    "time._ptr_Duration.Nanoseconds": "int64_0 __golang time__ptr_Duration_Nanoseconds(_ptr_time_Duration)",
    "time._ptr_Duration.Round": "time_Duration __golang time__ptr_Duration_Round(_ptr_time_Duration, time_Duration)",
    "time._ptr_Duration.Seconds": "float64_0 __golang time__ptr_Duration_Seconds(_ptr_time_Duration)",
    "time._ptr_Duration.String": "string_0 __golang time__ptr_Duration_String(_ptr_time_Duration)",
    "time._ptr_Duration.Truncate": "time_Duration __golang time__ptr_Duration_Truncate(_ptr_time_Duration, time_Duration)",
    "time._ptr_fileSizeError.Error": "string_0 __golang time__ptr_fileSizeError_Error(_ptr_time_fileSizeError)",
    "path.Clean": "string __golang path_Clean(string path)",
    "path.Join": "string __golang path_Join(_slice_string elem)",
    "path.Base": "string __golang path_Base(string path)",
    "io_fs.FormatFileInfo": "string __golang io_fs_FormatFileInfo(io_fs_FileInfo info)",
    "io_fs.FormatDirEntry": "string __golang io_fs_FormatDirEntry(io_fs_DirEntry dir)",
    "io_fs.ValidPath": "bool __golang io_fs_ValidPath(string name)",
    "io_fs.FileMode.String": "string_0 __golang io_fs_FileMode_String(fs_FileMode)",
    "io_fs.FileMode.IsDir": "bool __golang io_fs_FileMode_IsDir(fs_FileMode)",
    "io_fs.FileMode.IsRegular": "bool __golang io_fs_FileMode_IsRegular(fs_FileMode)",
    "io_fs.FileMode.Perm": "fs_FileMode __golang io_fs_FileMode_Perm(fs_FileMode)",
    "io_fs.FileMode.Type": "fs_FileMode __golang io_fs_FileMode_Type(fs_FileMode)",
    "io_fs._ptr_PathError.Error": "string_0 __golang io_fs__ptr_PathError_Error(_ptr_fs_PathError)",
    "io_fs._ptr_PathError.Unwrap": "error_0 __golang io_fs__ptr_PathError_Unwrap(_ptr_fs_PathError)",
    "io_fs._ptr_PathError.Timeout": "bool __golang io_fs__ptr_PathError_Timeout(_ptr_fs_PathError)",
    "io_fs.ReadDir.deferwrap1": "void __golang io_fs_ReadDir_deferwrap1()",
    "io_fs.dirInfo.IsDir": "bool __golang io_fs_dirInfo_IsDir(fs_dirInfo)",
    "io_fs.dirInfo.Type": "fs_FileMode __golang io_fs_dirInfo_Type(fs_dirInfo)",
    "io_fs.dirInfo.Name": "string_0 __golang io_fs_dirInfo_Name(fs_dirInfo)",
    "io_fs.dirInfo.String": "string_0 __golang io_fs_dirInfo_String(fs_dirInfo)",
    "io_fs.Stat.deferwrap1": "void __golang io_fs_Stat_deferwrap1()",
    "io_fs.walkDir": "error __golang io_fs_walkDir(io_fs_FS fsys, string name, io_fs_DirEntry d, io_fs_WalkDirFunc walkDirFn)",
    "io_fs.WalkDir": "error __golang io_fs_WalkDir(io_fs_FS fsys, string root, io_fs_WalkDirFunc fn)",
    "io_fs._ptr_FileMode.IsDir": "bool __golang io_fs__ptr_FileMode_IsDir(_ptr_fs_FileMode)",
    "io_fs._ptr_FileMode.IsRegular": "bool __golang io_fs__ptr_FileMode_IsRegular(_ptr_fs_FileMode)",
    "io_fs._ptr_FileMode.Perm": "fs_FileMode __golang io_fs__ptr_FileMode_Perm(_ptr_fs_FileMode)",
    "io_fs._ptr_FileMode.String": "string_0 __golang io_fs__ptr_FileMode_String(_ptr_fs_FileMode)",
    "io_fs._ptr_FileMode.Type": "fs_FileMode __golang io_fs__ptr_FileMode_Type(_ptr_fs_FileMode)",
    "io_fs._ptr_dirInfo.IsDir": "bool __golang io_fs__ptr_dirInfo_IsDir(_ptr_fs_dirInfo)",
    "io_fs._ptr_dirInfo.Name": "string_0 __golang io_fs__ptr_dirInfo_Name(_ptr_fs_dirInfo)",
    "io_fs._ptr_dirInfo.String": "string_0 __golang io_fs__ptr_dirInfo_String(_ptr_fs_dirInfo)",
    "io_fs._ptr_dirInfo.Type": "fs_FileMode __golang io_fs__ptr_dirInfo_Type(_ptr_fs_dirInfo)",
    "internal_testlog.PanicOnExit0.deferwrap1": "void __golang internal_testlog_PanicOnExit0_deferwrap1()",
    "internal_testlog.Getenv": "void __golang internal_testlog_Getenv(string name)",
    "internal_testlog.Open": "void __golang internal_testlog_Open(string name)",
    "internal_testlog.Stat": "void __golang internal_testlog_Stat(string name)",
    "internal_syscall_unix.Unlinkat": "error __golang internal_syscall_unix_Unlinkat(int dirfd, string path, int flags)",
    "internal_syscall_unix.Fstatat": "error __golang internal_syscall_unix_Fstatat(int dirfd, string path, syscall_Stat_t *stat, int flags)",
    "internal_poll.copyFileRange.deferwrap2": "void __golang internal_poll_copyFileRange_deferwrap2()",
    "internal_poll.copyFileRange.deferwrap1": "void __golang internal_poll_copyFileRange_deferwrap1()",
    "internal_poll.errNetClosing.Error": "string_0 __golang internal_poll_errNetClosing_Error(poll_errNetClosing)",
    "internal_poll.errNetClosing.Timeout": "bool __golang internal_poll_errNetClosing_Timeout(poll_errNetClosing)",
    "internal_poll.errNetClosing.Temporary": "bool __golang internal_poll_errNetClosing_Temporary(poll_errNetClosing)",
    "internal_poll._ptr_DeadlineExceededError.Error": "string_0 __golang internal_poll__ptr_DeadlineExceededError_Error(_ptr_poll_DeadlineExceededError)",
    "internal_poll._ptr_DeadlineExceededError.Timeout": "bool __golang internal_poll__ptr_DeadlineExceededError_Timeout(_ptr_poll_DeadlineExceededError)",
    "internal_poll._ptr_DeadlineExceededError.Temporary": "bool __golang internal_poll__ptr_DeadlineExceededError_Temporary(_ptr_poll_DeadlineExceededError)",
    "internal_poll._ptr_FD.Fsync": "error_0 __golang internal_poll__ptr_FD_Fsync(_ptr_poll_FD)",
    "internal_poll._ptr_FD.Fsync.deferwrap1": "void __golang internal_poll__ptr_FD_Fsync_deferwrap1()",
    "internal_poll._ptr_fdMutex.increfAndClose": "bool __golang internal_poll__ptr_fdMutex_increfAndClose(_ptr_poll_fdMutex)",
    "internal_poll._ptr_fdMutex.rwlock": "bool __golang internal_poll__ptr_fdMutex_rwlock(_ptr_poll_fdMutex, bool)",
    "internal_poll._ptr_fdMutex.rwunlock": "bool __golang internal_poll__ptr_fdMutex_rwunlock(_ptr_poll_fdMutex, bool)",
    "internal_poll._ptr_FD.decref": "error_0 __golang internal_poll__ptr_FD_decref(_ptr_poll_FD)",
    "internal_poll._ptr_FD.readUnlock": "void __golang internal_poll__ptr_FD_readUnlock(_ptr_poll_FD)",
    "internal_poll._ptr_FD.writeUnlock": "void __golang internal_poll__ptr_FD_writeUnlock(_ptr_poll_FD)",
    "internal_poll._ptr_pollDesc.prepare": "error __golang internal_poll__ptr_pollDesc_prepare(internal_poll_pollDesc *pd, int mode, bool isFile)",
    "internal_poll._ptr_pollDesc.wait": "error __golang internal_poll__ptr_pollDesc_wait(internal_poll_pollDesc *pd, int mode, bool isFile)",
    "internal_poll._ptr_FD.SetDeadline": "error_0 __golang internal_poll__ptr_FD_SetDeadline(_ptr_poll_FD, time_Time_0)",
    "internal_poll._ptr_FD.SetReadDeadline": "error_0 __golang internal_poll__ptr_FD_SetReadDeadline(_ptr_poll_FD, time_Time_0)",
    "internal_poll._ptr_FD.SetWriteDeadline": "error_0 __golang internal_poll__ptr_FD_SetWriteDeadline(_ptr_poll_FD, time_Time_0)",
    "internal_poll.setDeadlineImpl.deferwrap1": "void __golang internal_poll_setDeadlineImpl_deferwrap1()",
    "internal_poll._ptr_FD.Shutdown": "error_0 __golang internal_poll__ptr_FD_Shutdown(_ptr_poll_FD, int_0)",
    "internal_poll._ptr_FD.Shutdown.deferwrap1": "void __golang internal_poll__ptr_FD_Shutdown_deferwrap1()",
    "internal_poll._ptr_FD.Fchown": "error_0 __golang internal_poll__ptr_FD_Fchown(_ptr_poll_FD, int_0, int_0)",
    "internal_poll._ptr_FD.Fchown.deferwrap1": "void __golang internal_poll__ptr_FD_Fchown_deferwrap1()",
    "internal_poll._ptr_FD.Ftruncate": "error_0 __golang internal_poll__ptr_FD_Ftruncate(_ptr_poll_FD, int64_0)",
    "internal_poll._ptr_FD.Ftruncate.deferwrap1": "void __golang internal_poll__ptr_FD_Ftruncate_deferwrap1()",
    "internal_poll._ptr_FD.RawControl": "error_0 __golang internal_poll__ptr_FD_RawControl(_ptr_poll_FD, PTR_funcuintptr_0)",
    "internal_poll._ptr_FD.RawControl.deferwrap1": "void __golang internal_poll__ptr_FD_RawControl_deferwrap1()",
    "internal_poll._ptr_FD.Init": "error_0 __golang internal_poll__ptr_FD_Init(_ptr_poll_FD, string_0, bool)",
    "internal_poll._ptr_FD.destroy": "error_0 __golang internal_poll__ptr_FD_destroy(_ptr_poll_FD)",
    "internal_poll._ptr_FD.Close": "error_0 __golang internal_poll__ptr_FD_Close(_ptr_poll_FD)",
    "internal_poll._ptr_FD.SetBlocking": "error_0 __golang internal_poll__ptr_FD_SetBlocking(_ptr_poll_FD)",
    "internal_poll._ptr_FD.SetBlocking.deferwrap1": "void __golang internal_poll__ptr_FD_SetBlocking_deferwrap1()",
    "internal_poll._ptr_FD.Read.deferwrap1": "void __golang internal_poll__ptr_FD_Read_deferwrap1()",
    "internal_poll._ptr_FD.ReadFrom.deferwrap1": "void __golang internal_poll__ptr_FD_ReadFrom_deferwrap1()",
    "internal_poll._ptr_FD.ReadFromInet4.deferwrap1": "void __golang internal_poll__ptr_FD_ReadFromInet4_deferwrap1()",
    "internal_poll._ptr_FD.ReadFromInet6.deferwrap1": "void __golang internal_poll__ptr_FD_ReadFromInet6_deferwrap1()",
    "internal_poll._ptr_FD.ReadMsg.deferwrap1": "void __golang internal_poll__ptr_FD_ReadMsg_deferwrap1()",
    "internal_poll._ptr_FD.ReadMsgInet4.deferwrap1": "void __golang internal_poll__ptr_FD_ReadMsgInet4_deferwrap1()",
    "internal_poll._ptr_FD.ReadMsgInet6.deferwrap1": "void __golang internal_poll__ptr_FD_ReadMsgInet6_deferwrap1()",
    "internal_poll._ptr_FD.Write.deferwrap1": "void __golang internal_poll__ptr_FD_Write_deferwrap1()",
    "internal_poll._ptr_FD.Pwrite.deferwrap1": "void __golang internal_poll__ptr_FD_Pwrite_deferwrap1()",
    "internal_poll._ptr_FD.WriteToInet4.deferwrap1": "void __golang internal_poll__ptr_FD_WriteToInet4_deferwrap1()",
    "internal_poll._ptr_FD.WriteToInet6.deferwrap1": "void __golang internal_poll__ptr_FD_WriteToInet6_deferwrap1()",
    "internal_poll._ptr_FD.WriteTo.deferwrap1": "void __golang internal_poll__ptr_FD_WriteTo_deferwrap1()",
    "internal_poll._ptr_FD.WriteMsg.deferwrap1": "void __golang internal_poll__ptr_FD_WriteMsg_deferwrap1()",
    "internal_poll._ptr_FD.WriteMsgInet4.deferwrap1": "void __golang internal_poll__ptr_FD_WriteMsgInet4_deferwrap1()",
    "internal_poll._ptr_FD.WriteMsgInet6.deferwrap1": "void __golang internal_poll__ptr_FD_WriteMsgInet6_deferwrap1()",
    "internal_poll._ptr_FD.Accept.deferwrap1": "void __golang internal_poll__ptr_FD_Accept_deferwrap1()",
    "internal_poll._ptr_FD.Fchmod": "error_0 __golang internal_poll__ptr_FD_Fchmod(_ptr_poll_FD, uint32_0)",
    "internal_poll._ptr_FD.Fchmod.deferwrap1": "void __golang internal_poll__ptr_FD_Fchmod_deferwrap1()",
    "internal_poll._ptr_FD.Fstat": "error_0 __golang internal_poll__ptr_FD_Fstat(_ptr_poll_FD, _ptr_syscall_Stat_t)",
    "internal_poll._ptr_FD.Fstat.deferwrap1": "void __golang internal_poll__ptr_FD_Fstat_deferwrap1()",
    "internal_poll._ptr_FD.Dup.deferwrap1": "void __golang internal_poll__ptr_FD_Dup_deferwrap1()",
    "internal_poll._ptr_FD.WaitWrite": "error_0 __golang internal_poll__ptr_FD_WaitWrite(_ptr_poll_FD)",
    "internal_poll._ptr_FD.WriteOnce.deferwrap1": "void __golang internal_poll__ptr_FD_WriteOnce_deferwrap1()",
    "internal_poll._ptr_FD.RawRead": "error_0 __golang internal_poll__ptr_FD_RawRead(_ptr_poll_FD, PTR_funcuintptr_bool_0)",
    "internal_poll._ptr_FD.RawRead.deferwrap1": "void __golang internal_poll__ptr_FD_RawRead_deferwrap1()",
    "internal_poll._ptr_FD.RawWrite": "error_0 __golang internal_poll__ptr_FD_RawWrite(_ptr_poll_FD, PTR_funcuintptr_bool_0)",
    "internal_poll._ptr_FD.RawWrite.deferwrap1": "void __golang internal_poll__ptr_FD_RawWrite_deferwrap1()",
    "internal_poll.dupCloseOnExecOld.deferwrap1": "void __golang internal_poll_dupCloseOnExecOld_deferwrap1()",
    "internal_poll._ptr_FD.Fchdir": "error_0 __golang internal_poll__ptr_FD_Fchdir(_ptr_poll_FD)",
    "internal_poll._ptr_FD.Fchdir.deferwrap1": "void __golang internal_poll__ptr_FD_Fchdir_deferwrap1()",
    "internal_poll._ptr_FD.ReadDirent.deferwrap1": "void __golang internal_poll__ptr_FD_ReadDirent_deferwrap1()",
    "internal_poll._ptr_FD.Seek.deferwrap1": "void __golang internal_poll__ptr_FD_Seek_deferwrap1()",
    "internal_poll.SendFile.deferwrap1": "void __golang internal_poll_SendFile_deferwrap1()",
    "internal_poll._ptr_FD.SetsockoptInt": "error_0 __golang internal_poll__ptr_FD_SetsockoptInt(_ptr_poll_FD, int_0, int_0, int_0)",
    "internal_poll._ptr_FD.SetsockoptInt.deferwrap1": "void __golang internal_poll__ptr_FD_SetsockoptInt_deferwrap1()",
    "internal_poll._ptr_FD.SetsockoptInet4Addr": "error_0 __golang internal_poll__ptr_FD_SetsockoptInet4Addr(_ptr_poll_FD, int_0, int_0, _4_uint8)",
    "internal_poll._ptr_FD.SetsockoptInet4Addr.deferwrap1": "void __golang internal_poll__ptr_FD_SetsockoptInet4Addr_deferwrap1()",
    "internal_poll._ptr_FD.SetsockoptLinger": "error_0 __golang internal_poll__ptr_FD_SetsockoptLinger(_ptr_poll_FD, int_0, int_0, _ptr_syscall_Linger)",
    "internal_poll._ptr_FD.SetsockoptLinger.deferwrap1": "void __golang internal_poll__ptr_FD_SetsockoptLinger_deferwrap1()",
    "internal_poll._ptr_FD.GetsockoptInt.deferwrap1": "void __golang internal_poll__ptr_FD_GetsockoptInt_deferwrap1()",
    "internal_poll._ptr_FD.SetsockoptIPMreqn": "error_0 __golang internal_poll__ptr_FD_SetsockoptIPMreqn(_ptr_poll_FD, int_0, int_0, _ptr_syscall_IPMreqn)",
    "internal_poll._ptr_FD.SetsockoptIPMreqn.deferwrap1": "void __golang internal_poll__ptr_FD_SetsockoptIPMreqn_deferwrap1()",
    "internal_poll._ptr_FD.SetsockoptByte": "error_0 __golang internal_poll__ptr_FD_SetsockoptByte(_ptr_poll_FD, int_0, int_0, uint8_0)",
    "internal_poll._ptr_FD.SetsockoptByte.deferwrap1": "void __golang internal_poll__ptr_FD_SetsockoptByte_deferwrap1()",
    "internal_poll._ptr_FD.SetsockoptIPMreq": "error_0 __golang internal_poll__ptr_FD_SetsockoptIPMreq(_ptr_poll_FD, int_0, int_0, _ptr_syscall_IPMreq)",
    "internal_poll._ptr_FD.SetsockoptIPMreq.deferwrap1": "void __golang internal_poll__ptr_FD_SetsockoptIPMreq_deferwrap1()",
    "internal_poll._ptr_FD.SetsockoptIPv6Mreq": "error_0 __golang internal_poll__ptr_FD_SetsockoptIPv6Mreq(_ptr_poll_FD, int_0, int_0, _ptr_syscall_IPv6Mreq)",
    "internal_poll._ptr_FD.SetsockoptIPv6Mreq.deferwrap1": "void __golang internal_poll__ptr_FD_SetsockoptIPv6Mreq_deferwrap1()",
    "internal_poll.Splice.deferwrap1": "void __golang internal_poll_Splice_deferwrap1()",
    "internal_poll.spliceDrain.deferwrap1": "void __golang internal_poll_spliceDrain_deferwrap1()",
    "internal_poll.splicePump.deferwrap1": "void __golang internal_poll_splicePump_deferwrap1()",
    "internal_poll.newPoolPipe": "interface_ __golang internal_poll_newPoolPipe()",
    "internal_poll.putPipe": "void __golang internal_poll_putPipe(internal_poll_splicePipe *p)",
    "internal_poll.newPipe": "internal_poll_splicePipe *__golang internal_poll_newPipe()",
    "internal_poll.destroyPipe": "void __golang internal_poll_destroyPipe(internal_poll_splicePipe *p)",
    "internal_poll._ptr_FD.Writev.deferwrap1": "void __golang internal_poll__ptr_FD_Writev_deferwrap1()",
    "internal_poll._ptr_errNetClosing.Error": "string_0 __golang internal_poll__ptr_errNetClosing_Error(_ptr_poll_errNetClosing)",
    "internal_poll._ptr_errNetClosing.Temporary": "bool __golang internal_poll__ptr_errNetClosing_Temporary(_ptr_poll_errNetClosing)",
    "internal_poll._ptr_errNetClosing.Timeout": "bool __golang internal_poll__ptr_errNetClosing_Timeout(_ptr_poll_errNetClosing)",
    "os.ReadDir.deferwrap1": "void __golang os_ReadDir_deferwrap1()",
    "os.readIntLE": "uint64 __golang os_readIntLE(_slice_uint8 b, uintptr size)",
    "os.Expand": "string __golang os_Expand(string s, funcstring_string mapping)",
    "os.Setenv": "error __golang os_Setenv(string key, string value)",
    "os.Unsetenv": "error __golang os_Unsetenv(string key)",
    "os._ptr_SyscallError.Error": "string_0 __golang os__ptr_SyscallError_Error(_ptr_os_SyscallError)",
    "os._ptr_SyscallError.Unwrap": "error_0 __golang os__ptr_SyscallError_Unwrap(_ptr_os_SyscallError)",
    "os._ptr_SyscallError.Timeout": "bool __golang os__ptr_SyscallError_Timeout(_ptr_os_SyscallError)",
    "os.underlyingErrorIs": "bool __golang os_underlyingErrorIs(error err, error target)",
    "os._ptr_Process.Release": "error_0 __golang os__ptr_Process_Release(_ptr_os_Process)",
    "os._ptr_Process.Kill": "error_0 __golang os__ptr_Process_Kill(_ptr_os_Process)",
    "os._ptr_Process.Signal": "error_0 __golang os__ptr_Process_Signal(_ptr_os_Process, os_Signal_0)",
    "os._ptr_ProcessState.UserTime": "time_Duration __golang os__ptr_ProcessState_UserTime(_ptr_os_ProcessState)",
    "os._ptr_ProcessState.SystemTime": "time_Duration __golang os__ptr_ProcessState_SystemTime(_ptr_os_ProcessState)",
    "os._ptr_ProcessState.Exited": "bool __golang os__ptr_ProcessState_Exited(_ptr_os_ProcessState)",
    "os._ptr_ProcessState.Success": "bool __golang os__ptr_ProcessState_Success(_ptr_os_ProcessState)",
    "os._ptr_ProcessState.Sys": "interface__0 __golang os__ptr_ProcessState_Sys(_ptr_os_ProcessState)",
    "os._ptr_ProcessState.SysUsage": "interface__0 __golang os__ptr_ProcessState_SysUsage(_ptr_os_ProcessState)",
    "os._ptr_ProcessState.Pid": "int_0 __golang os__ptr_ProcessState_Pid(_ptr_os_ProcessState)",
    "os._ptr_ProcessState.String": "string_0 __golang os__ptr_ProcessState_String(_ptr_os_ProcessState)",
    "os._ptr_ProcessState.ExitCode": "int_0 __golang os__ptr_ProcessState_ExitCode(_ptr_os_ProcessState)",
    "os._ptr_Process.signal": "error_0 __golang os__ptr_Process_signal(_ptr_os_Process, os_Signal_0)",
    "os._ptr_Process.signal.deferwrap1": "void __golang os__ptr_Process_signal_deferwrap1()",
    "os._ptr_File.Name": "string_0 __golang os__ptr_File_Name(_ptr_os_File)",
    "os._ptr_LinkError.Error": "string_0 __golang os__ptr_LinkError_Error(_ptr_os_LinkError)",
    "os._ptr_LinkError.Unwrap": "error_0 __golang os__ptr_LinkError_Unwrap(_ptr_os_LinkError)",
    "os.Mkdir": "error __golang os_Mkdir(string name, unsigned int perm)",
    "os._ptr_File.wrapErr": "error __golang os__ptr_File_wrapErr(os_File *f, string op, error err)",
    "os._ptr_File.Chmod": "error_0 __golang os__ptr_File_Chmod(_ptr_os_File, fs_FileMode)",
    "os._ptr_File.SetDeadline": "error_0 __golang os__ptr_File_SetDeadline(_ptr_os_File, time_Time_0)",
    "os._ptr_File.SetReadDeadline": "error_0 __golang os__ptr_File_SetReadDeadline(_ptr_os_File, time_Time_0)",
    "os._ptr_File.SetWriteDeadline": "error_0 __golang os__ptr_File_SetWriteDeadline(_ptr_os_File, time_Time_0)",
    "os.ReadFile.deferwrap1": "void __golang os_ReadFile_deferwrap1()",
    "os.WriteFile": "error __golang os_WriteFile(string name, _slice_uint8 data, unsigned int perm)",
    "os._ptr_File.Close": "error_0 __golang os__ptr_File_Close(_ptr_os_File)",
    "os.chmod": "error __golang os_chmod(string name, unsigned int mode)",
    "os._ptr_File.chmod": "error_0 __golang os__ptr_File_chmod(_ptr_os_File, fs_FileMode)",
    "os._ptr_File.Chown": "error_0 __golang os__ptr_File_Chown(_ptr_os_File, int_0, int_0)",
    "os._ptr_File.Truncate": "error_0 __golang os__ptr_File_Truncate(_ptr_os_File, int64_0)",
    "os._ptr_File.Sync": "error_0 __golang os__ptr_File_Sync(_ptr_os_File)",
    "os.Chtimes": "error __golang os_Chtimes(string name, time_Time atime, time_Time mtime)",
    "os._ptr_File.setDeadline": "error_0 __golang os__ptr_File_setDeadline(_ptr_os_File, time_Time_0)",
    "os._ptr_File.setReadDeadline": "error_0 __golang os__ptr_File_setReadDeadline(_ptr_os_File, time_Time_0)",
    "os._ptr_File.setWriteDeadline": "error_0 __golang os__ptr_File_setWriteDeadline(_ptr_os_File, time_Time_0)",
    "os._ptr_File.Fd": "uintptr_0 __golang os__ptr_File_Fd(_ptr_os_File)",
    "os.NewFile": "os_File *__golang os_NewFile(uintptr fd, string name)",
    "os.newFile": "os_File *__golang os_newFile(int fd, string name, __int64 kind)",
    "os._ptr_file.close": "error_0 __golang os__ptr_file_close(_ptr_os_file)",
    "os.Remove": "error __golang os_Remove(string name)",
    "os.Symlink": "error __golang os_Symlink(string oldname, string newname)",
    "os._ptr_unixDirent.Name": "string_0 __golang os__ptr_unixDirent_Name(_ptr_os_unixDirent)",
    "os._ptr_unixDirent.IsDir": "bool __golang os__ptr_unixDirent_IsDir(_ptr_os_unixDirent)",
    "os._ptr_unixDirent.Type": "fs_FileMode __golang os__ptr_unixDirent_Type(_ptr_os_unixDirent)",
    "os._ptr_unixDirent.String": "string_0 __golang os__ptr_unixDirent_String(_ptr_os_unixDirent)",
    "os.MkdirAll": "error __golang os_MkdirAll(string path, unsigned int perm)",
    "os.RemoveAll": "error __golang os_RemoveAll(string path)",
    "os.Exit": "void __golang os_Exit(int code)",
    "os._ptr_rawConn.Control": "error_0 __golang os__ptr_rawConn_Control(_ptr_os_rawConn, PTR_funcuintptr_0)",
    "os._ptr_rawConn.Read": "error_0 __golang os__ptr_rawConn_Read(_ptr_os_rawConn, PTR_funcuintptr_bool_0)",
    "os._ptr_rawConn.Write": "error_0 __golang os__ptr_rawConn_Write(_ptr_os_rawConn, PTR_funcuintptr_bool_0)",
    "os.removeAll.deferwrap1": "void __golang os_removeAll_deferwrap1()",
    "os.removeAllFrom": "error __golang os_removeAllFrom(os_File *parent, string base)",
    "os.fillFileStatFromSys": "void __golang os_fillFileStatFromSys(os_fileStat *fs_0, string name)",
    "os.hostname.deferwrap1": "void __golang os_hostname_deferwrap1()",
    "os.nextRandom": "string __golang os_nextRandom()",
    "os._ptr_fileStat.Name": "string_0 __golang os__ptr_fileStat_Name(_ptr_os_fileStat)",
    "os._ptr_fileStat.IsDir": "bool __golang os__ptr_fileStat_IsDir(_ptr_os_fileStat)",
    "os._ptr_fileStat.Size": "int64_0 __golang os__ptr_fileStat_Size(_ptr_os_fileStat)",
    "os._ptr_fileStat.Mode": "fs_FileMode __golang os__ptr_fileStat_Mode(_ptr_os_fileStat)",
    "os._ptr_fileStat.ModTime": "time_Time_0 __golang os__ptr_fileStat_ModTime(_ptr_os_fileStat)",
    "os._ptr_fileStat.Sys": "interface__0 __golang os__ptr_fileStat_Sys(_ptr_os_fileStat)",
    "net.newUnixFile": "os_File *__golang net_newUnixFile(int fd, string name)",
    "os.fileWithoutReadFrom.Chdir": "error_0 __golang os_fileWithoutReadFrom_Chdir(os_fileWithoutReadFrom_0)",
    "os._ptr_fileWithoutReadFrom.Chdir": "error_0 __golang os__ptr_fileWithoutReadFrom_Chdir(_ptr_os_fileWithoutReadFrom)",
    "os.fileWithoutReadFrom.Chmod": "error_0 __golang os_fileWithoutReadFrom_Chmod(os_fileWithoutReadFrom_0, fs_FileMode)",
    "os._ptr_fileWithoutReadFrom.Chmod": "error_0 __golang os__ptr_fileWithoutReadFrom_Chmod(_ptr_os_fileWithoutReadFrom, fs_FileMode)",
    "os.fileWithoutReadFrom.Chown": "error_0 __golang os_fileWithoutReadFrom_Chown(os_fileWithoutReadFrom_0, int_0, int_0)",
    "os._ptr_fileWithoutReadFrom.Chown": "error_0 __golang os__ptr_fileWithoutReadFrom_Chown(_ptr_os_fileWithoutReadFrom, int_0, int_0)",
    "os.fileWithoutReadFrom.Close": "error_0 __golang os_fileWithoutReadFrom_Close(os_fileWithoutReadFrom_0)",
    "os._ptr_fileWithoutReadFrom.Close": "error_0 __golang os__ptr_fileWithoutReadFrom_Close(_ptr_os_fileWithoutReadFrom)",
    "os.fileWithoutReadFrom.Fd": "uintptr_0 __golang os_fileWithoutReadFrom_Fd(os_fileWithoutReadFrom_0)",
    "os._ptr_fileWithoutReadFrom.Fd": "uintptr_0 __golang os__ptr_fileWithoutReadFrom_Fd(_ptr_os_fileWithoutReadFrom)",
    "os.fileWithoutReadFrom.Name": "string_0 __golang os_fileWithoutReadFrom_Name(os_fileWithoutReadFrom_0)",
    "os._ptr_fileWithoutReadFrom.Name": "string_0 __golang os__ptr_fileWithoutReadFrom_Name(_ptr_os_fileWithoutReadFrom)",
    "os.fileWithoutReadFrom.SetDeadline": "error_0 __golang os_fileWithoutReadFrom_SetDeadline(os_fileWithoutReadFrom_0, time_Time_0)",
    "os._ptr_fileWithoutReadFrom.SetDeadline": "error_0 __golang os__ptr_fileWithoutReadFrom_SetDeadline(_ptr_os_fileWithoutReadFrom, time_Time_0)",
    "os.fileWithoutReadFrom.SetReadDeadline": "error_0 __golang os_fileWithoutReadFrom_SetReadDeadline(os_fileWithoutReadFrom_0, time_Time_0)",
    "os._ptr_fileWithoutReadFrom.SetReadDeadline": "error_0 __golang os__ptr_fileWithoutReadFrom_SetReadDeadline(_ptr_os_fileWithoutReadFrom, time_Time_0)",
    "os.fileWithoutReadFrom.SetWriteDeadline": "error_0 __golang os_fileWithoutReadFrom_SetWriteDeadline(os_fileWithoutReadFrom_0, time_Time_0)",
    "os._ptr_fileWithoutReadFrom.SetWriteDeadline": "error_0 __golang os__ptr_fileWithoutReadFrom_SetWriteDeadline(_ptr_os_fileWithoutReadFrom, time_Time_0)",
    "os.fileWithoutReadFrom.Sync": "error_0 __golang os_fileWithoutReadFrom_Sync(os_fileWithoutReadFrom_0)",
    "os._ptr_fileWithoutReadFrom.Sync": "error_0 __golang os__ptr_fileWithoutReadFrom_Sync(_ptr_os_fileWithoutReadFrom)",
    "os.fileWithoutReadFrom.Truncate": "error_0 __golang os_fileWithoutReadFrom_Truncate(os_fileWithoutReadFrom_0, int64_0)",
    "os._ptr_fileWithoutReadFrom.Truncate": "error_0 __golang os__ptr_fileWithoutReadFrom_Truncate(_ptr_os_fileWithoutReadFrom, int64_0)",
    "os.fileWithoutWriteTo.Chdir": "error_0 __golang os_fileWithoutWriteTo_Chdir(os_fileWithoutWriteTo_0)",
    "os._ptr_fileWithoutWriteTo.Chdir": "error_0 __golang os__ptr_fileWithoutWriteTo_Chdir(_ptr_os_fileWithoutWriteTo)",
    "os.fileWithoutWriteTo.Chmod": "error_0 __golang os_fileWithoutWriteTo_Chmod(os_fileWithoutWriteTo_0, fs_FileMode)",
    "os._ptr_fileWithoutWriteTo.Chmod": "error_0 __golang os__ptr_fileWithoutWriteTo_Chmod(_ptr_os_fileWithoutWriteTo, fs_FileMode)",
    "os.fileWithoutWriteTo.Chown": "error_0 __golang os_fileWithoutWriteTo_Chown(os_fileWithoutWriteTo_0, int_0, int_0)",
    "os._ptr_fileWithoutWriteTo.Chown": "error_0 __golang os__ptr_fileWithoutWriteTo_Chown(_ptr_os_fileWithoutWriteTo, int_0, int_0)",
    "os.fileWithoutWriteTo.Close": "error_0 __golang os_fileWithoutWriteTo_Close(os_fileWithoutWriteTo_0)",
    "os._ptr_fileWithoutWriteTo.Close": "error_0 __golang os__ptr_fileWithoutWriteTo_Close(_ptr_os_fileWithoutWriteTo)",
    "os.fileWithoutWriteTo.Fd": "uintptr_0 __golang os_fileWithoutWriteTo_Fd(os_fileWithoutWriteTo_0)",
    "os._ptr_fileWithoutWriteTo.Fd": "uintptr_0 __golang os__ptr_fileWithoutWriteTo_Fd(_ptr_os_fileWithoutWriteTo)",
    "os.fileWithoutWriteTo.Name": "string_0 __golang os_fileWithoutWriteTo_Name(os_fileWithoutWriteTo_0)",
    "os._ptr_fileWithoutWriteTo.Name": "string_0 __golang os__ptr_fileWithoutWriteTo_Name(_ptr_os_fileWithoutWriteTo)",
    "os.fileWithoutWriteTo.SetDeadline": "error_0 __golang os_fileWithoutWriteTo_SetDeadline(os_fileWithoutWriteTo_0, time_Time_0)",
    "os._ptr_fileWithoutWriteTo.SetDeadline": "error_0 __golang os__ptr_fileWithoutWriteTo_SetDeadline(_ptr_os_fileWithoutWriteTo, time_Time_0)",
    "os.fileWithoutWriteTo.SetReadDeadline": "error_0 __golang os_fileWithoutWriteTo_SetReadDeadline(os_fileWithoutWriteTo_0, time_Time_0)",
    "os._ptr_fileWithoutWriteTo.SetReadDeadline": "error_0 __golang os__ptr_fileWithoutWriteTo_SetReadDeadline(_ptr_os_fileWithoutWriteTo, time_Time_0)",
    "os.fileWithoutWriteTo.SetWriteDeadline": "error_0 __golang os_fileWithoutWriteTo_SetWriteDeadline(os_fileWithoutWriteTo_0, time_Time_0)",
    "os._ptr_fileWithoutWriteTo.SetWriteDeadline": "error_0 __golang os__ptr_fileWithoutWriteTo_SetWriteDeadline(_ptr_os_fileWithoutWriteTo, time_Time_0)",
    "os.fileWithoutWriteTo.Sync": "error_0 __golang os_fileWithoutWriteTo_Sync(os_fileWithoutWriteTo_0)",
    "os._ptr_fileWithoutWriteTo.Sync": "error_0 __golang os__ptr_fileWithoutWriteTo_Sync(_ptr_os_fileWithoutWriteTo)",
    "os.fileWithoutWriteTo.Truncate": "error_0 __golang os_fileWithoutWriteTo_Truncate(os_fileWithoutWriteTo_0, int64_0)",
    "os._ptr_fileWithoutWriteTo.Truncate": "error_0 __golang os__ptr_fileWithoutWriteTo_Truncate(_ptr_os_fileWithoutWriteTo, int64_0)",
    "fmt.Errorf": "error __golang fmt_Errorf(string format, _slice_interface_ a)",
    "fmt._ptr_wrapError.Error": "string_0 __golang fmt__ptr_wrapError_Error(_ptr_fmt_wrapError)",
    "fmt._ptr_wrapError.Unwrap": "error_0 __golang fmt__ptr_wrapError_Unwrap(_ptr_fmt_wrapError)",
    "fmt._ptr_wrapErrors.Error": "string_0 __golang fmt__ptr_wrapErrors_Error(_ptr_fmt_wrapErrors)",
    "fmt._ptr_wrapErrors.Unwrap": "_slice_error_0 __golang fmt__ptr_wrapErrors_Unwrap(_ptr_fmt_wrapErrors)",
    "fmt._ptr_fmt.writePadding": "void __golang fmt__ptr_fmt_writePadding(_ptr_fmt_fmt, int_0)",
    "fmt._ptr_fmt.pad": "void __golang fmt__ptr_fmt_pad(_ptr_fmt_fmt, _slice_uint8_0)",
    "fmt._ptr_fmt.padString": "void __golang fmt__ptr_fmt_padString(_ptr_fmt_fmt, string_0)",
    "fmt._ptr_fmt.fmtBoolean": "void __golang fmt__ptr_fmt_fmtBoolean(_ptr_fmt_fmt, bool)",
    "fmt._ptr_fmt.fmtUnicode": "void __golang fmt__ptr_fmt_fmtUnicode(_ptr_fmt_fmt, uint64_0)",
    "fmt._ptr_fmt.fmtInteger": "void __golang fmt__ptr_fmt_fmtInteger(fmt_fmt *f, uint64 u, int base, bool isSigned, int32 verb, string digits)",
    "fmt._ptr_fmt.truncate": "_slice_uint8_0 __golang fmt__ptr_fmt_truncate(_ptr_fmt_fmt, _slice_uint8_0)",
    "fmt._ptr_fmt.fmtS": "void __golang fmt__ptr_fmt_fmtS(_ptr_fmt_fmt, string_0)",
    "fmt._ptr_fmt.fmtBs": "void __golang fmt__ptr_fmt_fmtBs(_ptr_fmt_fmt, _slice_uint8_0)",
    "fmt._ptr_fmt.fmtSbx": "void __golang fmt__ptr_fmt_fmtSbx(fmt_fmt *f, string s, _slice_uint8 b, string digits)",
    "fmt._ptr_fmt.fmtQ": "void __golang fmt__ptr_fmt_fmtQ(_ptr_fmt_fmt, string_0)",
    "fmt._ptr_fmt.fmtC": "void __golang fmt__ptr_fmt_fmtC(_ptr_fmt_fmt, uint64_0)",
    "fmt._ptr_fmt.fmtQc": "void __golang fmt__ptr_fmt_fmtQc(_ptr_fmt_fmt, uint64_0)",
    "fmt._ptr_fmt.fmtFloat": "void __golang fmt__ptr_fmt_fmtFloat(fmt_fmt *f, float64 v, int size, int32 verb, int prec)",
    "fmt.newPrinter": "fmt_pp *__golang fmt_newPrinter()",
    "fmt._ptr_pp.free": "void __golang fmt__ptr_pp_free(_ptr_fmt_pp)",
    "fmt._ptr_pp.Flag": "bool __golang fmt__ptr_pp_Flag(_ptr_fmt_pp, int_0)",
    "fmt.Sprintf": "string __golang fmt_Sprintf(string format, _slice_interface_ a)",
    "fmt.Appendf": "_slice_uint8 __golang fmt_Appendf(_slice_uint8 b, string format, _slice_interface_ a)",
    "fmt.Sprint": "string __golang fmt_Sprint(_slice_interface_ a)",
    "fmt.Append": "_slice_uint8 __golang fmt_Append(_slice_uint8 b, _slice_interface_ a)",
    "fmt.Sprintln": "string __golang fmt_Sprintln(_slice_interface_ a)",
    "fmt.Appendln": "_slice_uint8 __golang fmt_Appendln(_slice_uint8 b, _slice_interface_ a)",
    "fmt.getField": "reflect_Value __golang fmt_getField(reflect_Value v, int i)",
    "fmt._ptr_pp.unknownType": "void __golang fmt__ptr_pp_unknownType(_ptr_fmt_pp, reflect_Value_0)",
    "fmt._ptr_pp.badVerb": "void __golang fmt__ptr_pp_badVerb(_ptr_fmt_pp, int32_0)",
    "fmt._ptr_pp.fmtBool": "void __golang fmt__ptr_pp_fmtBool(fmt_pp *p, bool v, int32 verb)",
    "fmt._ptr_pp.fmt0x64": "void __golang fmt__ptr_pp_fmt0x64(fmt_pp *p, uint64 v, bool leading0x)",
    "fmt._ptr_pp.fmtInteger": "void __golang fmt__ptr_pp_fmtInteger(fmt_pp *p, uint64 v, bool isSigned, int32 verb)",
    "fmt._ptr_pp.fmtFloat": "void __golang fmt__ptr_pp_fmtFloat(fmt_pp *p, float64 v, int size, int32 verb)",
    "fmt._ptr_pp.fmtComplex": "void __golang fmt__ptr_pp_fmtComplex(fmt_pp *p, complex128 v, int size, int32 verb)",
    "fmt._ptr_pp.fmtString": "void __golang fmt__ptr_pp_fmtString(fmt_pp *p, string v, int32 verb)",
    "fmt._ptr_pp.fmtBytes": "void __golang fmt__ptr_pp_fmtBytes(fmt_pp *p, _slice_uint8 v, int32 verb, string typeString)",
    "fmt._ptr_pp.fmtPointer": "void __golang fmt__ptr_pp_fmtPointer(fmt_pp *p, reflect_Value value, int32 verb)",
    "fmt._ptr_pp.catchPanic": "void __golang fmt__ptr_pp_catchPanic(fmt_pp *p, interface_ arg, int32 verb, string method)",
    "fmt._ptr_pp.handleMethods": "bool __golang fmt__ptr_pp_handleMethods(_ptr_fmt_pp, int32_0)",
    "fmt._ptr_pp.handleMethods.deferwrap4": "void __golang fmt__ptr_pp_handleMethods_deferwrap4()",
    "fmt._ptr_pp.handleMethods.deferwrap3": "void __golang fmt__ptr_pp_handleMethods_deferwrap3()",
    "fmt._ptr_pp.handleMethods.deferwrap2": "void __golang fmt__ptr_pp_handleMethods_deferwrap2()",
    "fmt._ptr_pp.handleMethods.deferwrap1": "void __golang fmt__ptr_pp_handleMethods_deferwrap1()",
    "fmt._ptr_pp.printArg": "void __golang fmt__ptr_pp_printArg(fmt_pp *p, interface_ arg, int32 verb)",
    "fmt._ptr_pp.printValue": "void __golang fmt__ptr_pp_printValue(fmt_pp *p, reflect_Value value, int32 verb, int depth)",
    "fmt._ptr_pp.badArgNum": "void __golang fmt__ptr_pp_badArgNum(_ptr_fmt_pp, int32_0)",
    "fmt._ptr_pp.missingArg": "void __golang fmt__ptr_pp_missingArg(_ptr_fmt_pp, int32_0)",
    "fmt._ptr_pp.doPrintf": "void __golang fmt__ptr_pp_doPrintf(fmt_pp *p, string format, _slice_interface_ a)",
    "fmt._ptr_pp.doPrint": "void __golang fmt__ptr_pp_doPrint(fmt_pp *p, _slice_interface_ a)",
    "fmt._ptr_pp.doPrintln": "void __golang fmt__ptr_pp_doPrintln(fmt_pp *p, _slice_interface_ a)",
    "fmt._ptr_ss.getRune": "int32_0 __golang fmt__ptr_ss_getRune(_ptr_fmt_ss)",
    "fmt._ptr_ss.UnreadRune": "error_0 __golang fmt__ptr_ss_UnreadRune(_ptr_fmt_ss)",
    "fmt.notSpace": "bool __golang fmt_notSpace(int32 r)",
    "fmt._ptr_readRune.UnreadRune": "error_0 __golang fmt__ptr_readRune_UnreadRune(_ptr_fmt_readRune)",
    "fmt._ptr_ss.free": "void __golang fmt__ptr_ss_free(fmt_ss *s, fmt_ssave old)",
    "fmt._ptr_ss.SkipSpace": "void __golang fmt__ptr_ss_SkipSpace(_ptr_fmt_ss)",
    "fmt._ptr_ss.token": "_slice_uint8 __golang fmt__ptr_ss_token(fmt_ss *s, bool skipSpace, funcint32_bool f)",
    "fmt._ptr_ss.consume": "bool __golang fmt__ptr_ss_consume(fmt_ss *s, string ok, bool accept)",
    "fmt._ptr_ss.peek": "bool __golang fmt__ptr_ss_peek(_ptr_fmt_ss, string_0)",
    "fmt._ptr_ss.notEOF": "void __golang fmt__ptr_ss_notEOF(_ptr_fmt_ss)",
    "fmt._ptr_ss.scanBool": "bool __golang fmt__ptr_ss_scanBool(_ptr_fmt_ss, int32_0)",
    "fmt._ptr_ss.scanNumber": "string __golang fmt__ptr_ss_scanNumber(fmt_ss *s, string digits, bool haveDigits)",
    "fmt._ptr_ss.scanRune": "int64 __golang fmt__ptr_ss_scanRune(fmt_ss *s, int bitSize)",
    "fmt._ptr_ss.scanInt": "int64 __golang fmt__ptr_ss_scanInt(fmt_ss *s, int32 verb, int bitSize)",
    "fmt._ptr_ss.scanUint": "uint64 __golang fmt__ptr_ss_scanUint(fmt_ss *s, int32 verb, int bitSize)",
    "fmt._ptr_ss.floatToken": "string_0 __golang fmt__ptr_ss_floatToken(_ptr_fmt_ss)",
    "fmt._ptr_ss.convertFloat": "float64 __golang fmt__ptr_ss_convertFloat(fmt_ss *s, string str, int n)",
    "fmt._ptr_ss.scanComplex": "complex128 __golang fmt__ptr_ss_scanComplex(fmt_ss *s, int32 verb, int n)",
    "fmt._ptr_ss.convertString": "string __golang fmt__ptr_ss_convertString(fmt_ss *s, int32 verb)",
    "fmt._ptr_ss.quotedString": "string_0 __golang fmt__ptr_ss_quotedString(_ptr_fmt_ss)",
    "fmt._ptr_ss.hexString": "string_0 __golang fmt__ptr_ss_hexString(_ptr_fmt_ss)",
    "fmt._ptr_ss.scanPercent": "void __golang fmt__ptr_ss_scanPercent(_ptr_fmt_ss)",
    "fmt._ptr_ss.scanOne": "void __golang fmt__ptr_ss_scanOne(fmt_ss *s, int32 verb, interface_ arg)",
    "fmt.errorHandler": "void __golang fmt_errorHandler(error *errp)",
    "fmt._ptr_ss.doScan.deferwrap1": "void __golang fmt__ptr_ss_doScan_deferwrap1()",
    "fmt._ptr_ss.advance": "int_0 __golang fmt__ptr_ss_advance(_ptr_fmt_ss, string_0)",
    "fmt._ptr_ss.doScanf.deferwrap1": "void __golang fmt__ptr_ss_doScanf_deferwrap1()",
    "internal_bisect._ptr_atomicPointerDedup.Load": "_ptr_bisect_dedup __golang internal_bisect__ptr_atomicPointerDedup_Load(_ptr_bisect_atomicPointerDedup)",
    "internal_bisect._ptr_atomicPointerDedup.CompareAndSwap": "bool __golang internal_bisect__ptr_atomicPointerDedup_CompareAndSwap(_ptr_bisect_atomicPointerDedup, _ptr_bisect_dedup, _ptr_bisect_dedup)",
    "internal_bisect._ptr_Matcher.MarkerOnly": "bool __golang internal_bisect__ptr_Matcher_MarkerOnly(_ptr_bisect_Matcher)",
    "internal_bisect._ptr_Matcher.ShouldEnable": "bool __golang internal_bisect__ptr_Matcher_ShouldEnable(_ptr_bisect_Matcher, uint64_0)",
    "internal_bisect._ptr_Matcher.ShouldPrint": "bool __golang internal_bisect__ptr_Matcher_ShouldPrint(_ptr_bisect_Matcher, uint64_0)",
    "internal_bisect._ptr_Matcher.FileLine": "bool __golang internal_bisect__ptr_Matcher_FileLine(_ptr_bisect_Matcher, bisect_Writer, string_0, int_0)",
    "internal_bisect._ptr_Matcher.fileLine": "bool __golang internal_bisect__ptr_Matcher_fileLine(_ptr_bisect_Matcher, bisect_Writer, string_0, int_0)",
    "internal_bisect.printFileLine": "error __golang internal_bisect_printFileLine(internal_bisect_Writer w, uint64 h, string file, int line)",
    "internal_bisect._ptr_Matcher.Stack": "bool __golang internal_bisect__ptr_Matcher_Stack(_ptr_bisect_Matcher, bisect_Writer)",
    "internal_bisect._ptr_Matcher.stack": "bool __golang internal_bisect__ptr_Matcher_stack(_ptr_bisect_Matcher, bisect_Writer)",
    "internal_bisect.PrintMarker": "error __golang internal_bisect_PrintMarker(internal_bisect_Writer w, uint64 h)",
    "internal_bisect.printStack": "error __golang internal_bisect_printStack(internal_bisect_Writer w, uint64 h, _slice_uintptr stk)",
    "internal_bisect.Hash": "uint64 __golang internal_bisect_Hash(_slice_interface_ data)",
    "internal_bisect._ptr_parseError.Error": "string_0 __golang internal_bisect__ptr_parseError_Error(_ptr_bisect_parseError)",
    "internal_bisect._ptr_dedup.seen": "bool __golang internal_bisect__ptr_dedup_seen(_ptr_bisect_dedup, uint64_0)",
    "internal_bisect._ptr_dedup.seenLossy": "bool __golang internal_bisect__ptr_dedup_seenLossy(_ptr_bisect_dedup, uint64_0)",
    "internal_godebug._ptr_Setting.IncNonDefault": "void __golang internal_godebug__ptr_Setting_IncNonDefault(_ptr_godebug_Setting)",
    "internal_godebug._ptr_Setting.register": "void __golang internal_godebug__ptr_Setting_register(_ptr_godebug_Setting)",
    "internal_godebug._ptr_Setting.Value": "string_0 __golang internal_godebug__ptr_Setting_Value(_ptr_godebug_Setting)",
    "internal_godebug.lookup": "internal_godebug_setting *__golang internal_godebug_lookup(string name)",
    "internal_godebug.newIncNonDefault": "func __golang internal_godebug_newIncNonDefault(string name)",
    "internal_godebug.update": "void __golang internal_godebug_update(string def, string env)",
    "internal_godebug.update.deferwrap1": "void __golang internal_godebug_update_deferwrap1()",
    "internal_godebug.parse": "void __golang internal_godebug_parse(map_string_bool did, string s)",
    "sync_atomic._ptr_Pointer_internal_godebug.value_.CompareAndSwap": "bool __golang sync_atomic__ptr_Pointer_internal_godebug_value__CompareAndSwap(_ptr_atomic_Pointer_internal_godebug_value_, _ptr_godebug_value, _ptr_godebug_value)",
    "sync_atomic._ptr_Pointer_internal_godebug.value_.Swap": "_ptr_godebug_value __golang sync_atomic__ptr_Pointer_internal_godebug_value__Swap(_ptr_atomic_Pointer_internal_godebug_value_, _ptr_godebug_value)",
    "sync_atomic._ptr_Pointer_internal_godebug.value_.Store": "void __golang sync_atomic__ptr_Pointer_internal_godebug_value__Store(_ptr_atomic_Pointer_internal_godebug_value_, _ptr_godebug_value)",
    "sync_atomic._ptr_Pointer_internal_godebug.value_.Load": "_ptr_godebug_value __golang sync_atomic__ptr_Pointer_internal_godebug_value__Load(_ptr_atomic_Pointer_internal_godebug_value_)",
    "internal_godebug._ptr_Setting.IncNonDefault_fm": "void __golang internal_godebug__ptr_Setting_IncNonDefault_fm()",
    "sync_atomic._ptr_Uint64.Load_fm": "uint64 __golang sync_atomic__ptr_Uint64_Load_fm()",
    "internal_godebug._ptr_Setting.register_fm": "void __golang internal_godebug__ptr_Setting_register_fm()",
    "strings._ptr_Builder.String": "string_0 __golang strings__ptr_Builder_String(_ptr_strings_Builder)",
    "strings._ptr_Builder.Len": "int_0 __golang strings__ptr_Builder_Len(_ptr_strings_Builder)",
    "strings._ptr_Builder.Cap": "int_0 __golang strings__ptr_Builder_Cap(_ptr_strings_Builder)",
    "strings._ptr_Builder.Reset": "void __golang strings__ptr_Builder_Reset(_ptr_strings_Builder)",
    "strings._ptr_Builder.grow": "void __golang strings__ptr_Builder_grow(_ptr_strings_Builder, int_0)",
    "strings._ptr_Builder.Grow": "void __golang strings__ptr_Builder_Grow(_ptr_strings_Builder, int_0)",
    "strings._ptr_Builder.WriteByte": "error_0 __golang strings__ptr_Builder_WriteByte(_ptr_strings_Builder, uint8_0)",
    "strings._ptr_Reader.Len": "int_0 __golang strings__ptr_Reader_Len(_ptr_strings_Reader)",
    "strings._ptr_Reader.Size": "int64_0 __golang strings__ptr_Reader_Size(_ptr_strings_Reader)",
    "strings._ptr_Reader.UnreadRune": "error_0 __golang strings__ptr_Reader_UnreadRune(_ptr_strings_Reader)",
    "strings._ptr_Reader.Reset": "void __golang strings__ptr_Reader_Reset(_ptr_strings_Reader, string_0)",
    "strings._ptr_Replacer.build": "strings_replacer __golang strings__ptr_Replacer_build(strings_Replacer *b)",
    "strings._ptr_Replacer.Replace": "string_0 __golang strings__ptr_Replacer_Replace(_ptr_strings_Replacer, string_0)",
    "strings._ptr_trieNode.add": "void __golang strings__ptr_trieNode_add(strings_trieNode *t, string key, string val, int priority, strings_genericReplacer *r)",
    "strings.makeGenericReplacer": "strings_genericReplacer *__golang strings_makeGenericReplacer(_slice_string oldnew)",
    "strings._ptr_genericReplacer.Replace": "string_0 __golang strings__ptr_genericReplacer_Replace(_ptr_strings_genericReplacer, string_0)",
    "strings._ptr_singleStringReplacer.Replace": "string_0 __golang strings__ptr_singleStringReplacer_Replace(_ptr_strings_singleStringReplacer, string_0)",
    "strings._ptr_byteReplacer.Replace": "string_0 __golang strings__ptr_byteReplacer_Replace(_ptr_strings_byteReplacer, string_0)",
    "strings._ptr_byteStringReplacer.Replace": "string_0 __golang strings__ptr_byteStringReplacer_Replace(_ptr_strings_byteStringReplacer, string_0)",
    "strings.makeStringFinder": "strings_stringFinder *__golang strings_makeStringFinder(string pattern)",
    "strings.explode": "_slice_string __golang strings_explode(string s, int n)",
    "strings.Count": "int __golang strings_Count(string s, string substr)",
    "strings.LastIndex": "int __golang strings_LastIndex(string s, string substr)",
    "strings.IndexRune": "int __golang strings_IndexRune(string s, int32 r)",
    "strings.IndexAny": "int __golang strings_IndexAny(string s, string chars)",
    "strings.LastIndexAny": "int __golang strings_LastIndexAny(string s, string chars)",
    "strings.genSplit": "_slice_string __golang strings_genSplit(string s, string sep, int sepSave, int n)",
    "strings.Fields": "_slice_string __golang strings_Fields(string s)",
    "strings.FieldsFunc": "_slice_string __golang strings_FieldsFunc(string s, funcint32_bool f)",
    "strings.Join": "string __golang strings_Join(_slice_string elems, string sep)",
    "strings.Map": "string __golang strings_Map(funcint32_int32 mapping, string s)",
    "strings.Repeat": "string __golang strings_Repeat(string s, int count)",
    "strings.ToUpper": "string __golang strings_ToUpper(string s)",
    "strings.ToLower": "string __golang strings_ToLower(string s)",
    "strings.ToValidUTF8": "string __golang strings_ToValidUTF8(string s, string replacement)",
    "strings.isSeparator": "bool __golang strings_isSeparator(int32 r)",
    "strings.Title": "string __golang strings_Title(string s)",
    "strings.TrimLeftFunc": "string __golang strings_TrimLeftFunc(string s, funcint32_bool f)",
    "strings.TrimRightFunc": "string __golang strings_TrimRightFunc(string s, funcint32_bool f)",
    "strings.TrimFunc": "string __golang strings_TrimFunc(string s, funcint32_bool f)",
    "strings.IndexFunc": "int __golang strings_IndexFunc(string s, funcint32_bool f)",
    "strings.lastIndexFunc": "int __golang strings_lastIndexFunc(string s, funcint32_bool f, bool truth)",
    "strings.Trim": "string __golang strings_Trim(string s, string cutset)",
    "strings.TrimLeft": "string __golang strings_TrimLeft(string s, string cutset)",
    "strings.trimLeftUnicode": "string __golang strings_trimLeftUnicode(string s, string cutset)",
    "strings.TrimRight": "string __golang strings_TrimRight(string s, string cutset)",
    "strings.trimRightUnicode": "string __golang strings_trimRightUnicode(string s, string cutset)",
    "strings.TrimSpace": "string __golang strings_TrimSpace(string s)",
    "strings.TrimPrefix": "string __golang strings_TrimPrefix(string s, string prefix)",
    "strings.Replace": "string __golang strings_Replace(string s, string old, string new, int n)",
    "strings.EqualFold": "bool __golang strings_EqualFold(string s, string t)",
    "strings.Index": "int __golang strings_Index(string s, string substr)",
    "internal_bytealg.IndexRabinKarp_go.shape.string_": "int __golang internal_bytealg_IndexRabinKarp_go_shape_string_(internal_bytealg_IndexRabinKarp_go_shape_string_::_param1 s, internal_bytealg_IndexRabinKarp_go_shape_string_::_param1 sep)",
    "unicode.SpecialCase.ToTitle_fm": "int32 __golang unicode_SpecialCase_ToTitle_fm(int32 r)",
    "unicode.SpecialCase.ToLower_fm": "int32 __golang unicode_SpecialCase_ToLower_fm(int32 r)",
    "unicode.SpecialCase.ToUpper_fm": "int32 __golang unicode_SpecialCase_ToUpper_fm(int32 r)",
    "strings._ptr_Replacer.buildOnce_fm": "void __golang strings__ptr_Replacer_buildOnce_fm()",
    "bytes._ptr_Buffer.Bytes": "_slice_uint8_0 __golang bytes__ptr_Buffer_Bytes(_ptr_bytes_Buffer)",
    "bytes._ptr_Buffer.String": "string_0 __golang bytes__ptr_Buffer_String(_ptr_bytes_Buffer)",
    "bytes._ptr_Buffer.Len": "int_0 __golang bytes__ptr_Buffer_Len(_ptr_bytes_Buffer)",
    "bytes._ptr_Buffer.Cap": "int_0 __golang bytes__ptr_Buffer_Cap(_ptr_bytes_Buffer)",
    "bytes._ptr_Buffer.Available": "int_0 __golang bytes__ptr_Buffer_Available(_ptr_bytes_Buffer)",
    "bytes._ptr_Buffer.Truncate": "void __golang bytes__ptr_Buffer_Truncate(_ptr_bytes_Buffer, int_0)",
    "bytes._ptr_Buffer.Reset": "void __golang bytes__ptr_Buffer_Reset(_ptr_bytes_Buffer)",
    "bytes._ptr_Buffer.grow": "int_0 __golang bytes__ptr_Buffer_grow(_ptr_bytes_Buffer, int_0)",
    "bytes._ptr_Buffer.Grow": "void __golang bytes__ptr_Buffer_Grow(_ptr_bytes_Buffer, int_0)",
    "bytes._ptr_Buffer.WriteByte": "error_0 __golang bytes__ptr_Buffer_WriteByte(_ptr_bytes_Buffer, uint8_0)",
    "bytes._ptr_Buffer.Next": "_slice_uint8_0 __golang bytes__ptr_Buffer_Next(_ptr_bytes_Buffer, int_0)",
    "bytes._ptr_Buffer.UnreadRune": "error_0 __golang bytes__ptr_Buffer_UnreadRune(_ptr_bytes_Buffer)",
    "bytes._ptr_Buffer.UnreadByte": "error_0 __golang bytes__ptr_Buffer_UnreadByte(_ptr_bytes_Buffer)",
    "bytes.explode": "_slice__slice_uint8 __golang bytes_explode(_slice_uint8 s, int n)",
    "bytes.Count": "int __golang bytes_Count(_slice_uint8 s, _slice_uint8 sep)",
    "bytes.LastIndex": "int __golang bytes_LastIndex(_slice_uint8 s, _slice_uint8 sep)",
    "bytes.IndexRune": "int __golang bytes_IndexRune(_slice_uint8 s, int32 r)",
    "bytes.IndexAny": "int __golang bytes_IndexAny(_slice_uint8 s, string chars)",
    "bytes.LastIndexAny": "int __golang bytes_LastIndexAny(_slice_uint8 s, string chars)",
    "bytes.genSplit": "_slice__slice_uint8 __golang bytes_genSplit(_slice_uint8 s, _slice_uint8 sep, int sepSave, int n)",
    "bytes.Fields": "_slice__slice_uint8 __golang bytes_Fields(_slice_uint8 s)",
    "bytes.FieldsFunc": "_slice__slice_uint8 __golang bytes_FieldsFunc(_slice_uint8 s, funcint32_bool f)",
    "bytes.Join": "_slice_uint8 __golang bytes_Join(_slice__slice_uint8 s, _slice_uint8 sep)",
    "bytes.Map": "_slice_uint8 __golang bytes_Map(funcint32_int32 mapping, _slice_uint8 s)",
    "bytes.Repeat": "_slice_uint8 __golang bytes_Repeat(_slice_uint8 b, int count)",
    "bytes.ToUpper": "_slice_uint8 __golang bytes_ToUpper(_slice_uint8 s)",
    "bytes.ToLower": "_slice_uint8 __golang bytes_ToLower(_slice_uint8 s)",
    "bytes.ToValidUTF8": "_slice_uint8 __golang bytes_ToValidUTF8(_slice_uint8 s, _slice_uint8 replacement)",
    "bytes.isSeparator": "bool __golang bytes_isSeparator(int32 r)",
    "bytes.Title": "_slice_uint8 __golang bytes_Title(_slice_uint8 s)",
    "bytes.TrimRightFunc": "_slice_uint8 __golang bytes_TrimRightFunc(_slice_uint8 s, funcint32_bool f)",
    "bytes.TrimFunc": "_slice_uint8 __golang bytes_TrimFunc(_slice_uint8 s, funcint32_bool f)",
    "bytes.indexFunc": "int __golang bytes_indexFunc(_slice_uint8 s, funcint32_bool f, bool truth)",
    "bytes.lastIndexFunc": "int __golang bytes_lastIndexFunc(_slice_uint8 s, funcint32_bool f, bool truth)",
    "bytes.Trim": "_slice_uint8 __golang bytes_Trim(_slice_uint8 s, string cutset)",
    "bytes.TrimLeft": "_slice_uint8 __golang bytes_TrimLeft(_slice_uint8 s, string cutset)",
    "bytes.trimLeftUnicode": "_slice_uint8 __golang bytes_trimLeftUnicode(_slice_uint8 s, string cutset)",
    "bytes.TrimRight": "_slice_uint8 __golang bytes_TrimRight(_slice_uint8 s, string cutset)",
    "bytes.trimRightUnicode": "_slice_uint8 __golang bytes_trimRightUnicode(_slice_uint8 s, string cutset)",
    "bytes.TrimSpace": "_slice_uint8 __golang bytes_TrimSpace(_slice_uint8 s)",
    "bytes.Runes": "_slice_int32 __golang bytes_Runes(_slice_uint8 s)",
    "bytes.Replace": "void __golang bytes_Replace(_slice_uint8 s, int n, _slice_uint8 _r0, _slice_uint8 old, _slice_uint8 new)",
    "bytes.EqualFold": "bool __golang bytes_EqualFold(_slice_uint8 s, _slice_uint8 t)",
    "bytes.Index": "int __golang bytes_Index(_slice_uint8 s, _slice_uint8 sep)",
    "bytes._ptr_Reader.Len": "int_0 __golang bytes__ptr_Reader_Len(_ptr_bytes_Reader)",
    "bytes._ptr_Reader.Size": "int64_0 __golang bytes__ptr_Reader_Size(_ptr_bytes_Reader)",
    "bytes._ptr_Reader.UnreadRune": "error_0 __golang bytes__ptr_Reader_UnreadRune(_ptr_bytes_Reader)",
    "bytes._ptr_Reader.Reset": "void __golang bytes__ptr_Reader_Reset(_ptr_bytes_Reader, _slice_uint8_0)",
    "path_filepath.glob": "void __golang path_filepath_glob(_slice_string m, error e, string dir, string pattern, _slice_string matches)",
    "path_filepath.glob.deferwrap1": "void __golang path_filepath_glob_deferwrap1()",
    "path_filepath.Clean": "string __golang path_filepath_Clean(string path)",
    "path_filepath.unixIsLocal": "bool __golang path_filepath_unixIsLocal(string path)",
    "path_filepath.Base": "string __golang path_filepath_Base(string path)",
    "path_filepath.join": "string __golang path_filepath_join(_slice_string elem)",
    "runtime_cgo.set_crosscall2_0": "void __golang runtime_cgo_set_crosscall2_0()",
    "runtime_cgo.set_crosscall2": "void __golang runtime_cgo_set_crosscall2()",
    "os_user.buildUser": "os_user_User *__golang os_user_buildUser(os_user__Ctype_struct_passwd *pwd)",
    "os_user.buildGroup": "os_user_Group *__golang os_user_buildGroup(os_user__Ctype_struct_group *grp)",
    "os_user.bufferKind.initialSize": "unsigned __int64 __golang os_user_bufferKind_initialSize(int k)",
    "os_user.retryWithBuffer": "error __golang os_user_retryWithBuffer(int kind, func_slice_uint8_syscall_Errno f)",
    "os_user.UnknownUserIdError.Error": "string_0 __golang os_user_UnknownUserIdError_Error(user_UnknownUserIdError)",
    "os_user.UnknownGroupIdError.Error": "string_0 __golang os_user_UnknownGroupIdError_Error(user_UnknownGroupIdError)",
    "os_user._ptr_UnknownUserIdError.Error": "string_0 __golang os_user__ptr_UnknownUserIdError_Error(_ptr_user_UnknownUserIdError)",
    "os_user._ptr_UnknownGroupIdError.Error": "string_0 __golang os_user__ptr_UnknownGroupIdError_Error(_ptr_user_UnknownGroupIdError)",
    "archive_tar.headerError.Error": "string_0 __golang archive_tar_headerError_Error(tar_headerError)",
    "archive_tar._ptr_Header.FileInfo": "fs_FileInfo __golang archive_tar__ptr_Header_FileInfo(_ptr_tar_Header)",
    "archive_tar.headerFileInfo.Size": "int64_0 __golang archive_tar_headerFileInfo_Size(tar_headerFileInfo)",
    "archive_tar.headerFileInfo.IsDir": "bool __golang archive_tar_headerFileInfo_IsDir(tar_headerFileInfo)",
    "archive_tar.headerFileInfo.ModTime": "time_Time_0 __golang archive_tar_headerFileInfo_ModTime(tar_headerFileInfo)",
    "archive_tar.headerFileInfo.Sys": "interface__0 __golang archive_tar_headerFileInfo_Sys(tar_headerFileInfo)",
    "archive_tar.headerFileInfo.Name": "string_0 __golang archive_tar_headerFileInfo_Name(tar_headerFileInfo)",
    "archive_tar.headerFileInfo.Mode": "fs_FileMode __golang archive_tar_headerFileInfo_Mode(tar_headerFileInfo)",
    "archive_tar.headerFileInfo.String": "string_0 __golang archive_tar_headerFileInfo_String(tar_headerFileInfo)",
    "archive_tar.Format.String": "string_0 __golang archive_tar_Format_String(tar_Format)",
    "archive_tar._ptr_block.getFormat": "__int64 __golang archive_tar__ptr_block_getFormat(archive_tar_block *b)",
    "archive_tar._ptr_block.setFormat": "void __golang archive_tar__ptr_block_setFormat(archive_tar_block *b, __int64 format)",
    "archive_tar._ptr_Reader.handleSparseFile": "error __golang archive_tar__ptr_Reader_handleSparseFile(archive_tar_Reader *tr, archive_tar_Header *hdr, archive_tar_block *rawHdr)",
    "archive_tar.mergePAX": "error __golang archive_tar_mergePAX(archive_tar_Header *hdr, map_string_string paxHdrs)",
    "archive_tar.regFileReader.logicalRemaining": "int64_0 __golang archive_tar_regFileReader_logicalRemaining(tar_regFileReader)",
    "archive_tar.regFileReader.physicalRemaining": "int64_0 __golang archive_tar_regFileReader_physicalRemaining(tar_regFileReader)",
    "archive_tar.sparseFileReader.logicalRemaining": "int64_0 __golang archive_tar_sparseFileReader_logicalRemaining(tar_sparseFileReader)",
    "archive_tar.discard": "error __golang archive_tar_discard(io_Reader r, int64 n)",
    "archive_tar.statUnix": "error __golang archive_tar_statUnix(io_fs_FileInfo fi, archive_tar_Header *h)",
    "archive_tar._ptr_parser.parseString": "string __golang archive_tar__ptr_parser_parseString(archive_tar_parser *_p0, _slice_uint8 b)",
    "archive_tar._ptr_formatter.formatString": "void __golang archive_tar__ptr_formatter_formatString(archive_tar_formatter *f, _slice_uint8 b, string s)",
    "archive_tar._ptr_parser.parseNumeric": "int64 __golang archive_tar__ptr_parser_parseNumeric(archive_tar_parser *p, _slice_uint8 b)",
    "archive_tar._ptr_formatter.formatNumeric": "void __golang archive_tar__ptr_formatter_formatNumeric(archive_tar_formatter *f, _slice_uint8 b, int64 x)",
    "archive_tar._ptr_parser.parseOctal": "int64 __golang archive_tar__ptr_parser_parseOctal(archive_tar_parser *p, _slice_uint8 b)",
    "archive_tar._ptr_formatter.formatOctal": "void __golang archive_tar__ptr_formatter_formatOctal(archive_tar_formatter *f, _slice_uint8 b, int64 x)",
    "archive_tar.formatPAXTime": "string __golang archive_tar_formatPAXTime(time_Time ts)",
    "archive_tar.validPAXRecord": "bool __golang archive_tar_validPAXRecord(string k, string v)",
    "archive_tar._ptr_Writer.Flush": "error_0 __golang archive_tar__ptr_Writer_Flush(_ptr_tar_Writer)",
    "archive_tar._ptr_Writer.WriteHeader": "error_0 __golang archive_tar__ptr_Writer_WriteHeader(_ptr_tar_Writer, _ptr_tar_Header)",
    "archive_tar._ptr_Writer.writeUSTARHeader": "error_0 __golang archive_tar__ptr_Writer_writeUSTARHeader(_ptr_tar_Writer, _ptr_tar_Header)",
    "archive_tar._ptr_Writer.writePAXHeader": "error __golang archive_tar__ptr_Writer_writePAXHeader(archive_tar_Writer *tw, archive_tar_Header *hdr, map_string_string paxHdrs)",
    "archive_tar._ptr_Writer.writeGNUHeader": "error_0 __golang archive_tar__ptr_Writer_writeGNUHeader(_ptr_tar_Writer, _ptr_tar_Header)",
    "archive_tar._ptr_Writer.templateV7Plus": "archive_tar_block *__golang archive_tar__ptr_Writer_templateV7Plus(archive_tar_Writer *tw, archive_tar_Header *hdr, archive_tar_stringFormatter fmtStr, archive_tar_numberFormatter fmtNum)",
    "archive_tar._ptr_Writer.writeRawFile": "error __golang archive_tar__ptr_Writer_writeRawFile(archive_tar_Writer *tw, string name, string data, uint8 flag, __int64 format)",
    "archive_tar._ptr_Writer.writeRawHeader": "error __golang archive_tar__ptr_Writer_writeRawHeader(archive_tar_Writer *tw, archive_tar_block *blk, int64 size, uint8 flag)",
    "archive_tar._ptr_Writer.AddFS": "error_0 __golang archive_tar__ptr_Writer_AddFS(_ptr_tar_Writer, fs_FS)",
    "archive_tar._ptr_Writer.Close": "error_0 __golang archive_tar__ptr_Writer_Close(_ptr_tar_Writer)",
    "archive_tar.regFileWriter.logicalRemaining": "int64_0 __golang archive_tar_regFileWriter_logicalRemaining(tar_regFileWriter)",
    "archive_tar.regFileWriter.physicalRemaining": "int64_0 __golang archive_tar_regFileWriter_physicalRemaining(tar_regFileWriter)",
    "archive_tar._ptr_Format.String": "string_0 __golang archive_tar__ptr_Format_String(_ptr_tar_Format)",
    "archive_tar._ptr_headerError.Error": "string_0 __golang archive_tar__ptr_headerError_Error(_ptr_tar_headerError)",
    "archive_tar._ptr_headerFileInfo.IsDir": "bool __golang archive_tar__ptr_headerFileInfo_IsDir(_ptr_tar_headerFileInfo)",
    "archive_tar._ptr_headerFileInfo.ModTime": "time_Time_0 __golang archive_tar__ptr_headerFileInfo_ModTime(_ptr_tar_headerFileInfo)",
    "archive_tar._ptr_headerFileInfo.Mode": "fs_FileMode __golang archive_tar__ptr_headerFileInfo_Mode(_ptr_tar_headerFileInfo)",
    "archive_tar._ptr_headerFileInfo.Name": "string_0 __golang archive_tar__ptr_headerFileInfo_Name(_ptr_tar_headerFileInfo)",
    "archive_tar._ptr_headerFileInfo.Size": "int64_0 __golang archive_tar__ptr_headerFileInfo_Size(_ptr_tar_headerFileInfo)",
    "archive_tar._ptr_headerFileInfo.String": "string_0 __golang archive_tar__ptr_headerFileInfo_String(_ptr_tar_headerFileInfo)",
    "archive_tar._ptr_headerFileInfo.Sys": "interface__0 __golang archive_tar__ptr_headerFileInfo_Sys(_ptr_tar_headerFileInfo)",
    "archive_tar._ptr_regFileReader.logicalRemaining": "int64_0 __golang archive_tar__ptr_regFileReader_logicalRemaining(_ptr_tar_regFileReader)",
    "archive_tar._ptr_regFileReader.physicalRemaining": "int64_0 __golang archive_tar__ptr_regFileReader_physicalRemaining(_ptr_tar_regFileReader)",
    "archive_tar._ptr_sparseFileReader.logicalRemaining": "int64_0 __golang archive_tar__ptr_sparseFileReader_logicalRemaining(_ptr_tar_sparseFileReader)",
    "archive_tar._ptr_sparseFileReader.physicalRemaining": "int64_0 __golang archive_tar__ptr_sparseFileReader_physicalRemaining(_ptr_tar_sparseFileReader)",
    "archive_tar._ptr_regFileWriter.logicalRemaining": "int64_0 __golang archive_tar__ptr_regFileWriter_logicalRemaining(_ptr_tar_regFileWriter)",
    "archive_tar._ptr_regFileWriter.physicalRemaining": "int64_0 __golang archive_tar__ptr_regFileWriter_physicalRemaining(_ptr_tar_regFileWriter)",
    "archive_tar._ptr_formatter.formatString_fm": "void __golang archive_tar__ptr_formatter_formatString_fm(_slice_uint8 b, string s)",
    "archive_tar._ptr_formatter.formatNumeric_fm": "void __golang archive_tar__ptr_formatter_formatNumeric_fm(_slice_uint8 b, int64 x)",
    "archive_tar._ptr_formatter.formatOctal_fm": "void __golang archive_tar__ptr_formatter_formatOctal_fm(_slice_uint8 b, int64 x)",
    "bufio._ptr_Reader.Size": "int_0 __golang bufio__ptr_Reader_Size(_ptr_bufio_Reader)",
    "bufio._ptr_Reader.Reset": "void __golang bufio__ptr_Reader_Reset(_ptr_bufio_Reader, io_Reader_0)",
    "bufio._ptr_Reader.fill": "void __golang bufio__ptr_Reader_fill(_ptr_bufio_Reader)",
    "bufio._ptr_Reader.UnreadByte": "error_0 __golang bufio__ptr_Reader_UnreadByte(_ptr_bufio_Reader)",
    "bufio._ptr_Reader.UnreadRune": "error_0 __golang bufio__ptr_Reader_UnreadRune(_ptr_bufio_Reader)",
    "bufio._ptr_Reader.Buffered": "int_0 __golang bufio__ptr_Reader_Buffered(_ptr_bufio_Reader)",
    "bufio._ptr_Writer.Size": "int_0 __golang bufio__ptr_Writer_Size(_ptr_bufio_Writer)",
    "bufio._ptr_Writer.Reset": "void __golang bufio__ptr_Writer_Reset(_ptr_bufio_Writer, io_Writer_0)",
    "bufio._ptr_Writer.Flush": "error_0 __golang bufio__ptr_Writer_Flush(_ptr_bufio_Writer)",
    "bufio._ptr_Writer.Available": "int_0 __golang bufio__ptr_Writer_Available(_ptr_bufio_Writer)",
    "bufio._ptr_Writer.AvailableBuffer": "_slice_uint8_0 __golang bufio__ptr_Writer_AvailableBuffer(_ptr_bufio_Writer)",
    "bufio._ptr_Writer.WriteByte": "error_0 __golang bufio__ptr_Writer_WriteByte(_ptr_bufio_Writer, uint8_0)",
    "bufio._ptr_Scanner.Scan": "bool __golang bufio__ptr_Scanner_Scan(bufio_Scanner *s)",
    "bufio.ReadWriter.Available": "int_0 __golang bufio_ReadWriter_Available(bufio_ReadWriter_0)",
    "bufio._ptr_ReadWriter.Available": "int_0 __golang bufio__ptr_ReadWriter_Available(_ptr_bufio_ReadWriter)",
    "bufio.ReadWriter.AvailableBuffer": "_slice_uint8_0 __golang bufio_ReadWriter_AvailableBuffer(bufio_ReadWriter_0)",
    "bufio._ptr_ReadWriter.AvailableBuffer": "_slice_uint8_0 __golang bufio__ptr_ReadWriter_AvailableBuffer(_ptr_bufio_ReadWriter)",
    "bufio.ReadWriter.Flush": "error_0 __golang bufio_ReadWriter_Flush(bufio_ReadWriter_0)",
    "bufio._ptr_ReadWriter.Flush": "error_0 __golang bufio__ptr_ReadWriter_Flush(_ptr_bufio_ReadWriter)",
    "bufio.ReadWriter.UnreadByte": "error_0 __golang bufio_ReadWriter_UnreadByte(bufio_ReadWriter_0)",
    "bufio._ptr_ReadWriter.UnreadByte": "error_0 __golang bufio__ptr_ReadWriter_UnreadByte(_ptr_bufio_ReadWriter)",
    "bufio.ReadWriter.UnreadRune": "error_0 __golang bufio_ReadWriter_UnreadRune(bufio_ReadWriter_0)",
    "bufio._ptr_ReadWriter.UnreadRune": "error_0 __golang bufio__ptr_ReadWriter_UnreadRune(_ptr_bufio_ReadWriter)",
    "bufio.ReadWriter.WriteByte": "error_0 __golang bufio_ReadWriter_WriteByte(bufio_ReadWriter_0, uint8_0)",
    "bufio._ptr_ReadWriter.WriteByte": "error_0 __golang bufio__ptr_ReadWriter_WriteByte(_ptr_bufio_ReadWriter, uint8_0)",
    "encoding_binary.littleEndian.Uint16": "uint16_0 __golang encoding_binary_littleEndian_Uint16(binary_littleEndian, _slice_uint8_0)",
    "encoding_binary.littleEndian.AppendUint16": "_slice_uint8_0 __golang encoding_binary_littleEndian_AppendUint16(binary_littleEndian, _slice_uint8_0, uint16_0)",
    "encoding_binary.littleEndian.Uint32": "uint32_0 __golang encoding_binary_littleEndian_Uint32(binary_littleEndian, _slice_uint8_0)",
    "encoding_binary.littleEndian.AppendUint32": "_slice_uint8_0 __golang encoding_binary_littleEndian_AppendUint32(binary_littleEndian, _slice_uint8_0, uint32_0)",
    "encoding_binary.littleEndian.Uint64": "uint64_0 __golang encoding_binary_littleEndian_Uint64(binary_littleEndian, _slice_uint8_0)",
    "encoding_binary.littleEndian.AppendUint64": "_slice_uint8_0 __golang encoding_binary_littleEndian_AppendUint64(binary_littleEndian, _slice_uint8_0, uint64_0)",
    "encoding_binary.littleEndian.String": "string_0 __golang encoding_binary_littleEndian_String(binary_littleEndian)",
    "encoding_binary.littleEndian.GoString": "string_0 __golang encoding_binary_littleEndian_GoString(binary_littleEndian)",
    "encoding_binary.Read": "error __golang encoding_binary_Read(io_Reader r, encoding_binary_ByteOrder order, interface_ data)",
    "encoding_binary.Write": "error __golang encoding_binary_Write(io_Writer w, encoding_binary_ByteOrder order, interface_ data)",
    "encoding_binary.Size": "int __golang encoding_binary_Size(interface_ v)",
    "encoding_binary.dataSize": "int __golang encoding_binary_dataSize(reflect_Value v)",
    "encoding_binary.sizeof": "int __golang encoding_binary_sizeof(reflect_Type t)",
    "encoding_binary._ptr_decoder.int16": "int16 __golang encoding_binary__ptr_decoder_int16(encoding_binary_decoder *d)",
    "encoding_binary._ptr_decoder.int32": "int32 __golang encoding_binary__ptr_decoder_int32(encoding_binary_decoder *d)",
    "encoding_binary._ptr_decoder.int64": "int64 __golang encoding_binary__ptr_decoder_int64(encoding_binary_decoder *d)",
    "encoding_binary._ptr_decoder.value": "void __golang encoding_binary__ptr_decoder_value(encoding_binary_decoder *d, reflect_Value v)",
    "encoding_binary._ptr_encoder.value": "void __golang encoding_binary__ptr_encoder_value(encoding_binary_encoder *e, reflect_Value v)",
    "encoding_binary._ptr_encoder.skip": "void __golang encoding_binary__ptr_encoder_skip(encoding_binary_encoder *e, reflect_Value v)",
    "encoding_binary.intDataSize": "int __golang encoding_binary_intDataSize(interface_ data)",
    "encoding_binary._ptr_littleEndian.AppendUint16": "_slice_uint8_0 __golang encoding_binary__ptr_littleEndian_AppendUint16(_ptr_binary_littleEndian, _slice_uint8_0, uint16_0)",
    "encoding_binary._ptr_littleEndian.AppendUint32": "_slice_uint8_0 __golang encoding_binary__ptr_littleEndian_AppendUint32(_ptr_binary_littleEndian, _slice_uint8_0, uint32_0)",
    "encoding_binary._ptr_littleEndian.AppendUint64": "_slice_uint8_0 __golang encoding_binary__ptr_littleEndian_AppendUint64(_ptr_binary_littleEndian, _slice_uint8_0, uint64_0)",
    "encoding_binary._ptr_littleEndian.GoString": "string_0 __golang encoding_binary__ptr_littleEndian_GoString(_ptr_binary_littleEndian)",
    "encoding_binary._ptr_littleEndian.PutUint16": "void __golang encoding_binary__ptr_littleEndian_PutUint16(_ptr_binary_littleEndian, _slice_uint8_0, uint16_0)",
    "encoding_binary._ptr_littleEndian.PutUint32": "void __golang encoding_binary__ptr_littleEndian_PutUint32(_ptr_binary_littleEndian, _slice_uint8_0, uint32_0)",
    "encoding_binary._ptr_littleEndian.PutUint64": "void __golang encoding_binary__ptr_littleEndian_PutUint64(_ptr_binary_littleEndian, _slice_uint8_0, uint64_0)",
    "encoding_binary._ptr_littleEndian.String": "string_0 __golang encoding_binary__ptr_littleEndian_String(_ptr_binary_littleEndian)",
    "encoding_binary._ptr_littleEndian.Uint16": "uint16_0 __golang encoding_binary__ptr_littleEndian_Uint16(_ptr_binary_littleEndian, _slice_uint8_0)",
    "encoding_binary._ptr_littleEndian.Uint32": "uint32_0 __golang encoding_binary__ptr_littleEndian_Uint32(_ptr_binary_littleEndian, _slice_uint8_0)",
    "encoding_binary._ptr_littleEndian.Uint64": "uint64_0 __golang encoding_binary__ptr_littleEndian_Uint64(_ptr_binary_littleEndian, _slice_uint8_0)",
    "hash_crc32.castagnoliInit": "void __golang hash_crc32_castagnoliInit()",
    "hash_crc32.ieeeInit": "void __golang hash_crc32_ieeeInit()",
    "hash_crc32.MakeTable": "hash_crc32_Table *__golang hash_crc32_MakeTable(uint32 poly)",
    "hash_crc32.New": "hash_Hash32 __golang hash_crc32_New(hash_crc32_Table *tab)",
    "hash_crc32._ptr_digest.Size": "int_0 __golang hash_crc32__ptr_digest_Size(_ptr_crc32_digest)",
    "hash_crc32._ptr_digest.BlockSize": "int_0 __golang hash_crc32__ptr_digest_BlockSize(_ptr_crc32_digest)",
    "hash_crc32._ptr_digest.Reset": "void __golang hash_crc32__ptr_digest_Reset(_ptr_crc32_digest)",
    "hash_crc32._ptr_digest.UnmarshalBinary": "error_0 __golang hash_crc32__ptr_digest_UnmarshalBinary(_ptr_crc32_digest, _slice_uint8_0)",
    "hash_crc32.update": "uint32 __golang hash_crc32_update(uint32 crc, hash_crc32_Table *tab, _slice_uint8 p, bool checkInitIEEE)",
    "hash_crc32._ptr_digest.Sum32": "uint32_0 __golang hash_crc32__ptr_digest_Sum32(_ptr_crc32_digest)",
    "hash_crc32._ptr_digest.Sum": "_slice_uint8_0 __golang hash_crc32__ptr_digest_Sum(_ptr_crc32_digest, _slice_uint8_0)",
    "hash_crc32.ChecksumIEEE": "uint32 __golang hash_crc32_ChecksumIEEE(_slice_uint8 data)",
    "hash_crc32.tableSum": "uint32 __golang hash_crc32_tableSum(hash_crc32_Table *t)",
    "hash_crc32.archInitCastagnoli": "void __golang hash_crc32_archInitCastagnoli()",
    "hash_crc32.archUpdateCastagnoli": "uint32 __golang hash_crc32_archUpdateCastagnoli(uint32 crc, _slice_uint8 p)",
    "hash_crc32.archUpdateIEEE": "uint32 __golang hash_crc32_archUpdateIEEE(uint32 crc, _slice_uint8 p)",
    "hash_crc32.slicingMakeTable": "hash_crc32_slicing8Table *__golang hash_crc32_slicingMakeTable(uint32 poly)",
    "hash_crc32.slicingUpdate": "uint32 __golang hash_crc32_slicingUpdate(uint32 crc, hash_crc32_slicing8Table *tab, _slice_uint8 p)",
    "hash_crc32.castagnoliSSE42": "void __golang hash_crc32_castagnoliSSE42()",
    "hash_crc32.castagnoliSSE42Triple": "void __golang hash_crc32_castagnoliSSE42Triple()",
    "hash_crc32.ieeeCLMUL": "void __golang hash_crc32_ieeeCLMUL()",
    "compress_flate._ptr_compressor.fillDeflate": "int __golang compress_flate__ptr_compressor_fillDeflate(compress_flate_compressor *d, _slice_uint8 b)",
    "compress_flate._ptr_compressor.writeBlock": "error __golang compress_flate__ptr_compressor_writeBlock(compress_flate_compressor *d, _slice_compress_flate_token tokens, int index)",
    "compress_flate._ptr_compressor.fillWindow": "void __golang compress_flate__ptr_compressor_fillWindow(_ptr_flate_compressor, _slice_uint8_0)",
    "compress_flate.bulkHash4": "void __golang compress_flate_bulkHash4(_slice_uint8 b, _slice_uint32 dst)",
    "compress_flate._ptr_compressor.deflate": "void __golang compress_flate__ptr_compressor_deflate(_ptr_flate_compressor)",
    "compress_flate._ptr_compressor.fillStore": "int __golang compress_flate__ptr_compressor_fillStore(compress_flate_compressor *d, _slice_uint8 b)",
    "compress_flate._ptr_compressor.store": "void __golang compress_flate__ptr_compressor_store(_ptr_flate_compressor)",
    "compress_flate._ptr_compressor.storeHuff": "void __golang compress_flate__ptr_compressor_storeHuff(_ptr_flate_compressor)",
    "compress_flate._ptr_compressor.syncFlush": "error_0 __golang compress_flate__ptr_compressor_syncFlush(_ptr_flate_compressor)",
    "compress_flate._ptr_compressor.reset": "void __golang compress_flate__ptr_compressor_reset(_ptr_flate_compressor, io_Writer_0)",
    "compress_flate._ptr_compressor.close": "error_0 __golang compress_flate__ptr_compressor_close(_ptr_flate_compressor)",
    "compress_flate._ptr_Writer.Flush": "error_0 __golang compress_flate__ptr_Writer_Flush(_ptr_flate_Writer)",
    "compress_flate._ptr_Writer.Close": "error_0 __golang compress_flate__ptr_Writer_Close(_ptr_flate_Writer)",
    "compress_flate._ptr_Writer.Reset": "void __golang compress_flate__ptr_Writer_Reset(_ptr_flate_Writer, io_Writer_0)",
    "compress_flate._ptr_deflateFast.encode": "_slice_compress_flate_token __golang compress_flate__ptr_deflateFast_encode(compress_flate_deflateFast *e, _slice_compress_flate_token dst, _slice_uint8 src)",
    "compress_flate._ptr_deflateFast.matchLen": "int32 __golang compress_flate__ptr_deflateFast_matchLen(compress_flate_deflateFast *e, int32 s, int32 t, _slice_uint8 src)",
    "compress_flate._ptr_dictDecoder.writeCopy": "int_0 __golang compress_flate__ptr_dictDecoder_writeCopy(_ptr_flate_dictDecoder, int_0, int_0)",
    "compress_flate._ptr_huffmanBitWriter.flush": "void __golang compress_flate__ptr_huffmanBitWriter_flush(_ptr_flate_huffmanBitWriter)",
    "compress_flate._ptr_huffmanBitWriter.writeBits": "void __golang compress_flate__ptr_huffmanBitWriter_writeBits(compress_flate_huffmanBitWriter *w, int32 b, uint nb)",
    "compress_flate._ptr_huffmanBitWriter.writeBytes": "void __golang compress_flate__ptr_huffmanBitWriter_writeBytes(_ptr_flate_huffmanBitWriter, _slice_uint8_0)",
    "compress_flate._ptr_huffmanBitWriter.generateCodegen": "void __golang compress_flate__ptr_huffmanBitWriter_generateCodegen(compress_flate_huffmanBitWriter *w, int numLiterals, int numOffsets, compress_flate_huffmanEncoder *litEnc, compress_flate_huffmanEncoder *offEnc)",
    "compress_flate._ptr_huffmanBitWriter.writeCode": "void __golang compress_flate__ptr_huffmanBitWriter_writeCode(compress_flate_huffmanBitWriter *w, compress_flate_hcode c)",
    "compress_flate._ptr_huffmanBitWriter.writeDynamicHeader": "void __golang compress_flate__ptr_huffmanBitWriter_writeDynamicHeader(compress_flate_huffmanBitWriter *w, int numLiterals, int numOffsets, int numCodegens, bool isEof)",
    "compress_flate._ptr_huffmanBitWriter.writeStoredHeader": "void __golang compress_flate__ptr_huffmanBitWriter_writeStoredHeader(compress_flate_huffmanBitWriter *w, int length, bool isEof)",
    "compress_flate._ptr_huffmanBitWriter.writeBlock": "void __golang compress_flate__ptr_huffmanBitWriter_writeBlock(compress_flate_huffmanBitWriter *w, _slice_compress_flate_token tokens, bool eof, _slice_uint8 input)",
    "compress_flate._ptr_huffmanBitWriter.writeBlockDynamic": "void __golang compress_flate__ptr_huffmanBitWriter_writeBlockDynamic(compress_flate_huffmanBitWriter *w, _slice_compress_flate_token tokens, bool eof, _slice_uint8 input)",
    "compress_flate._ptr_huffmanBitWriter.writeBlockHuff": "void __golang compress_flate__ptr_huffmanBitWriter_writeBlockHuff(compress_flate_huffmanBitWriter *w, bool eof, _slice_uint8 input)",
    "compress_flate.generateFixedLiteralEncoding": "compress_flate_huffmanEncoder *__golang compress_flate_generateFixedLiteralEncoding()",
    "compress_flate._ptr_huffmanEncoder.bitCounts": "_slice_int32 __golang compress_flate__ptr_huffmanEncoder_bitCounts(compress_flate_huffmanEncoder *h, _slice_compress_flate_literalNode list, int32 maxBits)",
    "compress_flate._ptr_huffmanEncoder.assignEncodingAndSize": "void __golang compress_flate__ptr_huffmanEncoder_assignEncodingAndSize(compress_flate_huffmanEncoder *h, _slice_int32 bitCount, _slice_compress_flate_literalNode list)",
    "compress_flate._ptr_huffmanEncoder.generate": "void __golang compress_flate__ptr_huffmanEncoder_generate(compress_flate_huffmanEncoder *h, _slice_int32 freq, int32 maxBits)",
    "compress_flate.byLiteral.Len": "int_0 __golang compress_flate_byLiteral_Len(flate_byLiteral)",
    "compress_flate.byLiteral.Less": "bool __golang compress_flate_byLiteral_Less(flate_byLiteral, int_0, int_0)",
    "compress_flate.byFreq.Len": "int_0 __golang compress_flate_byFreq_Len(flate_byFreq)",
    "compress_flate.byFreq.Less": "bool __golang compress_flate_byFreq_Less(flate_byFreq, int_0, int_0)",
    "compress_flate.CorruptInputError.Error": "string_0 __golang compress_flate_CorruptInputError_Error(flate_CorruptInputError)",
    "compress_flate.InternalError.Error": "string_0 __golang compress_flate_InternalError_Error(flate_InternalError)",
    "compress_flate._ptr_decompressor.nextBlock": "void __golang compress_flate__ptr_decompressor_nextBlock(_ptr_flate_decompressor)",
    "compress_flate._ptr_decompressor.Close": "error_0 __golang compress_flate__ptr_decompressor_Close(_ptr_flate_decompressor)",
    "compress_flate._ptr_decompressor.readHuffman": "error_0 __golang compress_flate__ptr_decompressor_readHuffman(_ptr_flate_decompressor)",
    "compress_flate._ptr_decompressor.huffmanBlock": "void __golang compress_flate__ptr_decompressor_huffmanBlock(_ptr_flate_decompressor)",
    "compress_flate._ptr_decompressor.dataBlock": "void __golang compress_flate__ptr_decompressor_dataBlock(_ptr_flate_decompressor)",
    "compress_flate._ptr_decompressor.copyData": "void __golang compress_flate__ptr_decompressor_copyData(_ptr_flate_decompressor)",
    "compress_flate._ptr_decompressor.moreBits": "error_0 __golang compress_flate__ptr_decompressor_moreBits(_ptr_flate_decompressor)",
    "compress_flate._ptr_decompressor.makeReader": "void __golang compress_flate__ptr_decompressor_makeReader(_ptr_flate_decompressor, io_Reader_0)",
    "compress_flate.fixedHuffmanDecoderInit": "void __golang compress_flate_fixedHuffmanDecoderInit()",
    "compress_flate._ptr_decompressor.Reset": "error_0 __golang compress_flate__ptr_decompressor_Reset(_ptr_flate_decompressor, io_Reader_0, _slice_uint8_0)",
    "compress_flate.NewReader": "io_ReadCloser __golang compress_flate_NewReader(io_Reader r)",
    "compress_flate.NewReaderDict": "io_ReadCloser __golang compress_flate_NewReaderDict(io_Reader r, _slice_uint8 dict)",
    "compress_flate._ptr_byLiteral.Len": "int_0 __golang compress_flate__ptr_byLiteral_Len(_ptr_flate_byLiteral)",
    "compress_flate._ptr_byLiteral.Less": "bool __golang compress_flate__ptr_byLiteral_Less(_ptr_flate_byLiteral, int_0, int_0)",
    "compress_flate._ptr_byLiteral.Swap": "void __golang compress_flate__ptr_byLiteral_Swap(_ptr_flate_byLiteral, int_0, int_0)",
    "compress_flate._ptr_byFreq.Len": "int_0 __golang compress_flate__ptr_byFreq_Len(_ptr_flate_byFreq)",
    "compress_flate._ptr_byFreq.Less": "bool __golang compress_flate__ptr_byFreq_Less(_ptr_flate_byFreq, int_0, int_0)",
    "compress_flate._ptr_byFreq.Swap": "void __golang compress_flate__ptr_byFreq_Swap(_ptr_flate_byFreq, int_0, int_0)",
    "compress_flate._ptr_CorruptInputError.Error": "string_0 __golang compress_flate__ptr_CorruptInputError_Error(_ptr_flate_CorruptInputError)",
    "compress_flate._ptr_InternalError.Error": "string_0 __golang compress_flate__ptr_InternalError_Error(_ptr_flate_InternalError)",
    "archive_zip._ptr_Reader.RegisterDecompressor": "void __golang archive_zip__ptr_Reader_RegisterDecompressor(_ptr_zip_Reader, uint16_0, PTR_zip_Decompressor)",
    "archive_zip._ptr_Reader.decompressor": "archive_zip_Decompressor __golang archive_zip__ptr_Reader_decompressor(archive_zip_Reader *r, uint16 method)",
    "archive_zip._ptr_ReadCloser.Close": "error_0 __golang archive_zip__ptr_ReadCloser_Close(_ptr_zip_ReadCloser)",
    "archive_zip._ptr_dirReader.Close": "error_0 __golang archive_zip__ptr_dirReader_Close(_ptr_zip_dirReader)",
    "archive_zip._ptr_checksumReader.Close": "error_0 __golang archive_zip__ptr_checksumReader_Close(_ptr_zip_checksumReader)",
    "archive_zip.readDirectoryHeader": "error __golang archive_zip_readDirectoryHeader(archive_zip_File *f, io_Reader r)",
    "archive_zip.readDataDescriptor": "error __golang archive_zip_readDataDescriptor(io_Reader r, archive_zip_File *f)",
    "archive_zip.readDirectory64End": "error __golang archive_zip_readDirectory64End(io_ReaderAt r, int64 offset, archive_zip_directoryEnd *d)",
    "archive_zip.findSignatureInBlock": "int __golang archive_zip_findSignatureInBlock(_slice_uint8 b)",
    "archive_zip._ptr_fileListEntry.Size": "int64_0 __golang archive_zip__ptr_fileListEntry_Size(_ptr_zip_fileListEntry)",
    "archive_zip._ptr_fileListEntry.Mode": "fs_FileMode __golang archive_zip__ptr_fileListEntry_Mode(_ptr_zip_fileListEntry)",
    "archive_zip._ptr_fileListEntry.Type": "fs_FileMode __golang archive_zip__ptr_fileListEntry_Type(_ptr_zip_fileListEntry)",
    "archive_zip._ptr_fileListEntry.IsDir": "bool __golang archive_zip__ptr_fileListEntry_IsDir(_ptr_zip_fileListEntry)",
    "archive_zip._ptr_fileListEntry.Sys": "interface__0 __golang archive_zip__ptr_fileListEntry_Sys(_ptr_zip_fileListEntry)",
    "archive_zip._ptr_fileListEntry.ModTime": "time_Time_0 __golang archive_zip__ptr_fileListEntry_ModTime(_ptr_zip_fileListEntry)",
    "archive_zip._ptr_fileListEntry.String": "string_0 __golang archive_zip__ptr_fileListEntry_String(_ptr_zip_fileListEntry)",
    "archive_zip.toValidName": "string __golang archive_zip_toValidName(string name)",
    "archive_zip._ptr_Reader.initFileList": "void __golang archive_zip__ptr_Reader_initFileList(_ptr_zip_Reader)",
    "archive_zip.fileEntryLess": "bool __golang archive_zip_fileEntryLess(string x, string y)",
    "archive_zip._ptr_Reader.openLookup": "archive_zip_fileListEntry *__golang archive_zip__ptr_Reader_openLookup(archive_zip_Reader *r, string name)",
    "archive_zip._ptr_Reader.openReadDir": "_slice_archive_zip_fileListEntry __golang archive_zip__ptr_Reader_openReadDir(archive_zip_Reader *r, string dir)",
    "archive_zip._ptr_openDir.Close": "error_0 __golang archive_zip__ptr_openDir_Close(_ptr_zip_openDir)",
    "archive_zip.newFlateWriter": "io_WriteCloser __golang archive_zip_newFlateWriter(io_Writer w)",
    "archive_zip._ptr_pooledFlateWriter.Write.deferwrap1": "void __golang archive_zip__ptr_pooledFlateWriter_Write_deferwrap1()",
    "archive_zip._ptr_pooledFlateWriter.Close": "error_0 __golang archive_zip__ptr_pooledFlateWriter_Close(_ptr_zip_pooledFlateWriter)",
    "archive_zip._ptr_pooledFlateWriter.Close.deferwrap1": "void __golang archive_zip__ptr_pooledFlateWriter_Close_deferwrap1()",
    "archive_zip.newFlateReader": "io_ReadCloser __golang archive_zip_newFlateReader(io_Reader r)",
    "archive_zip._ptr_pooledFlateReader.Read.deferwrap1": "void __golang archive_zip__ptr_pooledFlateReader_Read_deferwrap1()",
    "archive_zip._ptr_pooledFlateReader.Close": "error_0 __golang archive_zip__ptr_pooledFlateReader_Close(_ptr_zip_pooledFlateReader)",
    "archive_zip._ptr_pooledFlateReader.Close.deferwrap1": "void __golang archive_zip__ptr_pooledFlateReader_Close_deferwrap1()",
    "archive_zip._ptr_FileHeader.FileInfo": "fs_FileInfo __golang archive_zip__ptr_FileHeader_FileInfo(_ptr_zip_FileHeader)",
    "archive_zip.headerFileInfo.Name": "string_0 __golang archive_zip_headerFileInfo_Name(zip_headerFileInfo)",
    "archive_zip.headerFileInfo.Size": "int64_0 __golang archive_zip_headerFileInfo_Size(zip_headerFileInfo)",
    "archive_zip.headerFileInfo.IsDir": "bool __golang archive_zip_headerFileInfo_IsDir(zip_headerFileInfo)",
    "archive_zip.headerFileInfo.ModTime": "time_Time_0 __golang archive_zip_headerFileInfo_ModTime(zip_headerFileInfo)",
    "archive_zip.headerFileInfo.Mode": "fs_FileMode __golang archive_zip_headerFileInfo_Mode(zip_headerFileInfo)",
    "archive_zip.headerFileInfo.Type": "fs_FileMode __golang archive_zip_headerFileInfo_Type(zip_headerFileInfo)",
    "archive_zip.headerFileInfo.Sys": "interface__0 __golang archive_zip_headerFileInfo_Sys(zip_headerFileInfo)",
    "archive_zip.headerFileInfo.String": "string_0 __golang archive_zip_headerFileInfo_String(zip_headerFileInfo)",
    "archive_zip.timeZone": "time_Location *__golang archive_zip_timeZone(__int64 offset)",
    "archive_zip.msDosTimeToTime": "time_Time __golang archive_zip_msDosTimeToTime(uint16 dosDate, uint16 dosTime)",
    "archive_zip._ptr_FileHeader.ModTime": "time_Time_0 __golang archive_zip__ptr_FileHeader_ModTime(_ptr_zip_FileHeader)",
    "archive_zip._ptr_FileHeader.SetModTime": "void __golang archive_zip__ptr_FileHeader_SetModTime(_ptr_zip_FileHeader, time_Time_0)",
    "archive_zip._ptr_FileHeader.Mode": "fs_FileMode __golang archive_zip__ptr_FileHeader_Mode(_ptr_zip_FileHeader)",
    "archive_zip._ptr_FileHeader.SetMode": "void __golang archive_zip__ptr_FileHeader_SetMode(_ptr_zip_FileHeader, fs_FileMode)",
    "archive_zip._ptr_Writer.Close": "error __golang archive_zip__ptr_Writer_Close(archive_zip_Writer *w)",
    "archive_zip._ptr_Writer.prepare": "error __golang archive_zip__ptr_Writer_prepare(archive_zip_Writer *w, archive_zip_FileHeader *fh)",
    "archive_zip.writeHeader": "error __golang archive_zip_writeHeader(io_Writer w, archive_zip_header *h)",
    "archive_zip._ptr_Writer.compressor": "archive_zip_Compressor __golang archive_zip__ptr_Writer_compressor(archive_zip_Writer *w, uint16 method)",
    "archive_zip._ptr_fileWriter.close": "error_0 __golang archive_zip__ptr_fileWriter_close(_ptr_zip_fileWriter)",
    "archive_zip._ptr_fileWriter.writeDataDescriptor": "error_0 __golang archive_zip__ptr_fileWriter_writeDataDescriptor(_ptr_zip_fileWriter)",
    "archive_zip.nopCloser.Close": "error_0 __golang archive_zip_nopCloser_Close(zip_nopCloser)",
    "archive_zip._ptr_File.FileInfo": "fs_FileInfo __golang archive_zip__ptr_File_FileInfo(_ptr_zip_File)",
    "archive_zip._ptr_File.ModTime": "time_Time_0 __golang archive_zip__ptr_File_ModTime(_ptr_zip_File)",
    "archive_zip._ptr_File.Mode": "fs_FileMode __golang archive_zip__ptr_File_Mode(_ptr_zip_File)",
    "archive_zip._ptr_File.SetModTime": "void __golang archive_zip__ptr_File_SetModTime(_ptr_zip_File, time_Time_0)",
    "archive_zip._ptr_File.SetMode": "void __golang archive_zip__ptr_File_SetMode(_ptr_zip_File, fs_FileMode)",
    "archive_zip._ptr_headerFileInfo.IsDir": "bool __golang archive_zip__ptr_headerFileInfo_IsDir(_ptr_zip_headerFileInfo)",
    "archive_zip._ptr_headerFileInfo.ModTime": "time_Time_0 __golang archive_zip__ptr_headerFileInfo_ModTime(_ptr_zip_headerFileInfo)",
    "archive_zip._ptr_headerFileInfo.Mode": "fs_FileMode __golang archive_zip__ptr_headerFileInfo_Mode(_ptr_zip_headerFileInfo)",
    "archive_zip._ptr_headerFileInfo.Name": "string_0 __golang archive_zip__ptr_headerFileInfo_Name(_ptr_zip_headerFileInfo)",
    "archive_zip._ptr_headerFileInfo.Size": "int64_0 __golang archive_zip__ptr_headerFileInfo_Size(_ptr_zip_headerFileInfo)",
    "archive_zip._ptr_headerFileInfo.String": "string_0 __golang archive_zip__ptr_headerFileInfo_String(_ptr_zip_headerFileInfo)",
    "archive_zip._ptr_headerFileInfo.Sys": "interface__0 __golang archive_zip__ptr_headerFileInfo_Sys(_ptr_zip_headerFileInfo)",
    "archive_zip._ptr_headerFileInfo.Type": "fs_FileMode __golang archive_zip__ptr_headerFileInfo_Type(_ptr_zip_headerFileInfo)",
    "archive_zip.header.FileInfo": "fs_FileInfo __golang archive_zip_header_FileInfo(zip_header)",
    "archive_zip._ptr_header.FileInfo": "fs_FileInfo __golang archive_zip__ptr_header_FileInfo(_ptr_zip_header)",
    "archive_zip.header.ModTime": "time_Time_0 __golang archive_zip_header_ModTime(zip_header)",
    "archive_zip._ptr_header.ModTime": "time_Time_0 __golang archive_zip__ptr_header_ModTime(_ptr_zip_header)",
    "archive_zip.header.Mode": "fs_FileMode __golang archive_zip_header_Mode(zip_header)",
    "archive_zip._ptr_header.Mode": "fs_FileMode __golang archive_zip__ptr_header_Mode(_ptr_zip_header)",
    "archive_zip.header.SetModTime": "void __golang archive_zip_header_SetModTime(zip_header, time_Time_0)",
    "archive_zip._ptr_header.SetModTime": "void __golang archive_zip__ptr_header_SetModTime(_ptr_zip_header, time_Time_0)",
    "archive_zip.header.SetMode": "void __golang archive_zip_header_SetMode(zip_header, fs_FileMode)",
    "archive_zip._ptr_header.SetMode": "void __golang archive_zip__ptr_header_SetMode(_ptr_zip_header, fs_FileMode)",
    "archive_zip.fileWriter.FileInfo": "fs_FileInfo __golang archive_zip_fileWriter_FileInfo(zip_fileWriter)",
    "archive_zip._ptr_fileWriter.FileInfo": "fs_FileInfo __golang archive_zip__ptr_fileWriter_FileInfo(_ptr_zip_fileWriter)",
    "archive_zip.fileWriter.ModTime": "time_Time_0 __golang archive_zip_fileWriter_ModTime(zip_fileWriter)",
    "archive_zip._ptr_fileWriter.ModTime": "time_Time_0 __golang archive_zip__ptr_fileWriter_ModTime(_ptr_zip_fileWriter)",
    "archive_zip.fileWriter.Mode": "fs_FileMode __golang archive_zip_fileWriter_Mode(zip_fileWriter)",
    "archive_zip._ptr_fileWriter.Mode": "fs_FileMode __golang archive_zip__ptr_fileWriter_Mode(_ptr_zip_fileWriter)",
    "archive_zip.fileWriter.SetModTime": "void __golang archive_zip_fileWriter_SetModTime(zip_fileWriter, time_Time_0)",
    "archive_zip._ptr_fileWriter.SetModTime": "void __golang archive_zip__ptr_fileWriter_SetModTime(_ptr_zip_fileWriter, time_Time_0)",
    "archive_zip.fileWriter.SetMode": "void __golang archive_zip_fileWriter_SetMode(zip_fileWriter, fs_FileMode)",
    "archive_zip._ptr_fileWriter.SetMode": "void __golang archive_zip__ptr_fileWriter_SetMode(_ptr_zip_fileWriter, fs_FileMode)",
    "archive_zip._ptr_nopCloser.Close": "error_0 __golang archive_zip__ptr_nopCloser_Close(_ptr_zip_nopCloser)",
    "compress_gzip._ptr_Reader.Reset": "error_0 __golang compress_gzip__ptr_Reader_Reset(_ptr_gzip_Reader, io_Reader_0)",
    "compress_gzip._ptr_Reader.Multistream": "void __golang compress_gzip__ptr_Reader_Multistream(_ptr_gzip_Reader, bool)",
    "compress_gzip._ptr_Reader.Close": "error_0 __golang compress_gzip__ptr_Reader_Close(_ptr_gzip_Reader)",
    "compress_gzip._ptr_Writer.Reset": "void __golang compress_gzip__ptr_Writer_Reset(_ptr_gzip_Writer, io_Writer_0)",
    "compress_gzip._ptr_Writer.writeBytes": "error_0 __golang compress_gzip__ptr_Writer_writeBytes(_ptr_gzip_Writer, _slice_uint8_0)",
    "compress_gzip._ptr_Writer.writeString": "error_0 __golang compress_gzip__ptr_Writer_writeString(_ptr_gzip_Writer, string_0)",
    "compress_gzip._ptr_Writer.Flush": "error_0 __golang compress_gzip__ptr_Writer_Flush(_ptr_gzip_Writer)",
    "compress_gzip._ptr_Writer.Close": "error_0 __golang compress_gzip__ptr_Writer_Close(_ptr_gzip_Writer)",
    "hash_adler32._ptr_digest.Reset": "void __golang hash_adler32__ptr_digest_Reset(_ptr_adler32_digest)",
    "hash_adler32._ptr_digest.Size": "int_0 __golang hash_adler32__ptr_digest_Size(_ptr_adler32_digest)",
    "hash_adler32._ptr_digest.BlockSize": "int_0 __golang hash_adler32__ptr_digest_BlockSize(_ptr_adler32_digest)",
    "hash_adler32._ptr_digest.UnmarshalBinary": "error_0 __golang hash_adler32__ptr_digest_UnmarshalBinary(_ptr_adler32_digest, _slice_uint8_0)",
    "hash_adler32.update": "unsigned int __golang hash_adler32_update(unsigned int d, _slice_uint8 p)",
    "hash_adler32._ptr_digest.Sum32": "uint32_0 __golang hash_adler32__ptr_digest_Sum32(_ptr_adler32_digest)",
    "hash_adler32._ptr_digest.Sum": "_slice_uint8_0 __golang hash_adler32__ptr_digest_Sum(_ptr_adler32_digest, _slice_uint8_0)",
    "compress_zlib._ptr_reader.Close": "error_0 __golang compress_zlib__ptr_reader_Close(_ptr_zlib_reader)",
    "compress_zlib._ptr_reader.Reset": "error_0 __golang compress_zlib__ptr_reader_Reset(_ptr_zlib_reader, io_Reader_0, _slice_uint8_0)",
    "compress_zlib._ptr_Writer.Reset": "void __golang compress_zlib__ptr_Writer_Reset(_ptr_zlib_Writer, io_Writer_0)",
    "compress_zlib._ptr_Writer.writeHeader": "error_0 __golang compress_zlib__ptr_Writer_writeHeader(_ptr_zlib_Writer)",
    "compress_zlib._ptr_Writer.Flush": "error_0 __golang compress_zlib__ptr_Writer_Flush(_ptr_zlib_Writer)",
    "compress_zlib._ptr_Writer.Close": "error_0 __golang compress_zlib__ptr_Writer_Close(_ptr_zlib_Writer)",
    "container_list._ptr_Element.Next": "container_list_Element *__golang container_list__ptr_Element_Next(container_list_Element *e)",
    "container_list._ptr_Element.Prev": "container_list_Element *__golang container_list__ptr_Element_Prev(container_list_Element *e)",
    "container_list._ptr_List.Init": "_ptr_list_List __golang container_list__ptr_List_Init(_ptr_list_List)",
    "container_list._ptr_List.Len": "int_0 __golang container_list__ptr_List_Len(_ptr_list_List)",
    "container_list._ptr_List.Front": "_ptr_list_Element __golang container_list__ptr_List_Front(_ptr_list_List)",
    "container_list._ptr_List.Back": "_ptr_list_Element __golang container_list__ptr_List_Back(_ptr_list_List)",
    "container_list._ptr_List.Remove": "interface__0 __golang container_list__ptr_List_Remove(_ptr_list_List, _ptr_list_Element)",
    "container_list._ptr_List.PushFront": "_ptr_list_Element __golang container_list__ptr_List_PushFront(_ptr_list_List, interface__0)",
    "container_list._ptr_List.PushBack": "_ptr_list_Element __golang container_list__ptr_List_PushBack(_ptr_list_List, interface__0)",
    "container_list._ptr_List.InsertBefore": "_ptr_list_Element __golang container_list__ptr_List_InsertBefore(_ptr_list_List, interface__0, _ptr_list_Element)",
    "container_list._ptr_List.InsertAfter": "_ptr_list_Element __golang container_list__ptr_List_InsertAfter(_ptr_list_List, interface__0, _ptr_list_Element)",
    "container_list._ptr_List.MoveToFront": "void __golang container_list__ptr_List_MoveToFront(_ptr_list_List, _ptr_list_Element)",
    "container_list._ptr_List.MoveToBack": "void __golang container_list__ptr_List_MoveToBack(_ptr_list_List, _ptr_list_Element)",
    "container_list._ptr_List.MoveBefore": "void __golang container_list__ptr_List_MoveBefore(_ptr_list_List, _ptr_list_Element, _ptr_list_Element)",
    "container_list._ptr_List.MoveAfter": "void __golang container_list__ptr_List_MoveAfter(_ptr_list_List, _ptr_list_Element, _ptr_list_Element)",
    "container_list._ptr_List.PushBackList": "void __golang container_list__ptr_List_PushBackList(_ptr_list_List, _ptr_list_List)",
    "container_list._ptr_List.PushFrontList": "void __golang container_list__ptr_List_PushFrontList(_ptr_list_List, _ptr_list_List)",
    "container_ring._ptr_Ring.Unlink": "container_ring_Ring *__golang container_ring__ptr_Ring_Unlink(container_ring_Ring *r, int n)",
    "container_ring._ptr_Ring.Do": "void __golang container_ring__ptr_Ring_Do(container_ring_Ring *r, funcinterface_ f)",
    "context.deadlineExceededError.Error": "string_0 __golang context_deadlineExceededError_Error(context_deadlineExceededError_0)",
    "context.deadlineExceededError.Timeout": "bool __golang context_deadlineExceededError_Timeout(context_deadlineExceededError_0)",
    "context.deadlineExceededError.Temporary": "bool __golang context_deadlineExceededError_Temporary(context_deadlineExceededError_0)",
    "context.emptyCtx.Done": "_chan_left_chan_struct__0 __golang context_emptyCtx_Done(context_emptyCtx_0)",
    "context.emptyCtx.Err": "error_0 __golang context_emptyCtx_Err(context_emptyCtx_0)",
    "context.emptyCtx.Value": "interface__0 __golang context_emptyCtx_Value(context_emptyCtx_0, interface__0)",
    "context.backgroundCtx.String": "string_0 __golang context_backgroundCtx_String(context_backgroundCtx_0)",
    "context.Cause.deferwrap1": "void __golang context_Cause_deferwrap1()",
    "context.AfterFunc": "func_bool __golang context_AfterFunc(context_Context ctx, func f)",
    "context._ptr_afterFuncCtx.cancel": "void __golang context__ptr_afterFuncCtx_cancel(_ptr_context_afterFuncCtx, bool, error_0, error_0)",
    "context.removeChild": "void __golang context_removeChild(context_Context parent, context_canceler child)",
    "context._ptr_cancelCtx.Value": "interface__0 __golang context__ptr_cancelCtx_Value(_ptr_context_cancelCtx, interface__0)",
    "context._ptr_cancelCtx.Done": "_chan_left_chan_struct__0 __golang context__ptr_cancelCtx_Done(_ptr_context_cancelCtx)",
    "context._ptr_cancelCtx.Done.deferwrap1": "void __golang context__ptr_cancelCtx_Done_deferwrap1()",
    "context._ptr_cancelCtx.Err": "error_0 __golang context__ptr_cancelCtx_Err(_ptr_context_cancelCtx)",
    "context._ptr_cancelCtx.propagateCancel": "void __golang context__ptr_cancelCtx_propagateCancel(context_cancelCtx *c, context_Context parent, context_canceler child)",
    "context.contextName": "string __golang context_contextName(context_Context c)",
    "context._ptr_cancelCtx.String": "string_0 __golang context__ptr_cancelCtx_String(_ptr_context_cancelCtx)",
    "context._ptr_cancelCtx.cancel": "void __golang context__ptr_cancelCtx_cancel(_ptr_context_cancelCtx, bool, error_0, error_0)",
    "context.WithDeadlineCause.deferwrap1": "void __golang context_WithDeadlineCause_deferwrap1()",
    "context._ptr_timerCtx.String": "string_0 __golang context__ptr_timerCtx_String(_ptr_context_timerCtx)",
    "context._ptr_timerCtx.cancel": "void __golang context__ptr_timerCtx_cancel(_ptr_context_timerCtx, bool, error_0, error_0)",
    "context.WithValue": "context_Context __golang context_WithValue(context_Context parent, interface_ key, interface_ val)",
    "context._ptr_valueCtx.String": "string_0 __golang context__ptr_valueCtx_String(_ptr_context_valueCtx)",
    "context._ptr_valueCtx.Value": "interface__0 __golang context__ptr_valueCtx_Value(_ptr_context_valueCtx, interface__0)",
    "context.value": "interface_ __golang context_value(context_Context c, interface_ key)",
    "context._ptr_deadlineExceededError.Error": "string_0 __golang context__ptr_deadlineExceededError_Error(_ptr_context_deadlineExceededError)",
    "context._ptr_deadlineExceededError.Temporary": "bool __golang context__ptr_deadlineExceededError_Temporary(_ptr_context_deadlineExceededError)",
    "context._ptr_deadlineExceededError.Timeout": "bool __golang context__ptr_deadlineExceededError_Timeout(_ptr_context_deadlineExceededError)",
    "context._ptr_emptyCtx.Done": "_chan_left_chan_struct__0 __golang context__ptr_emptyCtx_Done(_ptr_context_emptyCtx)",
    "context._ptr_emptyCtx.Err": "error_0 __golang context__ptr_emptyCtx_Err(_ptr_context_emptyCtx)",
    "context._ptr_emptyCtx.Value": "interface__0 __golang context__ptr_emptyCtx_Value(_ptr_context_emptyCtx, interface__0)",
    "context.backgroundCtx.Done": "_chan_left_chan_struct__0 __golang context_backgroundCtx_Done(context_backgroundCtx_0)",
    "context._ptr_backgroundCtx.Done": "_chan_left_chan_struct__0 __golang context__ptr_backgroundCtx_Done(_ptr_context_backgroundCtx)",
    "context.backgroundCtx.Err": "error_0 __golang context_backgroundCtx_Err(context_backgroundCtx_0)",
    "context._ptr_backgroundCtx.Err": "error_0 __golang context__ptr_backgroundCtx_Err(_ptr_context_backgroundCtx)",
    "context._ptr_backgroundCtx.String": "string_0 __golang context__ptr_backgroundCtx_String(_ptr_context_backgroundCtx)",
    "context.backgroundCtx.Value": "interface__0 __golang context_backgroundCtx_Value(context_backgroundCtx_0, interface__0)",
    "context._ptr_backgroundCtx.Value": "interface__0 __golang context__ptr_backgroundCtx_Value(_ptr_context_backgroundCtx, interface__0)",
    "context._ptr_afterFuncCtx.Done": "_chan_left_chan_struct__0 __golang context__ptr_afterFuncCtx_Done(_ptr_context_afterFuncCtx)",
    "context._ptr_afterFuncCtx.Err": "error_0 __golang context__ptr_afterFuncCtx_Err(_ptr_context_afterFuncCtx)",
    "context._ptr_afterFuncCtx.String": "string_0 __golang context__ptr_afterFuncCtx_String(_ptr_context_afterFuncCtx)",
    "context._ptr_afterFuncCtx.Value": "interface__0 __golang context__ptr_afterFuncCtx_Value(_ptr_context_afterFuncCtx, interface__0)",
    "context.stopCtx.Done": "_chan_left_chan_struct__0 __golang context_stopCtx_Done(context_stopCtx_0)",
    "context._ptr_stopCtx.Done": "_chan_left_chan_struct__0 __golang context__ptr_stopCtx_Done(_ptr_context_stopCtx)",
    "context.stopCtx.Err": "error_0 __golang context_stopCtx_Err(context_stopCtx_0)",
    "context._ptr_stopCtx.Err": "error_0 __golang context__ptr_stopCtx_Err(_ptr_context_stopCtx)",
    "context.stopCtx.Value": "interface__0 __golang context_stopCtx_Value(context_stopCtx_0, interface__0)",
    "context._ptr_stopCtx.Value": "interface__0 __golang context__ptr_stopCtx_Value(_ptr_context_stopCtx, interface__0)",
    "context._ptr_timerCtx.Done": "_chan_left_chan_struct__0 __golang context__ptr_timerCtx_Done(_ptr_context_timerCtx)",
    "context._ptr_timerCtx.Err": "error_0 __golang context__ptr_timerCtx_Err(_ptr_context_timerCtx)",
    "context._ptr_timerCtx.Value": "interface__0 __golang context__ptr_timerCtx_Value(_ptr_context_timerCtx, interface__0)",
    "context.valueCtx.Done": "_chan_left_chan_struct__0 __golang context_valueCtx_Done(context_valueCtx_0)",
    "context._ptr_valueCtx.Done": "_chan_left_chan_struct__0 __golang context__ptr_valueCtx_Done(_ptr_context_valueCtx)",
    "context.valueCtx.Err": "error_0 __golang context_valueCtx_Err(context_valueCtx_0)",
    "context._ptr_valueCtx.Err": "error_0 __golang context__ptr_valueCtx_Err(_ptr_context_valueCtx)",
    "crypto.Hash.HashFunc": "crypto_Hash __golang crypto_Hash_HashFunc(crypto_Hash)",
    "crypto.Hash.String": "string_0 __golang crypto_Hash_String(crypto_Hash)",
    "crypto.Hash.Size": "int_0 __golang crypto_Hash_Size(crypto_Hash)",
    "crypto.Hash.New": "hash_Hash_0 __golang crypto_Hash_New(crypto_Hash)",
    "crypto.Hash.Available": "bool __golang crypto_Hash_Available(crypto_Hash)",
    "crypto._ptr_Hash.HashFunc": "crypto_Hash __golang crypto__ptr_Hash_HashFunc(_ptr_crypto_Hash)",
    "crypto._ptr_Hash.New": "hash_Hash_0 __golang crypto__ptr_Hash_New(_ptr_crypto_Hash)",
    "crypto._ptr_Hash.Size": "int_0 __golang crypto__ptr_Hash_Size(_ptr_crypto_Hash)",
    "crypto._ptr_Hash.String": "string_0 __golang crypto__ptr_Hash_String(_ptr_crypto_Hash)",
    "crypto_subtle.XORBytes": "int __golang crypto_subtle_XORBytes(_slice_uint8 dst, _slice_uint8 x, _slice_uint8 y)",
    "crypto_subtle.xorBytes": "void __golang crypto_subtle_xorBytes()",
    "crypto_cipher.newCBC": "crypto_cipher_cbc *__golang crypto_cipher_newCBC(crypto_cipher_Block b, _slice_uint8 iv)",
    "crypto_cipher.NewCBCEncrypter": "crypto_cipher_BlockMode __golang crypto_cipher_NewCBCEncrypter(crypto_cipher_Block b, _slice_uint8 iv)",
    "crypto_cipher._ptr_cbcEncrypter.BlockSize": "int_0 __golang crypto_cipher__ptr_cbcEncrypter_BlockSize(_ptr_cipher_cbcEncrypter)",
    "crypto_cipher._ptr_cbcEncrypter.CryptBlocks": "void __golang crypto_cipher__ptr_cbcEncrypter_CryptBlocks(_ptr_cipher_cbcEncrypter, _slice_uint8_0, _slice_uint8_0)",
    "crypto_cipher._ptr_cbcEncrypter.SetIV": "void __golang crypto_cipher__ptr_cbcEncrypter_SetIV(_ptr_cipher_cbcEncrypter, _slice_uint8_0)",
    "crypto_cipher.NewCBCDecrypter": "crypto_cipher_BlockMode __golang crypto_cipher_NewCBCDecrypter(crypto_cipher_Block b, _slice_uint8 iv)",
    "crypto_cipher._ptr_cbcDecrypter.BlockSize": "int_0 __golang crypto_cipher__ptr_cbcDecrypter_BlockSize(_ptr_cipher_cbcDecrypter)",
    "crypto_cipher._ptr_cbcDecrypter.CryptBlocks": "void __golang crypto_cipher__ptr_cbcDecrypter_CryptBlocks(_ptr_cipher_cbcDecrypter, _slice_uint8_0, _slice_uint8_0)",
    "crypto_cipher._ptr_cbcDecrypter.SetIV": "void __golang crypto_cipher__ptr_cbcDecrypter_SetIV(_ptr_cipher_cbcDecrypter, _slice_uint8_0)",
    "crypto_cipher._ptr_cfb.XORKeyStream": "void __golang crypto_cipher__ptr_cfb_XORKeyStream(_ptr_cipher_cfb, _slice_uint8_0, _slice_uint8_0)",
    "crypto_cipher.newCFB": "crypto_cipher_Stream __golang crypto_cipher_newCFB(crypto_cipher_Block block, _slice_uint8 iv, bool decrypt)",
    "crypto_cipher.NewCTR": "crypto_cipher_Stream __golang crypto_cipher_NewCTR(crypto_cipher_Block block, _slice_uint8 iv)",
    "crypto_cipher._ptr_ctr.refill": "void __golang crypto_cipher__ptr_ctr_refill(_ptr_cipher_ctr)",
    "crypto_cipher._ptr_ctr.XORKeyStream": "void __golang crypto_cipher__ptr_ctr_XORKeyStream(_ptr_cipher_ctr, _slice_uint8_0, _slice_uint8_0)",
    "crypto_cipher._ptr_gcm.NonceSize": "int_0 __golang crypto_cipher__ptr_gcm_NonceSize(_ptr_cipher_gcm)",
    "crypto_cipher._ptr_gcm.Overhead": "int_0 __golang crypto_cipher__ptr_gcm_Overhead(_ptr_cipher_gcm)",
    "crypto_cipher._ptr_gcm.Seal": "_slice_uint8_0 __golang crypto_cipher__ptr_gcm_Seal(_ptr_cipher_gcm, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0)",
    "crypto_cipher._ptr_gcm.mul": "void __golang crypto_cipher__ptr_gcm_mul(crypto_cipher_gcm *g, crypto_cipher_gcmFieldElement *y)",
    "crypto_cipher._ptr_gcm.update": "void __golang crypto_cipher__ptr_gcm_update(crypto_cipher_gcm *g, crypto_cipher_gcmFieldElement *y, _slice_uint8 data)",
    "crypto_cipher._ptr_gcm.counterCrypt": "void __golang crypto_cipher__ptr_gcm_counterCrypt(crypto_cipher_gcm *g, _slice_uint8 out, _slice_uint8 in, uint8 (*counter)[16])",
    "crypto_cipher._ptr_gcm.deriveCounter": "void __golang crypto_cipher__ptr_gcm_deriveCounter(crypto_cipher_gcm *g, uint8 (*counter)[16], _slice_uint8 nonce)",
    "crypto_cipher.StreamWriter.Close": "error_0 __golang crypto_cipher_StreamWriter_Close(cipher_StreamWriter)",
    "crypto_cipher.NewOFB": "crypto_cipher_Stream __golang crypto_cipher_NewOFB(crypto_cipher_Block b, _slice_uint8 iv)",
    "crypto_cipher._ptr_ofb.refill": "void __golang crypto_cipher__ptr_ofb_refill(_ptr_cipher_ofb)",
    "crypto_cipher._ptr_ofb.XORKeyStream": "void __golang crypto_cipher__ptr_ofb_XORKeyStream(_ptr_cipher_ofb, _slice_uint8_0, _slice_uint8_0)",
    "crypto_cipher._ptr_StreamWriter.Close": "error_0 __golang crypto_cipher__ptr_StreamWriter_Close(_ptr_cipher_StreamWriter)",
    "crypto_internal_boring_sig.StandardCrypto": "void __golang crypto_internal_boring_sig_StandardCrypto()",
    "crypto_aes._ptr_gcmAsm.NonceSize": "int_0 __golang crypto_aes__ptr_gcmAsm_NonceSize(_ptr_aes_gcmAsm)",
    "crypto_aes._ptr_gcmAsm.Overhead": "int_0 __golang crypto_aes__ptr_gcmAsm_Overhead(_ptr_aes_gcmAsm)",
    "crypto_aes._ptr_gcmAsm.Seal": "_slice_uint8_0 __golang crypto_aes__ptr_gcmAsm_Seal(_ptr_aes_gcmAsm, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0)",
    "crypto_aes.encryptBlockGo": "void __golang crypto_aes_encryptBlockGo(_slice_uint32 xk, _slice_uint8 dst, _slice_uint8 src)",
    "crypto_aes.expandKeyGo": "void __golang crypto_aes_expandKeyGo(_slice_uint8 key, _slice_uint32 enc, _slice_uint32 dec)",
    "crypto_aes._ptr_aesCipher.BlockSize": "int_0 __golang crypto_aes__ptr_aesCipher_BlockSize(_ptr_aes_aesCipher)",
    "crypto_aes._ptr_aesCipher.Encrypt": "void __golang crypto_aes__ptr_aesCipher_Encrypt(_ptr_aes_aesCipher, _slice_uint8_0, _slice_uint8_0)",
    "crypto_aes._ptr_aesCipher.Decrypt": "void __golang crypto_aes__ptr_aesCipher_Decrypt(_ptr_aes_aesCipher, _slice_uint8_0, _slice_uint8_0)",
    "crypto_aes._ptr_aesCipherAsm.BlockSize": "int_0 __golang crypto_aes__ptr_aesCipherAsm_BlockSize(_ptr_aes_aesCipherAsm)",
    "crypto_aes._ptr_aesCipherAsm.Encrypt": "void __golang crypto_aes__ptr_aesCipherAsm_Encrypt(_ptr_aes_aesCipherAsm, _slice_uint8_0, _slice_uint8_0)",
    "crypto_aes._ptr_aesCipherAsm.Decrypt": "void __golang crypto_aes__ptr_aesCipherAsm_Decrypt(_ptr_aes_aesCipherAsm, _slice_uint8_0, _slice_uint8_0)",
    "crypto_aes.encryptBlockAsm": "void __golang crypto_aes_encryptBlockAsm()",
    "crypto_aes.decryptBlockAsm": "void __golang crypto_aes_decryptBlockAsm()",
    "crypto_aes.expandKeyAsm": "void __golang crypto_aes_expandKeyAsm()",
    "crypto_aes.gcmAesFinish": "void __golang crypto_aes_gcmAesFinish()",
    "crypto_aes.gcmAesInit": "void __golang crypto_aes_gcmAesInit()",
    "crypto_aes.gcmAesData": "void __golang crypto_aes_gcmAesData()",
    "crypto_aes.gcmAesEnc": "void __golang crypto_aes_gcmAesEnc()",
    "crypto_aes.gcmAesDec": "void __golang crypto_aes_gcmAesDec()",
    "crypto_aes._ptr_aesCipherGCM.BlockSize": "int_0 __golang crypto_aes__ptr_aesCipherGCM_BlockSize(_ptr_aes_aesCipherGCM)",
    "crypto_aes._ptr_aesCipherGCM.Decrypt": "void __golang crypto_aes__ptr_aesCipherGCM_Decrypt(_ptr_aes_aesCipherGCM, _slice_uint8_0, _slice_uint8_0)",
    "crypto_aes._ptr_aesCipherGCM.Encrypt": "void __golang crypto_aes__ptr_aesCipherGCM_Encrypt(_ptr_aes_aesCipherGCM, _slice_uint8_0, _slice_uint8_0)",
    "crypto_aes._ptr_KeySizeError.Error": "string_0 __golang crypto_aes__ptr_KeySizeError_Error(_ptr_aes_KeySizeError)",
    "crypto_des.initFeistelBox": "void __golang crypto_des_initFeistelBox()",
    "crypto_des.permuteFinalBlock": "uint64 __golang crypto_des_permuteFinalBlock(uint64 block)",
    "crypto_des._ptr_desCipher.generateSubkeys": "void __golang crypto_des__ptr_desCipher_generateSubkeys(_ptr_des_desCipher, _slice_uint8_0)",
    "crypto_des.KeySizeError.Error": "string_0 __golang crypto_des_KeySizeError_Error(des_KeySizeError)",
    "crypto_des._ptr_desCipher.BlockSize": "int_0 __golang crypto_des__ptr_desCipher_BlockSize(_ptr_des_desCipher)",
    "crypto_des._ptr_desCipher.Encrypt": "void __golang crypto_des__ptr_desCipher_Encrypt(_ptr_des_desCipher, _slice_uint8_0, _slice_uint8_0)",
    "crypto_des._ptr_desCipher.Decrypt": "void __golang crypto_des__ptr_desCipher_Decrypt(_ptr_des_desCipher, _slice_uint8_0, _slice_uint8_0)",
    "crypto_des._ptr_tripleDESCipher.BlockSize": "int_0 __golang crypto_des__ptr_tripleDESCipher_BlockSize(_ptr_des_tripleDESCipher)",
    "crypto_des._ptr_tripleDESCipher.Encrypt": "void __golang crypto_des__ptr_tripleDESCipher_Encrypt(_ptr_des_tripleDESCipher, _slice_uint8_0, _slice_uint8_0)",
    "crypto_des._ptr_tripleDESCipher.Decrypt": "void __golang crypto_des__ptr_tripleDESCipher_Decrypt(_ptr_des_tripleDESCipher, _slice_uint8_0, _slice_uint8_0)",
    "crypto_des._ptr_KeySizeError.Error": "string_0 __golang crypto_des__ptr_KeySizeError_Error(_ptr_des_KeySizeError)",
    "math_rand._ptr_Rand.ExpFloat64": "float64_0 __golang math_rand__ptr_Rand_ExpFloat64(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.NormFloat64": "float64_0 __golang math_rand__ptr_Rand_NormFloat64(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.Seed": "void __golang math_rand__ptr_Rand_Seed(_ptr_rand_Rand, int64_0)",
    "math_rand._ptr_Rand.Int63": "int64_0 __golang math_rand__ptr_Rand_Int63(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.Uint32": "uint32_0 __golang math_rand__ptr_Rand_Uint32(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.Uint64": "uint64_0 __golang math_rand__ptr_Rand_Uint64(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.Int31": "int32_0 __golang math_rand__ptr_Rand_Int31(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.Int": "int_0 __golang math_rand__ptr_Rand_Int(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.Int63n": "int64_0 __golang math_rand__ptr_Rand_Int63n(_ptr_rand_Rand, int64_0)",
    "math_rand._ptr_Rand.Int31n": "int32_0 __golang math_rand__ptr_Rand_Int31n(_ptr_rand_Rand, int32_0)",
    "math_rand._ptr_Rand.int31n": "int32_0 __golang math_rand__ptr_Rand_int31n(_ptr_rand_Rand, int32_0)",
    "math_rand._ptr_Rand.Intn": "int_0 __golang math_rand__ptr_Rand_Intn(_ptr_rand_Rand, int_0)",
    "math_rand._ptr_Rand.Float64": "float64_0 __golang math_rand__ptr_Rand_Float64(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.Float32": "float32_0 __golang math_rand__ptr_Rand_Float32(_ptr_rand_Rand)",
    "math_rand._ptr_Rand.Perm": "_slice_int_0 __golang math_rand__ptr_Rand_Perm(_ptr_rand_Rand, int_0)",
    "math_rand._ptr_Rand.Shuffle": "void __golang math_rand__ptr_Rand_Shuffle(_ptr_rand_Rand, int_0, PTR_funcint_comma__int)",
    "math_rand.globalRand": "math_rand_Rand *__golang math_rand_globalRand()",
    "math_rand._ptr_runtimeSource.Int63": "int64_0 __golang math_rand__ptr_runtimeSource_Int63(_ptr_rand_runtimeSource)",
    "math_rand._ptr_runtimeSource.Seed": "void __golang math_rand__ptr_runtimeSource_Seed(_ptr_rand_runtimeSource, int64_0)",
    "math_rand._ptr_runtimeSource.Uint64": "uint64_0 __golang math_rand__ptr_runtimeSource_Uint64(_ptr_rand_runtimeSource)",
    "math_rand.Intn": "int __golang math_rand_Intn(int n)",
    "math_rand.Float64": "float64 __golang math_rand_Float64()",
    "math_rand._ptr_lockedSource.Int63": "int64_0 __golang math_rand__ptr_lockedSource_Int63(_ptr_rand_lockedSource)",
    "math_rand._ptr_lockedSource.Uint64": "uint64_0 __golang math_rand__ptr_lockedSource_Uint64(_ptr_rand_lockedSource)",
    "math_rand._ptr_lockedSource.Seed": "void __golang math_rand__ptr_lockedSource_Seed(_ptr_rand_lockedSource, int64_0)",
    "math_rand._ptr_lockedSource.seedPos": "void __golang math_rand__ptr_lockedSource_seedPos(math_rand_lockedSource *r, int64 seed, int8 *readPos)",
    "math_rand._ptr_lockedSource.seed": "void __golang math_rand__ptr_lockedSource_seed(_ptr_rand_lockedSource, int64_0)",
    "math_rand._ptr_rngSource.Seed": "void __golang math_rand__ptr_rngSource_Seed(_ptr_rand_rngSource, int64_0)",
    "math_rand._ptr_rngSource.Int63": "int64_0 __golang math_rand__ptr_rngSource_Int63(_ptr_rand_rngSource)",
    "math_rand._ptr_rngSource.Uint64": "uint64_0 __golang math_rand__ptr_rngSource_Uint64(_ptr_rand_rngSource)",
    "math_big.Accuracy.String": "string_0 __golang math_big_Accuracy_String(big_Accuracy)",
    "math_big.addVWlarge": "unsigned __int64 __golang math_big_addVWlarge(_slice_math_big_Word z, _slice_math_big_Word x, unsigned __int64 y)",
    "math_big.subVWlarge": "unsigned __int64 __golang math_big_subVWlarge(_slice_math_big_Word z, _slice_math_big_Word x, unsigned __int64 y)",
    "math_big.shr": "void __golang math_big_shr(math_big_decimal *x, uint s)",
    "math_big._ptr_decimal.round": "void __golang math_big__ptr_decimal_round(math_big_decimal *x, int n)",
    "math_big._ptr_Float.SetPrec": "_ptr_big_Float __golang math_big__ptr_Float_SetPrec(_ptr_big_Float, uint_0)",
    "math_big._ptr_Float.SetMode": "_ptr_big_Float __golang math_big__ptr_Float_SetMode(_ptr_big_Float, big_RoundingMode)",
    "math_big._ptr_Float.Prec": "uint_0 __golang math_big__ptr_Float_Prec(_ptr_big_Float)",
    "math_big._ptr_Float.MinPrec": "uint_0 __golang math_big__ptr_Float_MinPrec(_ptr_big_Float)",
    "math_big._ptr_Float.Acc": "big_Accuracy __golang math_big__ptr_Float_Acc(_ptr_big_Float)",
    "math_big._ptr_Float.Sign": "int_0 __golang math_big__ptr_Float_Sign(_ptr_big_Float)",
    "math_big._ptr_Float.MantExp": "int_0 __golang math_big__ptr_Float_MantExp(_ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.setExpAndRound": "void __golang math_big__ptr_Float_setExpAndRound(math_big_Float *z, int64 exp, uint sbit)",
    "math_big._ptr_Float.SetMantExp": "_ptr_big_Float __golang math_big__ptr_Float_SetMantExp(_ptr_big_Float, _ptr_big_Float, int_0)",
    "math_big._ptr_Float.Signbit": "bool __golang math_big__ptr_Float_Signbit(_ptr_big_Float)",
    "math_big._ptr_Float.IsInf": "bool __golang math_big__ptr_Float_IsInf(_ptr_big_Float)",
    "math_big._ptr_Float.IsInt": "bool __golang math_big__ptr_Float_IsInt(_ptr_big_Float)",
    "math_big._ptr_Float.round": "void __golang math_big__ptr_Float_round(_ptr_big_Float, uint_0)",
    "math_big._ptr_Float.setBits64": "math_big_Float *__golang math_big__ptr_Float_setBits64(math_big_Float *z, bool neg, uint64 x)",
    "math_big._ptr_Float.SetUint64": "_ptr_big_Float __golang math_big__ptr_Float_SetUint64(_ptr_big_Float, uint64_0)",
    "math_big._ptr_Float.SetInt64": "_ptr_big_Float __golang math_big__ptr_Float_SetInt64(_ptr_big_Float, int64_0)",
    "math_big._ptr_Float.SetFloat64": "_ptr_big_Float __golang math_big__ptr_Float_SetFloat64(_ptr_big_Float, float64_0)",
    "math_big.fnorm": "int64 __golang math_big_fnorm(math_big_nat m)",
    "math_big._ptr_Float.SetInt": "_ptr_big_Float __golang math_big__ptr_Float_SetInt(_ptr_big_Float, _ptr_big_Int)",
    "math_big._ptr_Float.SetRat": "_ptr_big_Float __golang math_big__ptr_Float_SetRat(_ptr_big_Float, _ptr_big_Rat)",
    "math_big._ptr_Float.SetInf": "_ptr_big_Float __golang math_big__ptr_Float_SetInf(_ptr_big_Float, bool)",
    "math_big._ptr_Float.Set": "_ptr_big_Float __golang math_big__ptr_Float_Set(_ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.Copy": "_ptr_big_Float __golang math_big__ptr_Float_Copy(_ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.Abs": "_ptr_big_Float __golang math_big__ptr_Float_Abs(_ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.Neg": "_ptr_big_Float __golang math_big__ptr_Float_Neg(_ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.uadd": "void __golang math_big__ptr_Float_uadd(math_big_Float *z, math_big_Float *x, math_big_Float *y)",
    "math_big._ptr_Float.usub": "void __golang math_big__ptr_Float_usub(math_big_Float *z, math_big_Float *x, math_big_Float *y)",
    "math_big._ptr_Float.umul": "void __golang math_big__ptr_Float_umul(math_big_Float *z, math_big_Float *x, math_big_Float *y)",
    "math_big._ptr_Float.uquo": "void __golang math_big__ptr_Float_uquo(math_big_Float *z, math_big_Float *x, math_big_Float *y)",
    "math_big._ptr_Float.ucmp": "int_0 __golang math_big__ptr_Float_ucmp(_ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.Sub": "_ptr_big_Float __golang math_big__ptr_Float_Sub(_ptr_big_Float, _ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.Mul": "_ptr_big_Float __golang math_big__ptr_Float_Mul(_ptr_big_Float, _ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.Quo": "_ptr_big_Float __golang math_big__ptr_Float_Quo(_ptr_big_Float, _ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.Cmp": "int_0 __golang math_big__ptr_Float_Cmp(_ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.pow5": "_ptr_big_Float __golang math_big__ptr_Float_pow5(_ptr_big_Float, uint64_0)",
    "math_big._ptr_Float.Scan": "error_0 __golang math_big__ptr_Float_Scan(_ptr_big_Float, fmt_ScanState_0, int32_0)",
    "math_big._ptr_Float.GobDecode": "error_0 __golang math_big__ptr_Float_GobDecode(_ptr_big_Float, _slice_uint8_0)",
    "math_big._ptr_Float.UnmarshalText": "error_0 __golang math_big__ptr_Float_UnmarshalText(_ptr_big_Float, _slice_uint8_0)",
    "math_big._ptr_Float.Text": "string_0 __golang math_big__ptr_Float_Text(_ptr_big_Float, uint8_0, int_0)",
    "math_big._ptr_Float.String": "string_0 __golang math_big__ptr_Float_String(_ptr_big_Float)",
    "math_big._ptr_Float.Append": "_slice_uint8_0 __golang math_big__ptr_Float_Append(_ptr_big_Float, _slice_uint8_0, uint8_0, int_0)",
    "math_big.roundShortest": "void __golang math_big_roundShortest(math_big_decimal *d, math_big_Float *x)",
    "math_big.fmtE": "_slice_uint8 __golang math_big_fmtE(_slice_uint8 buf, uint8 fmt, int prec, math_big_decimal d)",
    "math_big.fmtF": "_slice_uint8 __golang math_big_fmtF(_slice_uint8 buf, int prec, math_big_decimal d)",
    "math_big._ptr_Float.fmtB": "_slice_uint8_0 __golang math_big__ptr_Float_fmtB(_ptr_big_Float, _slice_uint8_0)",
    "math_big._ptr_Float.fmtX": "_slice_uint8_0 __golang math_big__ptr_Float_fmtX(_ptr_big_Float, _slice_uint8_0, int_0)",
    "math_big._ptr_Float.fmtP": "_slice_uint8_0 __golang math_big__ptr_Float_fmtP(_ptr_big_Float, _slice_uint8_0)",
    "math_big._ptr_Float.Format": "void __golang math_big__ptr_Float_Format(_ptr_big_Float, fmt_State_0, int32_0)",
    "math_big._ptr_Int.Sign": "int_0 __golang math_big__ptr_Int_Sign(_ptr_big_Int)",
    "math_big._ptr_Int.SetInt64": "_ptr_big_Int __golang math_big__ptr_Int_SetInt64(_ptr_big_Int, int64_0)",
    "math_big._ptr_Int.SetUint64": "_ptr_big_Int __golang math_big__ptr_Int_SetUint64(_ptr_big_Int, uint64_0)",
    "math_big._ptr_Int.Set": "_ptr_big_Int __golang math_big__ptr_Int_Set(_ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Bits": "_slice_big_Word __golang math_big__ptr_Int_Bits(_ptr_big_Int)",
    "math_big._ptr_Int.SetBits": "_ptr_big_Int __golang math_big__ptr_Int_SetBits(_ptr_big_Int, _slice_big_Word)",
    "math_big._ptr_Int.Abs": "_ptr_big_Int __golang math_big__ptr_Int_Abs(_ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Neg": "_ptr_big_Int __golang math_big__ptr_Int_Neg(_ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Add": "_ptr_big_Int __golang math_big__ptr_Int_Add(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Sub": "_ptr_big_Int __golang math_big__ptr_Int_Sub(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Mul": "_ptr_big_Int __golang math_big__ptr_Int_Mul(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.MulRange": "_ptr_big_Int __golang math_big__ptr_Int_MulRange(_ptr_big_Int, int64_0, int64_0)",
    "math_big._ptr_Int.Binomial": "_ptr_big_Int __golang math_big__ptr_Int_Binomial(_ptr_big_Int, int64_0, int64_0)",
    "math_big._ptr_Int.Quo": "_ptr_big_Int __golang math_big__ptr_Int_Quo(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Rem": "_ptr_big_Int __golang math_big__ptr_Int_Rem(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Div": "_ptr_big_Int __golang math_big__ptr_Int_Div(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Mod": "_ptr_big_Int __golang math_big__ptr_Int_Mod(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Cmp": "int_0 __golang math_big__ptr_Int_Cmp(_ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.CmpAbs": "int_0 __golang math_big__ptr_Int_CmpAbs(_ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Int64": "int64_0 __golang math_big__ptr_Int_Int64(_ptr_big_Int)",
    "math_big._ptr_Int.Uint64": "uint64_0 __golang math_big__ptr_Int_Uint64(_ptr_big_Int)",
    "math_big._ptr_Int.IsInt64": "bool __golang math_big__ptr_Int_IsInt64(_ptr_big_Int)",
    "math_big._ptr_Int.IsUint64": "bool __golang math_big__ptr_Int_IsUint64(_ptr_big_Int)",
    "math_big._ptr_Int.SetBytes": "_ptr_big_Int __golang math_big__ptr_Int_SetBytes(_ptr_big_Int, _slice_uint8_0)",
    "math_big._ptr_Int.Bytes": "_slice_uint8_0 __golang math_big__ptr_Int_Bytes(_ptr_big_Int)",
    "math_big._ptr_Int.FillBytes": "_slice_uint8_0 __golang math_big__ptr_Int_FillBytes(_ptr_big_Int, _slice_uint8_0)",
    "math_big._ptr_Int.BitLen": "int_0 __golang math_big__ptr_Int_BitLen(_ptr_big_Int)",
    "math_big._ptr_Int.TrailingZeroBits": "uint_0 __golang math_big__ptr_Int_TrailingZeroBits(_ptr_big_Int)",
    "math_big._ptr_Int.exp": "math_big_Int *__golang math_big__ptr_Int_exp(math_big_Int *z, math_big_Int *x, math_big_Int *y, math_big_Int *m, bool slow)",
    "math_big._ptr_Int.GCD": "_ptr_big_Int __golang math_big__ptr_Int_GCD(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big.euclidUpdate": "void __golang math_big_euclidUpdate(math_big_Int *A, math_big_Int *B, math_big_Int *Ua, math_big_Int *Ub, math_big_Int *q, math_big_Int *r, math_big_Int *s, math_big_Int *t, bool extended)",
    "math_big._ptr_Int.lehmerGCD": "_ptr_big_Int __golang math_big__ptr_Int_lehmerGCD(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Rand": "_ptr_big_Int __golang math_big__ptr_Int_Rand(_ptr_big_Int, _ptr_rand_Rand, _ptr_big_Int)",
    "math_big._ptr_Int.ModInverse": "_ptr_big_Int __golang math_big__ptr_Int_ModInverse(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big.Jacobi": "int __golang math_big_Jacobi(math_big_Int *x, math_big_Int *y)",
    "math_big._ptr_Int.modSqrt3Mod4Prime": "_ptr_big_Int __golang math_big__ptr_Int_modSqrt3Mod4Prime(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.modSqrt5Mod8Prime": "_ptr_big_Int __golang math_big__ptr_Int_modSqrt5Mod8Prime(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.modSqrtTonelliShanks": "_ptr_big_Int __golang math_big__ptr_Int_modSqrtTonelliShanks(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.ModSqrt": "_ptr_big_Int __golang math_big__ptr_Int_ModSqrt(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Lsh": "_ptr_big_Int __golang math_big__ptr_Int_Lsh(_ptr_big_Int, _ptr_big_Int, uint_0)",
    "math_big._ptr_Int.Rsh": "_ptr_big_Int __golang math_big__ptr_Int_Rsh(_ptr_big_Int, _ptr_big_Int, uint_0)",
    "math_big._ptr_Int.Bit": "uint_0 __golang math_big__ptr_Int_Bit(_ptr_big_Int, int_0)",
    "math_big._ptr_Int.SetBit": "_ptr_big_Int __golang math_big__ptr_Int_SetBit(_ptr_big_Int, _ptr_big_Int, int_0, uint_0)",
    "math_big._ptr_Int.And": "_ptr_big_Int __golang math_big__ptr_Int_And(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.AndNot": "_ptr_big_Int __golang math_big__ptr_Int_AndNot(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Or": "_ptr_big_Int __golang math_big__ptr_Int_Or(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Xor": "_ptr_big_Int __golang math_big__ptr_Int_Xor(_ptr_big_Int, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Not": "_ptr_big_Int __golang math_big__ptr_Int_Not(_ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Sqrt": "_ptr_big_Int __golang math_big__ptr_Int_Sqrt(_ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Int.Text": "string_0 __golang math_big__ptr_Int_Text(_ptr_big_Int, int_0)",
    "math_big._ptr_Int.Append": "_slice_uint8_0 __golang math_big__ptr_Int_Append(_ptr_big_Int, _slice_uint8_0, int_0)",
    "math_big._ptr_Int.String": "string_0 __golang math_big__ptr_Int_String(_ptr_big_Int)",
    "math_big._ptr_Int.Format": "void __golang math_big__ptr_Int_Format(_ptr_big_Int, fmt_State_0, int32_0)",
    "math_big.byteReader.UnreadByte": "error_0 __golang math_big_byteReader_UnreadByte(big_byteReader)",
    "math_big._ptr_Int.Scan": "error_0 __golang math_big__ptr_Int_Scan(_ptr_big_Int, fmt_ScanState_0, int32_0)",
    "math_big._ptr_Int.GobDecode": "error_0 __golang math_big__ptr_Int_GobDecode(_ptr_big_Int, _slice_uint8_0)",
    "math_big._ptr_Int.UnmarshalText": "error_0 __golang math_big__ptr_Int_UnmarshalText(_ptr_big_Int, _slice_uint8_0)",
    "math_big._ptr_Int.UnmarshalJSON": "error_0 __golang math_big__ptr_Int_UnmarshalJSON(_ptr_big_Int, _slice_uint8_0)",
    "math_big.nat.String": "string_0 __golang math_big_nat_String(big_nat)",
    "math_big.nat.setUint64": "math_big_nat __golang math_big_nat_setUint64(math_big_nat z, uint64 x)",
    "math_big.nat.add": "math_big_nat __golang math_big_nat_add(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.nat.sub": "math_big_nat __golang math_big_nat_sub(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.nat.cmp": "int __golang math_big_nat_cmp(math_big_nat x, math_big_nat y)",
    "math_big.basicMul": "void __golang math_big_basicMul(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.nat.montgomery": "void __golang math_big_nat_montgomery(math_big_nat z, math_big_nat m, math_big_nat x, unsigned __int64 k, int n, math_big_nat _r0, math_big_nat y)",
    "math_big.karatsubaAdd": "void __golang math_big_karatsubaAdd(math_big_nat z, math_big_nat x, int n)",
    "math_big.karatsubaSub": "void __golang math_big_karatsubaSub(math_big_nat z, math_big_nat x, int n)",
    "math_big.karatsuba": "void __golang math_big_karatsuba(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.addAt": "void __golang math_big_addAt(math_big_nat z, math_big_nat x, int i)",
    "math_big.nat.mul": "math_big_nat __golang math_big_nat_mul(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.basicSqr": "void __golang math_big_basicSqr(math_big_nat z, math_big_nat x)",
    "math_big.karatsubaSqr": "void __golang math_big_karatsubaSqr(math_big_nat z, math_big_nat x)",
    "math_big.nat.sqr": "math_big_nat __golang math_big_nat_sqr(math_big_nat z, math_big_nat x)",
    "math_big.nat.mulRange": "math_big_nat __golang math_big_nat_mulRange(math_big_nat z, uint64 a, uint64 b)",
    "math_big.getNat": "math_big_nat *__golang math_big_getNat(int n)",
    "math_big.nat.shl": "math_big_nat __golang math_big_nat_shl(math_big_nat z, math_big_nat x, uint s)",
    "math_big.nat.shr": "math_big_nat __golang math_big_nat_shr(math_big_nat z, math_big_nat x, uint s)",
    "math_big.nat.setBit": "math_big_nat __golang math_big_nat_setBit(math_big_nat z, math_big_nat x, uint i, uint b)",
    "math_big.nat.and": "math_big_nat __golang math_big_nat_and(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.nat.trunc": "math_big_nat __golang math_big_nat_trunc(math_big_nat z, math_big_nat x, uint n)",
    "math_big.nat.andNot": "math_big_nat __golang math_big_nat_andNot(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.nat.or": "math_big_nat __golang math_big_nat_or(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.nat.xor": "math_big_nat __golang math_big_nat_xor(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big.nat.random": "math_big_nat __golang math_big_nat_random(math_big_nat z, math_rand_Rand *rand, math_big_nat limit, int n)",
    "math_big.nat.expNN": "void __golang math_big_nat_expNN(math_big_nat z, math_big_nat m, math_big_nat x, bool slow, math_big_nat _r0, math_big_nat y)",
    "math_big.nat.expNNMontgomeryEven": "void __golang math_big_nat_expNNMontgomeryEven(math_big_nat z, math_big_nat m, math_big_nat x, math_big_nat _r0, math_big_nat y)",
    "math_big.nat.expNNWindowed": "void __golang math_big_nat_expNNWindowed(math_big_nat z, uint logM, math_big_nat _r0, math_big_nat x, math_big_nat y)",
    "math_big.nat.expNNMontgomery": "void __golang math_big_nat_expNNMontgomery(math_big_nat z, math_big_nat m, math_big_nat x, math_big_nat _r0, math_big_nat y)",
    "math_big.nat.setBytes": "math_big_nat __golang math_big_nat_setBytes(math_big_nat z, _slice_uint8 buf)",
    "math_big.nat.sqrt": "math_big_nat __golang math_big_nat_sqrt(math_big_nat z, math_big_nat x)",
    "math_big.nat.subMod2N": "void __golang math_big_nat_subMod2N(math_big_nat z, uint n, math_big_nat _r0, math_big_nat x, math_big_nat y)",
    "math_big.nat.itoa": "_slice_uint8 __golang math_big_nat_itoa(math_big_nat x, bool neg, int base)",
    "math_big.nat.expWW": "math_big_nat __golang math_big_nat_expWW(math_big_nat z, unsigned __int64 x, unsigned __int64 y)",
    "math_big.divisors": "_slice_math_big_divisor __golang math_big_divisors(int m, unsigned __int64 b, int ndigits, unsigned __int64 bb)",
    "math_big.nat.rem": "math_big_nat __golang math_big_nat_rem(math_big_nat z, math_big_nat u, math_big_nat v)",
    "math_big.nat.div": "void __golang math_big_nat_div(math_big_nat z, math_big_nat v, math_big_nat z2, math_big_nat q, math_big_nat r, math_big_nat u)",
    "math_big.nat.modW": "unsigned __int64 __golang math_big_nat_modW(math_big_nat x, unsigned __int64 d)",
    "math_big.divWVW": "unsigned __int64 __golang math_big_divWVW(_slice_math_big_Word z, unsigned __int64 xn, _slice_math_big_Word x, unsigned __int64 y)",
    "math_big.nat.divLarge": "void __golang math_big_nat_divLarge(math_big_nat z, math_big_nat vIn, math_big_nat u, math_big_nat q, math_big_nat r, math_big_nat uIn)",
    "math_big.nat.divBasic": "void __golang math_big_nat_divBasic(math_big_nat q, math_big_nat u, math_big_nat v)",
    "math_big.nat.divRecursive": "void __golang math_big_nat_divRecursive(math_big_nat z, math_big_nat u, math_big_nat v)",
    "math_big._ptr_Int.ProbablyPrime": "bool __golang math_big__ptr_Int_ProbablyPrime(_ptr_big_Int, int_0)",
    "math_big.nat.probablyPrimeMillerRabin": "bool __golang math_big_nat_probablyPrimeMillerRabin(math_big_nat n, int reps, bool force2)",
    "math_big.nat.probablyPrimeLucas": "bool __golang math_big_nat_probablyPrimeLucas(big_nat)",
    "math_big._ptr_Rat.SetFloat64": "_ptr_big_Rat __golang math_big__ptr_Rat_SetFloat64(_ptr_big_Rat, float64_0)",
    "math_big._ptr_Rat.SetFrac": "_ptr_big_Rat __golang math_big__ptr_Rat_SetFrac(_ptr_big_Rat, _ptr_big_Int, _ptr_big_Int)",
    "math_big._ptr_Rat.SetFrac64": "_ptr_big_Rat __golang math_big__ptr_Rat_SetFrac64(_ptr_big_Rat, int64_0, int64_0)",
    "math_big._ptr_Rat.SetInt": "_ptr_big_Rat __golang math_big__ptr_Rat_SetInt(_ptr_big_Rat, _ptr_big_Int)",
    "math_big._ptr_Rat.SetInt64": "_ptr_big_Rat __golang math_big__ptr_Rat_SetInt64(_ptr_big_Rat, int64_0)",
    "math_big._ptr_Rat.SetUint64": "_ptr_big_Rat __golang math_big__ptr_Rat_SetUint64(_ptr_big_Rat, uint64_0)",
    "math_big._ptr_Rat.Set": "_ptr_big_Rat __golang math_big__ptr_Rat_Set(_ptr_big_Rat, _ptr_big_Rat)",
    "math_big._ptr_Rat.Abs": "_ptr_big_Rat __golang math_big__ptr_Rat_Abs(_ptr_big_Rat, _ptr_big_Rat)",
    "math_big._ptr_Rat.Neg": "_ptr_big_Rat __golang math_big__ptr_Rat_Neg(_ptr_big_Rat, _ptr_big_Rat)",
    "math_big._ptr_Rat.Inv": "_ptr_big_Rat __golang math_big__ptr_Rat_Inv(_ptr_big_Rat, _ptr_big_Rat)",
    "math_big._ptr_Rat.Sign": "int_0 __golang math_big__ptr_Rat_Sign(_ptr_big_Rat)",
    "math_big._ptr_Rat.IsInt": "bool __golang math_big__ptr_Rat_IsInt(_ptr_big_Rat)",
    "math_big._ptr_Rat.Num": "_ptr_big_Int __golang math_big__ptr_Rat_Num(_ptr_big_Rat)",
    "math_big._ptr_Rat.Denom": "_ptr_big_Int __golang math_big__ptr_Rat_Denom(_ptr_big_Rat)",
    "math_big._ptr_Rat.norm": "math_big_Rat *__golang math_big__ptr_Rat_norm(math_big_Rat *z)",
    "math_big.mulDenom": "math_big_nat __golang math_big_mulDenom(math_big_nat z, math_big_nat x, math_big_nat y)",
    "math_big._ptr_Int.scaleDenom": "void __golang math_big__ptr_Int_scaleDenom(math_big_Int *z, math_big_Int *x, math_big_nat f)",
    "math_big._ptr_Rat.Cmp": "int_0 __golang math_big__ptr_Rat_Cmp(_ptr_big_Rat, _ptr_big_Rat)",
    "math_big._ptr_Rat.Add": "_ptr_big_Rat __golang math_big__ptr_Rat_Add(_ptr_big_Rat, _ptr_big_Rat, _ptr_big_Rat)",
    "math_big._ptr_Rat.Sub": "_ptr_big_Rat __golang math_big__ptr_Rat_Sub(_ptr_big_Rat, _ptr_big_Rat, _ptr_big_Rat)",
    "math_big._ptr_Rat.Mul": "_ptr_big_Rat __golang math_big__ptr_Rat_Mul(_ptr_big_Rat, _ptr_big_Rat, _ptr_big_Rat)",
    "math_big._ptr_Rat.Quo": "_ptr_big_Rat __golang math_big__ptr_Rat_Quo(_ptr_big_Rat, _ptr_big_Rat, _ptr_big_Rat)",
    "math_big.ratTok": "bool __golang math_big_ratTok(int32 ch_0)",
    "math_big._ptr_Rat.Scan": "error_0 __golang math_big__ptr_Rat_Scan(_ptr_big_Rat, fmt_ScanState_0, int32_0)",
    "math_big._ptr_Rat.String": "string_0 __golang math_big__ptr_Rat_String(_ptr_big_Rat)",
    "math_big._ptr_Rat.marshal": "_slice_uint8_0 __golang math_big__ptr_Rat_marshal(_ptr_big_Rat)",
    "math_big._ptr_Rat.RatString": "string_0 __golang math_big__ptr_Rat_RatString(_ptr_big_Rat)",
    "math_big._ptr_Rat.FloatString": "string_0 __golang math_big__ptr_Rat_FloatString(_ptr_big_Rat, int_0)",
    "math_big._ptr_Rat.GobDecode": "error_0 __golang math_big__ptr_Rat_GobDecode(_ptr_big_Rat, _slice_uint8_0)",
    "math_big._ptr_Rat.UnmarshalText": "error_0 __golang math_big__ptr_Rat_UnmarshalText(_ptr_big_Rat, _slice_uint8_0)",
    "math_big.RoundingMode.String": "string_0 __golang math_big_RoundingMode_String(big_RoundingMode)",
    "math_big.three": "math_big_Float *__golang math_big_three()",
    "math_big._ptr_Float.Sqrt": "_ptr_big_Float __golang math_big__ptr_Float_Sqrt(_ptr_big_Float, _ptr_big_Float)",
    "math_big._ptr_Float.sqrtInverse": "void __golang math_big__ptr_Float_sqrtInverse(math_big_Float *z, math_big_Float *x)",
    "math_big.addVV": "void __golang math_big_addVV()",
    "math_big.subVV": "void __golang math_big_subVV()",
    "math_big.addVW": "void __golang math_big_addVW()",
    "math_big.subVW": "void __golang math_big_subVW()",
    "math_big.shlVU": "void __golang math_big_shlVU()",
    "math_big.shrVU": "void __golang math_big_shrVU()",
    "math_big.mulAddVWW": "void __golang math_big_mulAddVWW()",
    "math_big.addMulVVW": "void __golang math_big_addMulVVW()",
    "math_big._ptr_RoundingMode.String": "string_0 __golang math_big__ptr_RoundingMode_String(_ptr_big_RoundingMode)",
    "math_big._ptr_Accuracy.String": "string_0 __golang math_big__ptr_Accuracy_String(_ptr_big_Accuracy)",
    "math_big._ptr_nat.String": "string_0 __golang math_big__ptr_nat_String(_ptr_big_nat)",
    "math_big._ptr_ErrNaN.Error": "string_0 __golang math_big__ptr_ErrNaN_Error(_ptr_big_ErrNaN)",
    "math_big.byteReader.SkipSpace": "void __golang math_big_byteReader_SkipSpace(big_byteReader)",
    "math_big._ptr_byteReader.SkipSpace": "void __golang math_big__ptr_byteReader_SkipSpace(_ptr_big_byteReader)",
    "math_big._ptr_byteReader.UnreadByte": "error_0 __golang math_big__ptr_byteReader_UnreadByte(_ptr_big_byteReader)",
    "math_big.byteReader.UnreadRune": "error_0 __golang math_big_byteReader_UnreadRune(big_byteReader)",
    "math_big._ptr_byteReader.UnreadRune": "error_0 __golang math_big__ptr_byteReader_UnreadRune(_ptr_big_byteReader)",
    "math_big.addVWlarge_0": "unsigned __int64 __golang math_big_addVWlarge_0(_slice_math_big_Word z, _slice_math_big_Word x, unsigned __int64 y)",
    "math_big.subVWlarge_0": "unsigned __int64 __golang math_big_subVWlarge_0(_slice_math_big_Word z, _slice_math_big_Word x, unsigned __int64 y)",
    "crypto_internal_randutil.MaybeReadByte": "void __golang crypto_internal_randutil_MaybeReadByte(io_Reader r)",
    "crypto_internal_nistec_fiat._ptr_P224Element.One": "_ptr_fiat_P224Element __golang crypto_internal_nistec_fiat__ptr_P224Element_One(_ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.Equal": "int_0 __golang crypto_internal_nistec_fiat__ptr_P224Element_Equal(_ptr_fiat_P224Element, _ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.IsZero": "int_0 __golang crypto_internal_nistec_fiat__ptr_P224Element_IsZero(_ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.Set": "_ptr_fiat_P224Element __golang crypto_internal_nistec_fiat__ptr_P224Element_Set(_ptr_fiat_P224Element, _ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.Bytes": "_slice_uint8_0 __golang crypto_internal_nistec_fiat__ptr_P224Element_Bytes(_ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.bytes": "_slice_uint8 __golang crypto_internal_nistec_fiat__ptr_P224Element_bytes(crypto_internal_nistec_fiat_P224Element *e, uint8 (*out)[28])",
    "crypto_internal_nistec_fiat._ptr_P224Element.Add": "_ptr_fiat_P224Element __golang crypto_internal_nistec_fiat__ptr_P224Element_Add(_ptr_fiat_P224Element, _ptr_fiat_P224Element, _ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.Sub": "_ptr_fiat_P224Element __golang crypto_internal_nistec_fiat__ptr_P224Element_Sub(_ptr_fiat_P224Element, _ptr_fiat_P224Element, _ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.Mul": "_ptr_fiat_P224Element __golang crypto_internal_nistec_fiat__ptr_P224Element_Mul(_ptr_fiat_P224Element, _ptr_fiat_P224Element, _ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.Square": "_ptr_fiat_P224Element __golang crypto_internal_nistec_fiat__ptr_P224Element_Square(_ptr_fiat_P224Element, _ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P224Element.Select": "_ptr_fiat_P224Element __golang crypto_internal_nistec_fiat__ptr_P224Element_Select(_ptr_fiat_P224Element, _ptr_fiat_P224Element, _ptr_fiat_P224Element, int_0)",
    "crypto_internal_nistec_fiat.p224Mul": "void __golang crypto_internal_nistec_fiat_p224Mul(crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p224Square": "void __golang crypto_internal_nistec_fiat_p224Square(crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p224Add": "void __golang crypto_internal_nistec_fiat_p224Add(crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p224Sub": "void __golang crypto_internal_nistec_fiat_p224Sub(crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p224FromMontgomery": "void __golang crypto_internal_nistec_fiat_p224FromMontgomery(crypto_internal_nistec_fiat_p224NonMontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p224ToMontgomery": "void __golang crypto_internal_nistec_fiat_p224ToMontgomery(crypto_internal_nistec_fiat_p224MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p224NonMontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p224Selectznz": "void __golang crypto_internal_nistec_fiat_p224Selectznz(uint64 (*out1)[4], unsigned __int64 arg1, uint64 (*arg2)[4], uint64 (*arg3)[4])",
    "crypto_internal_nistec_fiat.p224ToBytes": "void __golang crypto_internal_nistec_fiat_p224ToBytes(uint8 (*out1)[28], uint64 (*arg1)[4])",
    "crypto_internal_nistec_fiat.p224FromBytes": "void __golang crypto_internal_nistec_fiat_p224FromBytes(uint64 (*out1)[4], uint8 (*arg1)[28])",
    "crypto_internal_nistec_fiat._ptr_P224Element.Invert": "_ptr_fiat_P224Element __golang crypto_internal_nistec_fiat__ptr_P224Element_Invert(_ptr_fiat_P224Element, _ptr_fiat_P224Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.One": "_ptr_fiat_P384Element __golang crypto_internal_nistec_fiat__ptr_P384Element_One(_ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.Equal": "int_0 __golang crypto_internal_nistec_fiat__ptr_P384Element_Equal(_ptr_fiat_P384Element, _ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.IsZero": "int_0 __golang crypto_internal_nistec_fiat__ptr_P384Element_IsZero(_ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.Set": "_ptr_fiat_P384Element __golang crypto_internal_nistec_fiat__ptr_P384Element_Set(_ptr_fiat_P384Element, _ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.Bytes": "_slice_uint8_0 __golang crypto_internal_nistec_fiat__ptr_P384Element_Bytes(_ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.bytes": "_slice_uint8 __golang crypto_internal_nistec_fiat__ptr_P384Element_bytes(crypto_internal_nistec_fiat_P384Element *e, uint8 (*out)[48])",
    "crypto_internal_nistec_fiat._ptr_P384Element.Add": "_ptr_fiat_P384Element __golang crypto_internal_nistec_fiat__ptr_P384Element_Add(_ptr_fiat_P384Element, _ptr_fiat_P384Element, _ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.Sub": "_ptr_fiat_P384Element __golang crypto_internal_nistec_fiat__ptr_P384Element_Sub(_ptr_fiat_P384Element, _ptr_fiat_P384Element, _ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.Mul": "_ptr_fiat_P384Element __golang crypto_internal_nistec_fiat__ptr_P384Element_Mul(_ptr_fiat_P384Element, _ptr_fiat_P384Element, _ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.Square": "_ptr_fiat_P384Element __golang crypto_internal_nistec_fiat__ptr_P384Element_Square(_ptr_fiat_P384Element, _ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P384Element.Select": "_ptr_fiat_P384Element __golang crypto_internal_nistec_fiat__ptr_P384Element_Select(_ptr_fiat_P384Element, _ptr_fiat_P384Element, _ptr_fiat_P384Element, int_0)",
    "crypto_internal_nistec_fiat.p384Mul": "void __golang crypto_internal_nistec_fiat_p384Mul(crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p384Square": "void __golang crypto_internal_nistec_fiat_p384Square(crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p384Add": "void __golang crypto_internal_nistec_fiat_p384Add(crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p384Sub": "void __golang crypto_internal_nistec_fiat_p384Sub(crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p384FromMontgomery": "void __golang crypto_internal_nistec_fiat_p384FromMontgomery(crypto_internal_nistec_fiat_p384NonMontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p384ToMontgomery": "void __golang crypto_internal_nistec_fiat_p384ToMontgomery(crypto_internal_nistec_fiat_p384MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p384NonMontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p384Selectznz": "void __golang crypto_internal_nistec_fiat_p384Selectznz(uint64 (*out1)[6], unsigned __int64 arg1, uint64 (*arg2)[6], uint64 (*arg3)[6])",
    "crypto_internal_nistec_fiat.p384ToBytes": "void __golang crypto_internal_nistec_fiat_p384ToBytes(uint8 (*out1)[48], uint64 (*arg1)[6])",
    "crypto_internal_nistec_fiat.p384FromBytes": "void __golang crypto_internal_nistec_fiat_p384FromBytes(uint64 (*out1)[6], uint8 (*arg1)[48])",
    "crypto_internal_nistec_fiat._ptr_P384Element.Invert": "_ptr_fiat_P384Element __golang crypto_internal_nistec_fiat__ptr_P384Element_Invert(_ptr_fiat_P384Element, _ptr_fiat_P384Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.One": "_ptr_fiat_P521Element __golang crypto_internal_nistec_fiat__ptr_P521Element_One(_ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.Equal": "int_0 __golang crypto_internal_nistec_fiat__ptr_P521Element_Equal(_ptr_fiat_P521Element, _ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.IsZero": "int_0 __golang crypto_internal_nistec_fiat__ptr_P521Element_IsZero(_ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.Set": "_ptr_fiat_P521Element __golang crypto_internal_nistec_fiat__ptr_P521Element_Set(_ptr_fiat_P521Element, _ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.Bytes": "_slice_uint8_0 __golang crypto_internal_nistec_fiat__ptr_P521Element_Bytes(_ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.bytes": "_slice_uint8 __golang crypto_internal_nistec_fiat__ptr_P521Element_bytes(crypto_internal_nistec_fiat_P521Element *e, uint8 (*out)[66])",
    "crypto_internal_nistec_fiat._ptr_P521Element.Add": "_ptr_fiat_P521Element __golang crypto_internal_nistec_fiat__ptr_P521Element_Add(_ptr_fiat_P521Element, _ptr_fiat_P521Element, _ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.Sub": "_ptr_fiat_P521Element __golang crypto_internal_nistec_fiat__ptr_P521Element_Sub(_ptr_fiat_P521Element, _ptr_fiat_P521Element, _ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.Mul": "_ptr_fiat_P521Element __golang crypto_internal_nistec_fiat__ptr_P521Element_Mul(_ptr_fiat_P521Element, _ptr_fiat_P521Element, _ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.Square": "_ptr_fiat_P521Element __golang crypto_internal_nistec_fiat__ptr_P521Element_Square(_ptr_fiat_P521Element, _ptr_fiat_P521Element)",
    "crypto_internal_nistec_fiat._ptr_P521Element.Select": "_ptr_fiat_P521Element __golang crypto_internal_nistec_fiat__ptr_P521Element_Select(_ptr_fiat_P521Element, _ptr_fiat_P521Element, _ptr_fiat_P521Element, int_0)",
    "crypto_internal_nistec_fiat.p521CmovznzU64": "void __golang crypto_internal_nistec_fiat_p521CmovznzU64(uint64 *out1, unsigned __int64 arg1, uint64 arg2, uint64 arg3)",
    "crypto_internal_nistec_fiat.p521Mul": "void __golang crypto_internal_nistec_fiat_p521Mul(crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p521Square": "void __golang crypto_internal_nistec_fiat_p521Square(crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p521Add": "void __golang crypto_internal_nistec_fiat_p521Add(crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p521Sub": "void __golang crypto_internal_nistec_fiat_p521Sub(crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *arg1, crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *arg2)",
    "crypto_internal_nistec_fiat.p521FromMontgomery": "void __golang crypto_internal_nistec_fiat_p521FromMontgomery(crypto_internal_nistec_fiat_p521NonMontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p521ToMontgomery": "void __golang crypto_internal_nistec_fiat_p521ToMontgomery(crypto_internal_nistec_fiat_p521MontgomeryDomainFieldElement *out1, crypto_internal_nistec_fiat_p521NonMontgomeryDomainFieldElement *arg1)",
    "crypto_internal_nistec_fiat.p521Selectznz": "void __golang crypto_internal_nistec_fiat_p521Selectznz(uint64 (*out1)[9], unsigned __int64 arg1, uint64 (*arg2)[9], uint64 (*arg3)[9])",
    "crypto_internal_nistec_fiat.p521ToBytes": "void __golang crypto_internal_nistec_fiat_p521ToBytes(uint8 (*out1)[66], uint64 (*arg1)[9])",
    "crypto_internal_nistec_fiat.p521FromBytes": "void __golang crypto_internal_nistec_fiat_p521FromBytes(uint64 (*out1)[9], uint8 (*arg1)[66])",
    "crypto_internal_nistec_fiat._ptr_P521Element.Invert": "_ptr_fiat_P521Element __golang crypto_internal_nistec_fiat__ptr_P521Element_Invert(_ptr_fiat_P521Element, _ptr_fiat_P521Element)",
    "crypto_internal_nistec.NewP224Point": "crypto_internal_nistec_P224Point *__golang crypto_internal_nistec_NewP224Point()",
    "crypto_internal_nistec._ptr_P224Point.SetGenerator": "crypto_internal_nistec_P224Point *__golang crypto_internal_nistec__ptr_P224Point_SetGenerator(crypto_internal_nistec_P224Point *p)",
    "crypto_internal_nistec._ptr_P224Point.Set": "_ptr_nistec_P224Point __golang crypto_internal_nistec__ptr_P224Point_Set(_ptr_nistec_P224Point, _ptr_nistec_P224Point)",
    "crypto_internal_nistec.p224B": "crypto_internal_nistec_fiat_P224Element *__golang crypto_internal_nistec_p224B()",
    "crypto_internal_nistec.p224Polynomial": "crypto_internal_nistec_fiat_P224Element *__golang crypto_internal_nistec_p224Polynomial(crypto_internal_nistec_fiat_P224Element *y2, crypto_internal_nistec_fiat_P224Element *x)",
    "crypto_internal_nistec.p224CheckOnCurve": "error __golang crypto_internal_nistec_p224CheckOnCurve(crypto_internal_nistec_fiat_P224Element *x, crypto_internal_nistec_fiat_P224Element *y)",
    "crypto_internal_nistec._ptr_P224Point.Bytes": "_slice_uint8_0 __golang crypto_internal_nistec__ptr_P224Point_Bytes(_ptr_nistec_P224Point)",
    "crypto_internal_nistec._ptr_P224Point.bytes": "_slice_uint8 __golang crypto_internal_nistec__ptr_P224Point_bytes(crypto_internal_nistec_P224Point *p, uint8 (*out)[57])",
    "crypto_internal_nistec._ptr_P224Point.BytesCompressed": "_slice_uint8_0 __golang crypto_internal_nistec__ptr_P224Point_BytesCompressed(_ptr_nistec_P224Point)",
    "crypto_internal_nistec._ptr_P224Point.bytesCompressed": "_slice_uint8 __golang crypto_internal_nistec__ptr_P224Point_bytesCompressed(crypto_internal_nistec_P224Point *p, uint8 (*out)[29])",
    "crypto_internal_nistec._ptr_P224Point.Add": "_ptr_nistec_P224Point __golang crypto_internal_nistec__ptr_P224Point_Add(_ptr_nistec_P224Point, _ptr_nistec_P224Point, _ptr_nistec_P224Point)",
    "crypto_internal_nistec._ptr_P224Point.Double": "_ptr_nistec_P224Point __golang crypto_internal_nistec__ptr_P224Point_Double(_ptr_nistec_P224Point, _ptr_nistec_P224Point)",
    "crypto_internal_nistec._ptr_P224Point.Select": "_ptr_nistec_P224Point __golang crypto_internal_nistec__ptr_P224Point_Select(_ptr_nistec_P224Point, _ptr_nistec_P224Point, _ptr_nistec_P224Point, int_0)",
    "crypto_internal_nistec._ptr_p224Table.Select": "void __golang crypto_internal_nistec__ptr_p224Table_Select(crypto_internal_nistec_p224Table *table, crypto_internal_nistec_P224Point *p, uint8 n)",
    "crypto_internal_nistec._ptr_P224Point.generatorTable": "crypto_internal_nistec_p224Table (*__golang crypto_internal_nistec__ptr_P224Point_generatorTable(crypto_internal_nistec_P224Point *p))[56]",
    "crypto_internal_nistec.p224Sqrt": "bool __golang crypto_internal_nistec_p224Sqrt(crypto_internal_nistec_fiat_P224Element *e, crypto_internal_nistec_fiat_P224Element *x)",
    "crypto_internal_nistec.p224SqrtCandidate": "void __golang crypto_internal_nistec_p224SqrtCandidate(crypto_internal_nistec_fiat_P224Element *r, crypto_internal_nistec_fiat_P224Element *x)",
    "crypto_internal_nistec.NewP256Point": "crypto_internal_nistec_P256Point *__golang crypto_internal_nistec_NewP256Point()",
    "crypto_internal_nistec._ptr_P256Point.SetGenerator": "crypto_internal_nistec_P256Point *__golang crypto_internal_nistec__ptr_P256Point_SetGenerator(crypto_internal_nistec_P256Point *p)",
    "crypto_internal_nistec._ptr_P256Point.Set": "_ptr_nistec_P256Point __golang crypto_internal_nistec__ptr_P256Point_Set(_ptr_nistec_P256Point, _ptr_nistec_P256Point)",
    "crypto_internal_nistec.p256Polynomial": "crypto_internal_nistec_p256Element *__golang crypto_internal_nistec_p256Polynomial(crypto_internal_nistec_p256Element *y2, crypto_internal_nistec_p256Element *x)",
    "crypto_internal_nistec.p256CheckOnCurve": "error __golang crypto_internal_nistec_p256CheckOnCurve(crypto_internal_nistec_p256Element *x, crypto_internal_nistec_p256Element *y)",
    "crypto_internal_nistec.p256Add": "void __golang crypto_internal_nistec_p256Add(crypto_internal_nistec_p256Element *res, crypto_internal_nistec_p256Element *x, crypto_internal_nistec_p256Element *y)",
    "crypto_internal_nistec.p256Sqrt": "bool __golang crypto_internal_nistec_p256Sqrt(crypto_internal_nistec_p256Element *e, crypto_internal_nistec_p256Element *x)",
    "crypto_internal_nistec.p256OrdReduce": "void __golang crypto_internal_nistec_p256OrdReduce(crypto_internal_nistec_p256OrdElement *s)",
    "crypto_internal_nistec._ptr_P256Point.Add": "_ptr_nistec_P256Point __golang crypto_internal_nistec__ptr_P256Point_Add(_ptr_nistec_P256Point, _ptr_nistec_P256Point, _ptr_nistec_P256Point)",
    "crypto_internal_nistec._ptr_P256Point.Double": "_ptr_nistec_P256Point __golang crypto_internal_nistec__ptr_P256Point_Double(_ptr_nistec_P256Point, _ptr_nistec_P256Point)",
    "crypto_internal_nistec._ptr_P256Point.Bytes": "_slice_uint8_0 __golang crypto_internal_nistec__ptr_P256Point_Bytes(_ptr_nistec_P256Point)",
    "crypto_internal_nistec._ptr_P256Point.bytes": "_slice_uint8 __golang crypto_internal_nistec__ptr_P256Point_bytes(crypto_internal_nistec_P256Point *p, uint8 (*out)[65])",
    "crypto_internal_nistec._ptr_P256Point.affineFromMont": "void __golang crypto_internal_nistec__ptr_P256Point_affineFromMont(crypto_internal_nistec_P256Point *p, crypto_internal_nistec_p256Element *x, crypto_internal_nistec_p256Element *y)",
    "crypto_internal_nistec._ptr_P256Point.BytesCompressed": "_slice_uint8_0 __golang crypto_internal_nistec__ptr_P256Point_BytesCompressed(_ptr_nistec_P256Point)",
    "crypto_internal_nistec._ptr_P256Point.bytesCompressed": "_slice_uint8 __golang crypto_internal_nistec__ptr_P256Point_bytesCompressed(crypto_internal_nistec_P256Point *p, uint8 (*out)[33])",
    "crypto_internal_nistec._ptr_P256Point.Select": "_ptr_nistec_P256Point __golang crypto_internal_nistec__ptr_P256Point_Select(_ptr_nistec_P256Point, _ptr_nistec_P256Point, _ptr_nistec_P256Point, int_0)",
    "crypto_internal_nistec.p256Inverse": "void __golang crypto_internal_nistec_p256Inverse(crypto_internal_nistec_p256Element *out, crypto_internal_nistec_p256Element *in)",
    "crypto_internal_nistec._ptr_P256Point.p256BaseMult": "void __golang crypto_internal_nistec__ptr_P256Point_p256BaseMult(crypto_internal_nistec_P256Point *p, crypto_internal_nistec_p256OrdElement *scalar)",
    "crypto_internal_nistec._ptr_P256Point.p256ScalarMult": "void __golang crypto_internal_nistec__ptr_P256Point_p256ScalarMult(crypto_internal_nistec_P256Point *p, crypto_internal_nistec_p256OrdElement *scalar)",
    "crypto_internal_nistec.NewP384Point": "crypto_internal_nistec_P384Point *__golang crypto_internal_nistec_NewP384Point()",
    "crypto_internal_nistec._ptr_P384Point.SetGenerator": "crypto_internal_nistec_P384Point *__golang crypto_internal_nistec__ptr_P384Point_SetGenerator(crypto_internal_nistec_P384Point *p)",
    "crypto_internal_nistec._ptr_P384Point.Set": "_ptr_nistec_P384Point __golang crypto_internal_nistec__ptr_P384Point_Set(_ptr_nistec_P384Point, _ptr_nistec_P384Point)",
    "crypto_internal_nistec.p384B": "crypto_internal_nistec_fiat_P384Element *__golang crypto_internal_nistec_p384B()",
    "crypto_internal_nistec.p384Polynomial": "crypto_internal_nistec_fiat_P384Element *__golang crypto_internal_nistec_p384Polynomial(crypto_internal_nistec_fiat_P384Element *y2, crypto_internal_nistec_fiat_P384Element *x)",
    "crypto_internal_nistec.p384CheckOnCurve": "error __golang crypto_internal_nistec_p384CheckOnCurve(crypto_internal_nistec_fiat_P384Element *x, crypto_internal_nistec_fiat_P384Element *y)",
    "crypto_internal_nistec._ptr_P384Point.Bytes": "_slice_uint8_0 __golang crypto_internal_nistec__ptr_P384Point_Bytes(_ptr_nistec_P384Point)",
    "crypto_internal_nistec._ptr_P384Point.bytes": "_slice_uint8 __golang crypto_internal_nistec__ptr_P384Point_bytes(crypto_internal_nistec_P384Point *p, uint8 (*out)[97])",
    "crypto_internal_nistec._ptr_P384Point.BytesCompressed": "_slice_uint8_0 __golang crypto_internal_nistec__ptr_P384Point_BytesCompressed(_ptr_nistec_P384Point)",
    "crypto_internal_nistec._ptr_P384Point.bytesCompressed": "_slice_uint8 __golang crypto_internal_nistec__ptr_P384Point_bytesCompressed(crypto_internal_nistec_P384Point *p, uint8 (*out)[49])",
    "crypto_internal_nistec._ptr_P384Point.Add": "_ptr_nistec_P384Point __golang crypto_internal_nistec__ptr_P384Point_Add(_ptr_nistec_P384Point, _ptr_nistec_P384Point, _ptr_nistec_P384Point)",
    "crypto_internal_nistec._ptr_P384Point.Double": "_ptr_nistec_P384Point __golang crypto_internal_nistec__ptr_P384Point_Double(_ptr_nistec_P384Point, _ptr_nistec_P384Point)",
    "crypto_internal_nistec._ptr_P384Point.Select": "_ptr_nistec_P384Point __golang crypto_internal_nistec__ptr_P384Point_Select(_ptr_nistec_P384Point, _ptr_nistec_P384Point, _ptr_nistec_P384Point, int_0)",
    "crypto_internal_nistec._ptr_p384Table.Select": "void __golang crypto_internal_nistec__ptr_p384Table_Select(crypto_internal_nistec_p384Table *table, crypto_internal_nistec_P384Point *p, uint8 n)",
    "crypto_internal_nistec._ptr_P384Point.generatorTable": "crypto_internal_nistec_p384Table (*__golang crypto_internal_nistec__ptr_P384Point_generatorTable(crypto_internal_nistec_P384Point *p))[96]",
    "crypto_internal_nistec.p384Sqrt": "bool __golang crypto_internal_nistec_p384Sqrt(crypto_internal_nistec_fiat_P384Element *e, crypto_internal_nistec_fiat_P384Element *x)",
    "crypto_internal_nistec.p384SqrtCandidate": "void __golang crypto_internal_nistec_p384SqrtCandidate(crypto_internal_nistec_fiat_P384Element *z, crypto_internal_nistec_fiat_P384Element *x)",
    "crypto_internal_nistec.NewP521Point": "crypto_internal_nistec_P521Point *__golang crypto_internal_nistec_NewP521Point()",
    "crypto_internal_nistec._ptr_P521Point.SetGenerator": "crypto_internal_nistec_P521Point *__golang crypto_internal_nistec__ptr_P521Point_SetGenerator(crypto_internal_nistec_P521Point *p)",
    "crypto_internal_nistec._ptr_P521Point.Set": "_ptr_nistec_P521Point __golang crypto_internal_nistec__ptr_P521Point_Set(_ptr_nistec_P521Point, _ptr_nistec_P521Point)",
    "crypto_internal_nistec.p521B": "crypto_internal_nistec_fiat_P521Element *__golang crypto_internal_nistec_p521B()",
    "crypto_internal_nistec.p521Polynomial": "crypto_internal_nistec_fiat_P521Element *__golang crypto_internal_nistec_p521Polynomial(crypto_internal_nistec_fiat_P521Element *y2, crypto_internal_nistec_fiat_P521Element *x)",
    "crypto_internal_nistec.p521CheckOnCurve": "error __golang crypto_internal_nistec_p521CheckOnCurve(crypto_internal_nistec_fiat_P521Element *x, crypto_internal_nistec_fiat_P521Element *y)",
    "crypto_internal_nistec._ptr_P521Point.Bytes": "_slice_uint8_0 __golang crypto_internal_nistec__ptr_P521Point_Bytes(_ptr_nistec_P521Point)",
    "crypto_internal_nistec._ptr_P521Point.bytes": "_slice_uint8 __golang crypto_internal_nistec__ptr_P521Point_bytes(crypto_internal_nistec_P521Point *p, uint8 (*out)[133])",
    "crypto_internal_nistec._ptr_P521Point.BytesCompressed": "_slice_uint8_0 __golang crypto_internal_nistec__ptr_P521Point_BytesCompressed(_ptr_nistec_P521Point)",
    "crypto_internal_nistec._ptr_P521Point.bytesCompressed": "_slice_uint8 __golang crypto_internal_nistec__ptr_P521Point_bytesCompressed(crypto_internal_nistec_P521Point *p, uint8 (*out)[67])",
    "crypto_internal_nistec._ptr_P521Point.Add": "_ptr_nistec_P521Point __golang crypto_internal_nistec__ptr_P521Point_Add(_ptr_nistec_P521Point, _ptr_nistec_P521Point, _ptr_nistec_P521Point)",
    "crypto_internal_nistec._ptr_P521Point.Double": "_ptr_nistec_P521Point __golang crypto_internal_nistec__ptr_P521Point_Double(_ptr_nistec_P521Point, _ptr_nistec_P521Point)",
    "crypto_internal_nistec._ptr_P521Point.Select": "_ptr_nistec_P521Point __golang crypto_internal_nistec__ptr_P521Point_Select(_ptr_nistec_P521Point, _ptr_nistec_P521Point, _ptr_nistec_P521Point, int_0)",
    "crypto_internal_nistec._ptr_p521Table.Select": "void __golang crypto_internal_nistec__ptr_p521Table_Select(crypto_internal_nistec_p521Table *table, crypto_internal_nistec_P521Point *p, uint8 n)",
    "crypto_internal_nistec._ptr_P521Point.generatorTable": "crypto_internal_nistec_p521Table (*__golang crypto_internal_nistec__ptr_P521Point_generatorTable(crypto_internal_nistec_P521Point *p))[132]",
    "crypto_internal_nistec.p521Sqrt": "bool __golang crypto_internal_nistec_p521Sqrt(crypto_internal_nistec_fiat_P521Element *e, crypto_internal_nistec_fiat_P521Element *x)",
    "crypto_internal_nistec.p521SqrtCandidate": "void __golang crypto_internal_nistec_p521SqrtCandidate(crypto_internal_nistec_fiat_P521Element *z, crypto_internal_nistec_fiat_P521Element *x)",
    "crypto_internal_nistec.p256OrdLittleToBig": "void __golang crypto_internal_nistec_p256OrdLittleToBig()",
    "crypto_internal_nistec.p256OrdBigToLittle": "void __golang crypto_internal_nistec_p256OrdBigToLittle()",
    "crypto_internal_nistec.p256LittleToBig": "void __golang crypto_internal_nistec_p256LittleToBig()",
    "crypto_internal_nistec.p256BigToLittle": "void __golang crypto_internal_nistec_p256BigToLittle()",
    "crypto_internal_nistec.p256MovCond": "void __golang crypto_internal_nistec_p256MovCond()",
    "crypto_internal_nistec.p256NegCond": "void __golang crypto_internal_nistec_p256NegCond()",
    "crypto_internal_nistec.p256Sqr": "void __golang crypto_internal_nistec_p256Sqr()",
    "crypto_internal_nistec.p256Mul": "void __golang crypto_internal_nistec_p256Mul()",
    "crypto_internal_nistec.p256FromMont": "void __golang crypto_internal_nistec_p256FromMont()",
    "crypto_internal_nistec.p256Select": "void __golang crypto_internal_nistec_p256Select()",
    "crypto_internal_nistec.p256SelectAffine": "void __golang crypto_internal_nistec_p256SelectAffine()",
    "crypto_internal_nistec.p256OrdMul": "void __golang crypto_internal_nistec_p256OrdMul()",
    "crypto_internal_nistec.p256OrdSqr": "void __golang crypto_internal_nistec_p256OrdSqr()",
    "crypto_internal_nistec.p256PointAddAffineAsm": "void __golang crypto_internal_nistec_p256PointAddAffineAsm()",
    "crypto_internal_nistec.p256PointAddAsm": "void __golang crypto_internal_nistec_p256PointAddAsm()",
    "crypto_internal_nistec.p256PointDoubleAsm": "void __golang crypto_internal_nistec_p256PointDoubleAsm()",
    "crypto_internal_edwards25519_field._ptr_Element.reduce": "crypto_internal_edwards25519_field_Element *__golang crypto_internal_edwards25519_field__ptr_Element_reduce(crypto_internal_edwards25519_field_Element *v)",
    "crypto_internal_edwards25519_field._ptr_Element.Add": "crypto_internal_edwards25519_field_Element *__golang crypto_internal_edwards25519_field__ptr_Element_Add(crypto_internal_edwards25519_field_Element *v, crypto_internal_edwards25519_field_Element *a, crypto_internal_edwards25519_field_Element *b)",
    "crypto_internal_edwards25519_field._ptr_Element.Subtract": "crypto_internal_edwards25519_field_Element *__golang crypto_internal_edwards25519_field__ptr_Element_Subtract(crypto_internal_edwards25519_field_Element *v, crypto_internal_edwards25519_field_Element *a, crypto_internal_edwards25519_field_Element *b)",
    "crypto_internal_edwards25519_field._ptr_Element.Invert": "crypto_internal_edwards25519_field_Element *__golang crypto_internal_edwards25519_field__ptr_Element_Invert(crypto_internal_edwards25519_field_Element *v, crypto_internal_edwards25519_field_Element *z)",
    "crypto_internal_edwards25519_field._ptr_Element.bytes": "_slice_uint8 __golang crypto_internal_edwards25519_field__ptr_Element_bytes(crypto_internal_edwards25519_field_Element *v, uint8 (*out)[32])",
    "crypto_internal_edwards25519_field._ptr_Element.Equal": "int __golang crypto_internal_edwards25519_field__ptr_Element_Equal(crypto_internal_edwards25519_field_Element *v, crypto_internal_edwards25519_field_Element *u)",
    "crypto_internal_edwards25519_field._ptr_Element.Swap": "void __golang crypto_internal_edwards25519_field__ptr_Element_Swap(crypto_internal_edwards25519_field_Element *v, crypto_internal_edwards25519_field_Element *u, int cond)",
    "crypto_internal_edwards25519_field._ptr_Element.Absolute": "crypto_internal_edwards25519_field_Element *__golang crypto_internal_edwards25519_field__ptr_Element_Absolute(crypto_internal_edwards25519_field_Element *v, crypto_internal_edwards25519_field_Element *u)",
    "crypto_internal_edwards25519_field._ptr_Element.Mult32": "crypto_internal_edwards25519_field_Element *__golang crypto_internal_edwards25519_field__ptr_Element_Mult32(crypto_internal_edwards25519_field_Element *v, crypto_internal_edwards25519_field_Element *x, uint32 y)",
    "crypto_internal_edwards25519_field._ptr_Element.Pow22523": "crypto_internal_edwards25519_field_Element *__golang crypto_internal_edwards25519_field__ptr_Element_Pow22523(crypto_internal_edwards25519_field_Element *v, crypto_internal_edwards25519_field_Element *x)",
    "crypto_internal_edwards25519_field._ptr_Element.carryPropagateGeneric": "crypto_internal_edwards25519_field_Element *__golang crypto_internal_edwards25519_field__ptr_Element_carryPropagateGeneric(crypto_internal_edwards25519_field_Element *v)",
    "crypto_internal_edwards25519_field.feMul": "void __golang crypto_internal_edwards25519_field_feMul()",
    "crypto_internal_edwards25519_field.feSquare": "void __golang crypto_internal_edwards25519_field_feSquare()",
    "crypto_ecdh._ptr_PublicKey.Equal": "bool __golang crypto_ecdh__ptr_PublicKey_Equal(_ptr_ecdh_PublicKey, crypto_PublicKey_0)",
    "crypto_ecdh._ptr_PublicKey.Curve": "ecdh_Curve __golang crypto_ecdh__ptr_PublicKey_Curve(_ptr_ecdh_PublicKey)",
    "crypto_ecdh._ptr_PrivateKey.Bytes": "_slice_uint8_0 __golang crypto_ecdh__ptr_PrivateKey_Bytes(_ptr_ecdh_PrivateKey)",
    "crypto_ecdh._ptr_PrivateKey.Equal": "bool __golang crypto_ecdh__ptr_PrivateKey_Equal(_ptr_ecdh_PrivateKey, crypto_PrivateKey_0)",
    "crypto_ecdh._ptr_PrivateKey.Curve": "ecdh_Curve __golang crypto_ecdh__ptr_PrivateKey_Curve(_ptr_ecdh_PrivateKey)",
    "crypto_ecdh._ptr_PrivateKey.PublicKey": "_ptr_ecdh_PublicKey __golang crypto_ecdh__ptr_PrivateKey_PublicKey(_ptr_ecdh_PrivateKey)",
    "crypto_ecdh._ptr_PrivateKey.Public": "crypto_PublicKey_0 __golang crypto_ecdh__ptr_PrivateKey_Public(_ptr_ecdh_PrivateKey)",
    "crypto_ecdh.isLess": "bool __golang crypto_ecdh_isLess(_slice_uint8 a, _slice_uint8 b)",
    "crypto_ecdh._ptr_x25519Curve.String": "string_0 __golang crypto_ecdh__ptr_x25519Curve_String(_ptr_ecdh_x25519Curve)",
    "crypto_ecdh._ptr_x25519Curve.privateKeyToPublicKey": "_ptr_ecdh_PublicKey __golang crypto_ecdh__ptr_x25519Curve_privateKeyToPublicKey(_ptr_ecdh_x25519Curve, _ptr_ecdh_PrivateKey)",
    "crypto_ecdh.x25519ScalarMult": "void __golang crypto_ecdh_x25519ScalarMult(_slice_uint8 dst, _slice_uint8 scalar, _slice_uint8 point)",
    "crypto_ecdh._ptr_nistCurve_go.shape._ptr_uint8_.privateKeyToPublicKey": "crypto_ecdh_PublicKey *__golang crypto_ecdh__ptr_nistCurve_go_shape__ptr_uint8__privateKeyToPublicKey(crypto_ecdh__ptr_nistCurve_go_shape__ptr_uint8__privateKeyToPublicKey::_param9 c, crypto_ecdh_PrivateKey *key)",
    "crypto_ecdh._ptr_nistCurve__ptr_crypto_internal_nistec.P521Point_.privateKeyToPublicKey": "_ptr_ecdh_PublicKey __golang crypto_ecdh__ptr_nistCurve__ptr_crypto_internal_nistec_P521Point__privateKeyToPublicKey(_ptr_ecdh_nistCurve__ptr_crypto_internal_nistec_P521Point_, _ptr_ecdh_PrivateKey)",
    "crypto_ecdh._ptr_nistCurve__ptr_crypto_internal_nistec.P521Point_.String": "string_0 __golang crypto_ecdh__ptr_nistCurve__ptr_crypto_internal_nistec_P521Point__String(_ptr_ecdh_nistCurve__ptr_crypto_internal_nistec_P521Point_)",
    "crypto_ecdh._ptr_nistCurve__ptr_crypto_internal_nistec.P384Point_.privateKeyToPublicKey": "_ptr_ecdh_PublicKey __golang crypto_ecdh__ptr_nistCurve__ptr_crypto_internal_nistec_P384Point__privateKeyToPublicKey(_ptr_ecdh_nistCurve__ptr_crypto_internal_nistec_P384Point_, _ptr_ecdh_PrivateKey)",
    "crypto_ecdh._ptr_nistCurve__ptr_crypto_internal_nistec.P384Point_.String": "string_0 __golang crypto_ecdh__ptr_nistCurve__ptr_crypto_internal_nistec_P384Point__String(_ptr_ecdh_nistCurve__ptr_crypto_internal_nistec_P384Point_)",
    "crypto_ecdh._ptr_nistCurve__ptr_crypto_internal_nistec.P256Point_.privateKeyToPublicKey": "_ptr_ecdh_PublicKey __golang crypto_ecdh__ptr_nistCurve__ptr_crypto_internal_nistec_P256Point__privateKeyToPublicKey(_ptr_ecdh_nistCurve__ptr_crypto_internal_nistec_P256Point_, _ptr_ecdh_PrivateKey)",
    "crypto_ecdh._ptr_nistCurve__ptr_crypto_internal_nistec.P256Point_.String": "string_0 __golang crypto_ecdh__ptr_nistCurve__ptr_crypto_internal_nistec_P256Point__String(_ptr_ecdh_nistCurve__ptr_crypto_internal_nistec_P256Point_)",
    "crypto_elliptic.Marshal": "_slice_uint8 __golang crypto_elliptic_Marshal(crypto_elliptic_Curve curve, math_big_Int *x, math_big_Int *y)",
    "crypto_elliptic.panicIfNotOnCurve": "void __golang crypto_elliptic_panicIfNotOnCurve(crypto_elliptic_Curve curve, math_big_Int *x, math_big_Int *y)",
    "crypto_elliptic.initAll": "void __golang crypto_elliptic_initAll()",
    "crypto_elliptic.initP224": "void __golang crypto_elliptic_initP224()",
    "crypto_elliptic.initP256": "void __golang crypto_elliptic_initP256()",
    "crypto_elliptic.initP384": "void __golang crypto_elliptic_initP384()",
    "crypto_elliptic.initP521": "void __golang crypto_elliptic_initP521()",
    "crypto_elliptic.p256Curve.Inverse": "_ptr_big_Int __golang crypto_elliptic_p256Curve_Inverse(elliptic_p256Curve, _ptr_big_Int)",
    "crypto_elliptic._ptr_CurveParams.Params": "crypto_elliptic_CurveParams *__golang crypto_elliptic__ptr_CurveParams_Params(crypto_elliptic_CurveParams *curve)",
    "crypto_elliptic._ptr_CurveParams.polynomial": "_ptr_big_Int __golang crypto_elliptic__ptr_CurveParams_polynomial(_ptr_elliptic_CurveParams, _ptr_big_Int)",
    "crypto_elliptic._ptr_CurveParams.IsOnCurve": "bool __golang crypto_elliptic__ptr_CurveParams_IsOnCurve(_ptr_elliptic_CurveParams, _ptr_big_Int, _ptr_big_Int)",
    "crypto_elliptic.zForAffine": "math_big_Int *__golang crypto_elliptic_zForAffine(math_big_Int *x, math_big_Int *y)",
    "crypto_elliptic._ptr_nistCurve_go.shape._ptr_uint8_.CombinedMult": "void __golang crypto_elliptic__ptr_nistCurve_go_shape__ptr_uint8__CombinedMult(crypto_elliptic__ptr_nistCurve_go_shape__ptr_uint8__CombinedMult::_param28 curve, math_big_Int *Px, _slice_uint8 s2, math_big_Int *Py, math_big_Int *x, math_big_Int *y, _slice_uint8 s1)",
    "crypto_elliptic._ptr_nistCurve_go.shape._ptr_uint8_.normalizeScalar": "_slice_uint8 __golang crypto_elliptic__ptr_nistCurve_go_shape__ptr_uint8__normalizeScalar(crypto_elliptic__ptr_nistCurve_go_shape__ptr_uint8__normalizeScalar::_param23 curve, _slice_uint8 scalar)",
    "crypto_elliptic._ptr_nistCurve_go.shape._ptr_uint8_.IsOnCurve": "bool __golang crypto_elliptic__ptr_nistCurve_go_shape__ptr_uint8__IsOnCurve(crypto_elliptic__ptr_nistCurve_go_shape__ptr_uint8__IsOnCurve::_param14 curve, math_big_Int *x, math_big_Int *y)",
    "crypto_elliptic._ptr_nistCurve__ptr_crypto_internal_nistec.P521Point_.IsOnCurve": "bool __golang crypto_elliptic__ptr_nistCurve__ptr_crypto_internal_nistec_P521Point__IsOnCurve(_ptr_elliptic_nistCurve__ptr_crypto_internal_nistec_P521Point_, _ptr_big_Int, _ptr_big_Int)",
    "crypto_elliptic._ptr_nistCurve__ptr_crypto_internal_nistec.P521Point_.Params": "_ptr_elliptic_CurveParams __golang crypto_elliptic__ptr_nistCurve__ptr_crypto_internal_nistec_P521Point__Params(_ptr_elliptic_nistCurve__ptr_crypto_internal_nistec_P521Point_)",
    "crypto_elliptic._ptr_nistCurve__ptr_crypto_internal_nistec.P384Point_.IsOnCurve": "bool __golang crypto_elliptic__ptr_nistCurve__ptr_crypto_internal_nistec_P384Point__IsOnCurve(_ptr_elliptic_nistCurve__ptr_crypto_internal_nistec_P384Point_, _ptr_big_Int, _ptr_big_Int)",
    "crypto_elliptic._ptr_nistCurve__ptr_crypto_internal_nistec.P384Point_.Params": "_ptr_elliptic_CurveParams __golang crypto_elliptic__ptr_nistCurve__ptr_crypto_internal_nistec_P384Point__Params(_ptr_elliptic_nistCurve__ptr_crypto_internal_nistec_P384Point_)",
    "crypto_elliptic._ptr_nistCurve__ptr_crypto_internal_nistec.P256Point_.IsOnCurve": "bool __golang crypto_elliptic__ptr_nistCurve__ptr_crypto_internal_nistec_P256Point__IsOnCurve(_ptr_elliptic_nistCurve__ptr_crypto_internal_nistec_P256Point_, _ptr_big_Int, _ptr_big_Int)",
    "crypto_elliptic._ptr_nistCurve__ptr_crypto_internal_nistec.P256Point_.Params": "_ptr_elliptic_CurveParams __golang crypto_elliptic__ptr_nistCurve__ptr_crypto_internal_nistec_P256Point__Params(_ptr_elliptic_nistCurve__ptr_crypto_internal_nistec_P256Point_)",
    "crypto_elliptic._ptr_nistCurve__ptr_crypto_internal_nistec.P224Point_.IsOnCurve": "bool __golang crypto_elliptic__ptr_nistCurve__ptr_crypto_internal_nistec_P224Point__IsOnCurve(_ptr_elliptic_nistCurve__ptr_crypto_internal_nistec_P224Point_, _ptr_big_Int, _ptr_big_Int)",
    "crypto_elliptic._ptr_nistCurve__ptr_crypto_internal_nistec.P224Point_.Params": "_ptr_elliptic_CurveParams __golang crypto_elliptic__ptr_nistCurve__ptr_crypto_internal_nistec_P224Point__Params(_ptr_elliptic_nistCurve__ptr_crypto_internal_nistec_P224Point_)",
    "crypto_elliptic._ptr_p256Curve.Inverse": "_ptr_big_Int __golang crypto_elliptic__ptr_p256Curve_Inverse(_ptr_elliptic_p256Curve, _ptr_big_Int)",
    "crypto_elliptic._ptr_p256Curve.IsOnCurve": "bool __golang crypto_elliptic__ptr_p256Curve_IsOnCurve(_ptr_elliptic_p256Curve, _ptr_big_Int, _ptr_big_Int)",
    "crypto_elliptic._ptr_p256Curve.Params": "_ptr_elliptic_CurveParams __golang crypto_elliptic__ptr_p256Curve_Params(_ptr_elliptic_p256Curve)",
    "crypto_internal_bigmod._ptr_Nat.Bytes": "_slice_uint8_0 __golang crypto_internal_bigmod__ptr_Nat_Bytes(_ptr_bigmod_Nat, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.setBytes": "error __golang crypto_internal_bigmod__ptr_Nat_setBytes(crypto_internal_bigmod_Nat *x, _slice_uint8 b, crypto_internal_bigmod_Modulus *m)",
    "crypto_internal_bigmod._ptr_Nat.Equal": "bigmod_choice __golang crypto_internal_bigmod__ptr_Nat_Equal(_ptr_bigmod_Nat, _ptr_bigmod_Nat)",
    "crypto_internal_bigmod.rr": "crypto_internal_bigmod_Nat *__golang crypto_internal_bigmod_rr(crypto_internal_bigmod_Modulus *m)",
    "crypto_internal_bigmod._ptr_Modulus.Size": "int_0 __golang crypto_internal_bigmod__ptr_Modulus_Size(_ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Modulus.BitLen": "int_0 __golang crypto_internal_bigmod__ptr_Modulus_BitLen(_ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Modulus.Nat": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Modulus_Nat(_ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.shiftIn": "crypto_internal_bigmod_Nat *__golang crypto_internal_bigmod__ptr_Nat_shiftIn(crypto_internal_bigmod_Nat *x, uint y, crypto_internal_bigmod_Modulus *m)",
    "crypto_internal_bigmod._ptr_Nat.Mod": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Nat_Mod(_ptr_bigmod_Nat, _ptr_bigmod_Nat, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.ExpandFor": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Nat_ExpandFor(_ptr_bigmod_Nat, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.maybeSubtractModulus": "void __golang crypto_internal_bigmod__ptr_Nat_maybeSubtractModulus(crypto_internal_bigmod_Nat *x, unsigned __int64 always, crypto_internal_bigmod_Modulus *m)",
    "crypto_internal_bigmod._ptr_Nat.Sub": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Nat_Sub(_ptr_bigmod_Nat, _ptr_bigmod_Nat, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.Add": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Nat_Add(_ptr_bigmod_Nat, _ptr_bigmod_Nat, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.montgomeryReduction": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Nat_montgomeryReduction(_ptr_bigmod_Nat, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.montgomeryMul": "crypto_internal_bigmod_Nat *__golang crypto_internal_bigmod__ptr_Nat_montgomeryMul(crypto_internal_bigmod_Nat *x, crypto_internal_bigmod_Nat *a, crypto_internal_bigmod_Nat *b, crypto_internal_bigmod_Modulus *m)",
    "crypto_internal_bigmod._ptr_Nat.Mul": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Nat_Mul(_ptr_bigmod_Nat, _ptr_bigmod_Nat, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.Exp": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Nat_Exp(_ptr_bigmod_Nat, _ptr_bigmod_Nat, _slice_uint8_0, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod._ptr_Nat.ExpShortVarTime": "_ptr_bigmod_Nat __golang crypto_internal_bigmod__ptr_Nat_ExpShortVarTime(_ptr_bigmod_Nat, _ptr_bigmod_Nat, uint_0, _ptr_bigmod_Modulus)",
    "crypto_internal_bigmod.addMulVVW1024": "void __golang crypto_internal_bigmod_addMulVVW1024()",
    "crypto_internal_bigmod.addMulVVW1536": "void __golang crypto_internal_bigmod_addMulVVW1536()",
    "crypto_internal_bigmod.addMulVVW2048": "void __golang crypto_internal_bigmod_addMulVVW2048()",
    "crypto_sha512._ptr_digest.Reset": "void __golang crypto_sha512__ptr_digest_Reset(_ptr_sha512_digest)",
    "crypto_sha512._ptr_digest.UnmarshalBinary": "error_0 __golang crypto_sha512__ptr_digest_UnmarshalBinary(_ptr_sha512_digest, _slice_uint8_0)",
    "crypto_sha512.New": "hash_Hash __golang crypto_sha512_New()",
    "crypto_sha512.New512_224": "hash_Hash __golang crypto_sha512_New512_224()",
    "crypto_sha512.New512_256": "hash_Hash __golang crypto_sha512_New512_256()",
    "crypto_sha512.New384": "hash_Hash __golang crypto_sha512_New384()",
    "crypto_sha512._ptr_digest.Size": "int_0 __golang crypto_sha512__ptr_digest_Size(_ptr_sha512_digest)",
    "crypto_sha512._ptr_digest.BlockSize": "int_0 __golang crypto_sha512__ptr_digest_BlockSize(_ptr_sha512_digest)",
    "crypto_sha512._ptr_digest.Sum": "_slice_uint8_0 __golang crypto_sha512__ptr_digest_Sum(_ptr_sha512_digest, _slice_uint8_0)",
    "crypto_sha512.block": "void __golang crypto_sha512_block(crypto_sha512_digest *dig, _slice_uint8 p)",
    "crypto_sha512.blockAMD64": "void __golang crypto_sha512_blockAMD64()",
    "crypto_sha512.blockAVX2": "void __golang crypto_sha512_blockAVX2()",
    "unicode_utf16.decode": "_slice_int32 __golang unicode_utf16_decode(_slice_uint16 s, _slice_int32 buf)",
    "encoding_asn1.StructuralError.Error": "string_0 __golang encoding_asn1_StructuralError_Error(asn1_StructuralError)",
    "encoding_asn1.SyntaxError.Error": "string_0 __golang encoding_asn1_SyntaxError_Error(asn1_SyntaxError)",
    "encoding_asn1.BitString.At": "int_0 __golang encoding_asn1_BitString_At(asn1_BitString, int_0)",
    "encoding_asn1.ObjectIdentifier.Equal": "bool __golang encoding_asn1_ObjectIdentifier_Equal(asn1_ObjectIdentifier, asn1_ObjectIdentifier)",
    "encoding_asn1.ObjectIdentifier.String": "string_0 __golang encoding_asn1_ObjectIdentifier_String(asn1_ObjectIdentifier)",
    "encoding_asn1.parseField": "void __golang encoding_asn1_parseField(reflect_Value v, encoding_asn1_fieldParameters params, _slice_uint8 bytes, int offset, error err, int initOffset)",
    "encoding_asn1.setDefaultValue": "void __golang encoding_asn1_setDefaultValue(encoding_asn1_fieldParameters params, bool ok, reflect_Value v)",
    "encoding_asn1._ptr_invalidUnmarshalError.Error": "string_0 __golang encoding_asn1__ptr_invalidUnmarshalError_Error(_ptr_asn1_invalidUnmarshalError)",
    "encoding_asn1.parseFieldParameters": "void __golang encoding_asn1_parseFieldParameters(encoding_asn1_fieldParameters ret, string str)",
    "encoding_asn1.byteEncoder.Len": "int_0 __golang encoding_asn1_byteEncoder_Len(asn1_byteEncoder)",
    "encoding_asn1.byteEncoder.Encode": "void __golang encoding_asn1_byteEncoder_Encode(asn1_byteEncoder, _slice_uint8_0)",
    "encoding_asn1.bytesEncoder.Encode": "void __golang encoding_asn1_bytesEncoder_Encode(asn1_bytesEncoder, _slice_uint8_0)",
    "encoding_asn1.stringEncoder.Len": "int_0 __golang encoding_asn1_stringEncoder_Len(asn1_stringEncoder)",
    "encoding_asn1.stringEncoder.Encode": "void __golang encoding_asn1_stringEncoder_Encode(asn1_stringEncoder, _slice_uint8_0)",
    "encoding_asn1.multiEncoder.Len": "int_0 __golang encoding_asn1_multiEncoder_Len(asn1_multiEncoder)",
    "encoding_asn1.multiEncoder.Encode": "void __golang encoding_asn1_multiEncoder_Encode(asn1_multiEncoder, _slice_uint8_0)",
    "encoding_asn1.setEncoder.Len": "int_0 __golang encoding_asn1_setEncoder_Len(asn1_setEncoder)",
    "encoding_asn1.setEncoder.Encode": "void __golang encoding_asn1_setEncoder_Encode(asn1_setEncoder, _slice_uint8_0)",
    "encoding_asn1._ptr_taggedEncoder.Len": "int_0 __golang encoding_asn1__ptr_taggedEncoder_Len(_ptr_asn1_taggedEncoder)",
    "encoding_asn1._ptr_taggedEncoder.Encode": "void __golang encoding_asn1__ptr_taggedEncoder_Encode(_ptr_asn1_taggedEncoder, _slice_uint8_0)",
    "encoding_asn1.int64Encoder.Len": "int_0 __golang encoding_asn1_int64Encoder_Len(asn1_int64Encoder)",
    "encoding_asn1.int64Encoder.Encode": "void __golang encoding_asn1_int64Encoder_Encode(asn1_int64Encoder, _slice_uint8_0)",
    "encoding_asn1.appendTagAndLength": "_slice_uint8 __golang encoding_asn1_appendTagAndLength(_slice_uint8 dst, encoding_asn1_tagAndLength t)",
    "encoding_asn1.bitStringEncoder.Len": "int_0 __golang encoding_asn1_bitStringEncoder_Len(asn1_bitStringEncoder)",
    "encoding_asn1.bitStringEncoder.Encode": "void __golang encoding_asn1_bitStringEncoder_Encode(asn1_bitStringEncoder, _slice_uint8_0)",
    "encoding_asn1.oidEncoder.Len": "int_0 __golang encoding_asn1_oidEncoder_Len(asn1_oidEncoder)",
    "encoding_asn1.outsideUTCRange": "bool __golang encoding_asn1_outsideUTCRange(time_Time t)",
    "encoding_asn1.appendTimeCommon": "_slice_uint8 __golang encoding_asn1_appendTimeCommon(_slice_uint8 dst, time_Time t)",
    "encoding_asn1.makeBody": "void __golang encoding_asn1_makeBody(encoding_asn1_fieldParameters params, encoding_asn1_encoder e, error err, reflect_Value value)",
    "encoding_asn1.makeField": "void __golang encoding_asn1_makeField(encoding_asn1_fieldParameters params, encoding_asn1_encoder e, error err, reflect_Value v)",
    "reflect.TypeFor_go.shape.struct__Class_int_Tag_int_IsCompound_bool_Bytes__slice_uint8_FullBytes__slice_uint8__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__Class_int_Tag_int_IsCompound_bool_Bytes__slice_uint8_FullBytes__slice_uint8__()",
    "reflect.TypeFor_go.shape.struct__time.wall_uint64_time.ext_int64_time.loc__ptr_time.Location__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__time_wall_uint64_time_ext_int64_time_loc__ptr_time_Location__()",
    "reflect.TypeFor_go.shape.bool_": "reflect_Type __golang reflect_TypeFor_go_shape_bool_()",
    "reflect.TypeFor_go.shape.int_": "reflect_Type __golang reflect_TypeFor_go_shape_int_()",
    "reflect.TypeFor_go.shape.struct__Bytes__slice_uint8_BitLength_int__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__Bytes__slice_uint8_BitLength_int__()",
    "encoding_asn1._ptr_BitString.At": "int_0 __golang encoding_asn1__ptr_BitString_At(_ptr_asn1_BitString, int_0)",
    "encoding_asn1._ptr_BitString.RightAlign": "_slice_uint8_0 __golang encoding_asn1__ptr_BitString_RightAlign(_ptr_asn1_BitString)",
    "encoding_asn1._ptr_ObjectIdentifier.Equal": "bool __golang encoding_asn1__ptr_ObjectIdentifier_Equal(_ptr_asn1_ObjectIdentifier, asn1_ObjectIdentifier)",
    "encoding_asn1._ptr_ObjectIdentifier.String": "string_0 __golang encoding_asn1__ptr_ObjectIdentifier_String(_ptr_asn1_ObjectIdentifier)",
    "encoding_asn1._ptr_byteEncoder.Encode": "void __golang encoding_asn1__ptr_byteEncoder_Encode(_ptr_asn1_byteEncoder, _slice_uint8_0)",
    "encoding_asn1._ptr_byteEncoder.Len": "int_0 __golang encoding_asn1__ptr_byteEncoder_Len(_ptr_asn1_byteEncoder)",
    "encoding_asn1._ptr_StructuralError.Error": "string_0 __golang encoding_asn1__ptr_StructuralError_Error(_ptr_asn1_StructuralError)",
    "encoding_asn1._ptr_SyntaxError.Error": "string_0 __golang encoding_asn1__ptr_SyntaxError_Error(_ptr_asn1_SyntaxError)",
    "encoding_asn1._ptr_bytesEncoder.Encode": "void __golang encoding_asn1__ptr_bytesEncoder_Encode(_ptr_asn1_bytesEncoder, _slice_uint8_0)",
    "encoding_asn1._ptr_bytesEncoder.Len": "int_0 __golang encoding_asn1__ptr_bytesEncoder_Len(_ptr_asn1_bytesEncoder)",
    "encoding_asn1._ptr_stringEncoder.Encode": "void __golang encoding_asn1__ptr_stringEncoder_Encode(_ptr_asn1_stringEncoder, _slice_uint8_0)",
    "encoding_asn1._ptr_stringEncoder.Len": "int_0 __golang encoding_asn1__ptr_stringEncoder_Len(_ptr_asn1_stringEncoder)",
    "encoding_asn1._ptr_multiEncoder.Encode": "void __golang encoding_asn1__ptr_multiEncoder_Encode(_ptr_asn1_multiEncoder, _slice_uint8_0)",
    "encoding_asn1._ptr_multiEncoder.Len": "int_0 __golang encoding_asn1__ptr_multiEncoder_Len(_ptr_asn1_multiEncoder)",
    "encoding_asn1._ptr_setEncoder.Encode": "void __golang encoding_asn1__ptr_setEncoder_Encode(_ptr_asn1_setEncoder, _slice_uint8_0)",
    "encoding_asn1._ptr_setEncoder.Len": "int_0 __golang encoding_asn1__ptr_setEncoder_Len(_ptr_asn1_setEncoder)",
    "encoding_asn1._ptr_int64Encoder.Encode": "void __golang encoding_asn1__ptr_int64Encoder_Encode(_ptr_asn1_int64Encoder, _slice_uint8_0)",
    "encoding_asn1._ptr_int64Encoder.Len": "int_0 __golang encoding_asn1__ptr_int64Encoder_Len(_ptr_asn1_int64Encoder)",
    "encoding_asn1._ptr_bitStringEncoder.Encode": "void __golang encoding_asn1__ptr_bitStringEncoder_Encode(_ptr_asn1_bitStringEncoder, _slice_uint8_0)",
    "encoding_asn1._ptr_bitStringEncoder.Len": "int_0 __golang encoding_asn1__ptr_bitStringEncoder_Len(_ptr_asn1_bitStringEncoder)",
    "encoding_asn1._ptr_oidEncoder.Encode": "void __golang encoding_asn1__ptr_oidEncoder_Encode(_ptr_asn1_oidEncoder, _slice_uint8_0)",
    "encoding_asn1._ptr_oidEncoder.Len": "int_0 __golang encoding_asn1__ptr_oidEncoder_Len(_ptr_asn1_oidEncoder)",
    "vendor_golang.org_x_crypto_cryptobyte_asn1.Tag.Constructed": "asn1_Tag __golang vendor_golang_org_x_crypto_cryptobyte_asn1_Tag_Constructed(asn1_Tag)",
    "vendor_golang.org_x_crypto_cryptobyte_asn1.Tag.ContextSpecific": "asn1_Tag __golang vendor_golang_org_x_crypto_cryptobyte_asn1_Tag_ContextSpecific(asn1_Tag)",
    "vendor_golang.org_x_crypto_cryptobyte_asn1._ptr_Tag.Constructed": "asn1_Tag __golang vendor_golang_org_x_crypto_cryptobyte_asn1__ptr_Tag_Constructed(_ptr_asn1_Tag)",
    "vendor_golang.org_x_crypto_cryptobyte_asn1._ptr_Tag.ContextSpecific": "asn1_Tag __golang vendor_golang_org_x_crypto_cryptobyte_asn1__ptr_Tag_ContextSpecific(_ptr_asn1_Tag)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.AddASN1": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_AddASN1(vendor_golang_org_x_crypto_cryptobyte_Builder *b, unsigned __int8 tag, vendor_golang_org_x_crypto_cryptobyte_BuilderContinuation f)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadASN1Boolean": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadASN1Boolean(vendor_golang_org_x_crypto_cryptobyte_String *s, bool *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadASN1Integer": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadASN1Integer(vendor_golang_org_x_crypto_cryptobyte_String *s, interface_ out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.readASN1BigInt": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_readASN1BigInt(vendor_golang_org_x_crypto_cryptobyte_String *s, math_big_Int *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.readASN1Bytes": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_readASN1Bytes(vendor_golang_org_x_crypto_cryptobyte_String *s, _slice_uint8 *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.readASN1Int64": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_readASN1Int64(vendor_golang_org_x_crypto_cryptobyte_String *s, int64 *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.readASN1Uint64": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_readASN1Uint64(vendor_golang_org_x_crypto_cryptobyte_String *s, uint64 *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.readBase128Int": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_readBase128Int(vendor_golang_org_x_crypto_cryptobyte_String *s, int *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadASN1ObjectIdentifier": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadASN1ObjectIdentifier(vendor_golang_org_x_crypto_cryptobyte_String *s, encoding_asn1_ObjectIdentifier *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadASN1GeneralizedTime": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadASN1GeneralizedTime(vendor_golang_org_x_crypto_cryptobyte_String *s, time_Time *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadASN1UTCTime": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadASN1UTCTime(vendor_golang_org_x_crypto_cryptobyte_String *s, time_Time *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadASN1BitString": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadASN1BitString(vendor_golang_org_x_crypto_cryptobyte_String *s, encoding_asn1_BitString *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadASN1": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadASN1(vendor_golang_org_x_crypto_cryptobyte_String *s, vendor_golang_org_x_crypto_cryptobyte_String *out, unsigned __int8 tag)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadASN1Element": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadASN1Element(vendor_golang_org_x_crypto_cryptobyte_String *s, vendor_golang_org_x_crypto_cryptobyte_String *out, unsigned __int8 tag)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadOptionalASN1": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadOptionalASN1(vendor_golang_org_x_crypto_cryptobyte_String *s, vendor_golang_org_x_crypto_cryptobyte_String *out, bool *outPresent, unsigned __int8 tag)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.SkipOptionalASN1": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_SkipOptionalASN1(vendor_golang_org_x_crypto_cryptobyte_String *s, unsigned __int8 tag)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadOptionalASN1Integer": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadOptionalASN1Integer(vendor_golang_org_x_crypto_cryptobyte_String *s, interface_ out, unsigned __int8 tag, interface_ defaultValue)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.readASN1": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_readASN1(vendor_golang_org_x_crypto_cryptobyte_String *s, vendor_golang_org_x_crypto_cryptobyte_String *out, unsigned __int8 *outTag, bool skipHeader)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.AddUint8": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_AddUint8(_ptr_cryptobyte_Builder, uint8_0)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.AddUint16": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_AddUint16(vendor_golang_org_x_crypto_cryptobyte_Builder *b, uint16 v)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.AddUint32": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_AddUint32(_ptr_cryptobyte_Builder, uint32_0)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.AddBytes": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_AddBytes(_ptr_cryptobyte_Builder, _slice_uint8_0)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.AddUint16LengthPrefixed": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_AddUint16LengthPrefixed(vendor_golang_org_x_crypto_cryptobyte_Builder *b, vendor_golang_org_x_crypto_cryptobyte_BuilderContinuation f)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.AddUint24LengthPrefixed": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_AddUint24LengthPrefixed(vendor_golang_org_x_crypto_cryptobyte_Builder *b, vendor_golang_org_x_crypto_cryptobyte_BuilderContinuation f)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.callContinuation": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_callContinuation(vendor_golang_org_x_crypto_cryptobyte_Builder *b, vendor_golang_org_x_crypto_cryptobyte_BuilderContinuation f, vendor_golang_org_x_crypto_cryptobyte_Builder *arg)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.addLengthPrefixed": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_addLengthPrefixed(vendor_golang_org_x_crypto_cryptobyte_Builder *b, int lenLen, bool isASN1, vendor_golang_org_x_crypto_cryptobyte_BuilderContinuation f)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_Builder.flushChild": "void __golang vendor_golang_org_x_crypto_cryptobyte__ptr_Builder_flushChild(_ptr_cryptobyte_Builder)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.ReadUint64": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_ReadUint64(vendor_golang_org_x_crypto_cryptobyte_String *s, uint64 *out)",
    "vendor_golang.org_x_crypto_cryptobyte._ptr_String.readLengthPrefixed": "bool __golang vendor_golang_org_x_crypto_cryptobyte__ptr_String_readLengthPrefixed(vendor_golang_org_x_crypto_cryptobyte_String *s, int lenLen, vendor_golang_org_x_crypto_cryptobyte_String *outChild)",
    "crypto_ecdsa._ptr_PublicKey.Equal": "bool __golang crypto_ecdsa__ptr_PublicKey_Equal(_ptr_ecdsa_PublicKey, crypto_PublicKey_0)",
    "crypto_ecdsa.curveToECDH": "crypto_ecdh_Curve __golang crypto_ecdsa_curveToECDH(crypto_elliptic_Curve c)",
    "crypto_ecdsa._ptr_PrivateKey.Public": "crypto_PublicKey_0 __golang crypto_ecdsa__ptr_PrivateKey_Public(_ptr_ecdsa_PrivateKey)",
    "crypto_ecdsa._ptr_PrivateKey.Equal": "bool __golang crypto_ecdsa__ptr_PrivateKey_Equal(_ptr_ecdsa_PrivateKey, crypto_PrivateKey_0)",
    "crypto_ecdsa.bigIntEqual": "bool __golang crypto_ecdsa_bigIntEqual(math_big_Int *a, math_big_Int *b)",
    "crypto_ecdsa.addASN1IntBytes": "void __golang crypto_ecdsa_addASN1IntBytes(vendor_golang_org_x_crypto_cryptobyte_Builder *b, _slice_uint8 bytes)",
    "crypto_ecdsa.VerifyASN1": "bool __golang crypto_ecdsa_VerifyASN1(crypto_ecdsa_PublicKey *pub, _slice_uint8 hash, _slice_uint8 sig)",
    "crypto_ecdsa.parseSignature": "void __golang crypto_ecdsa_parseSignature(_slice_uint8 s, _slice_uint8 r, error err, _slice_uint8 sig)",
    "crypto_ecdsa.p224": "crypto_ecdsa_nistCurve__ptr_crypto_internal_nistec_P224Point_ *__golang crypto_ecdsa_p224()",
    "crypto_ecdsa.p256": "crypto_ecdsa_nistCurve__ptr_crypto_internal_nistec_P256Point_ *__golang crypto_ecdsa_p256()",
    "crypto_ecdsa.p384": "crypto_ecdsa_nistCurve__ptr_crypto_internal_nistec_P384Point_ *__golang crypto_ecdsa_p384()",
    "crypto_ecdsa.p521": "crypto_ecdsa_nistCurve__ptr_crypto_internal_nistec_P521Point_ *__golang crypto_ecdsa_p521()",
    "crypto_ecdsa.hashToInt": "math_big_Int *__golang crypto_ecdsa_hashToInt(_slice_uint8 hash, crypto_elliptic_Curve c)",
    "crypto_ecdsa.verifyLegacy": "bool __golang crypto_ecdsa_verifyLegacy(crypto_ecdsa_PublicKey *pub, _slice_uint8 hash, _slice_uint8 sig)",
    "crypto_ecdsa.PublicKey.IsOnCurve": "bool __golang crypto_ecdsa_PublicKey_IsOnCurve(ecdsa_PublicKey, _ptr_big_Int, _ptr_big_Int)",
    "crypto_ecdsa._ptr_PublicKey.IsOnCurve": "bool __golang crypto_ecdsa__ptr_PublicKey_IsOnCurve(_ptr_ecdsa_PublicKey, _ptr_big_Int, _ptr_big_Int)",
    "crypto_ecdsa.PublicKey.Params": "_ptr_elliptic_CurveParams __golang crypto_ecdsa_PublicKey_Params(ecdsa_PublicKey)",
    "crypto_ecdsa._ptr_PublicKey.Params": "_ptr_elliptic_CurveParams __golang crypto_ecdsa__ptr_PublicKey_Params(_ptr_ecdsa_PublicKey)",
    "crypto_ecdsa.PrivateKey.IsOnCurve": "bool __golang crypto_ecdsa_PrivateKey_IsOnCurve(ecdsa_PrivateKey, _ptr_big_Int, _ptr_big_Int)",
    "crypto_ecdsa._ptr_PrivateKey.IsOnCurve": "bool __golang crypto_ecdsa__ptr_PrivateKey_IsOnCurve(_ptr_ecdsa_PrivateKey, _ptr_big_Int, _ptr_big_Int)",
    "crypto_ecdsa.PrivateKey.Params": "_ptr_elliptic_CurveParams __golang crypto_ecdsa_PrivateKey_Params(ecdsa_PrivateKey)",
    "crypto_ecdsa._ptr_PrivateKey.Params": "_ptr_elliptic_CurveParams __golang crypto_ecdsa__ptr_PrivateKey_Params(_ptr_ecdsa_PrivateKey)",
    "crypto_internal_edwards25519._ptr_Point.bytes": "_slice_uint8 __golang crypto_internal_edwards25519__ptr_Point_bytes(crypto_internal_edwards25519_Point *v, uint8 (*buf)[32])",
    "crypto_internal_edwards25519._ptr_projP2.FromP1xP1": "crypto_internal_edwards25519_projP2 *__golang crypto_internal_edwards25519__ptr_projP2_FromP1xP1(crypto_internal_edwards25519_projP2 *v, crypto_internal_edwards25519_projP1xP1 *p)",
    "crypto_internal_edwards25519._ptr_Point.fromP1xP1": "crypto_internal_edwards25519_Point *__golang crypto_internal_edwards25519__ptr_Point_fromP1xP1(crypto_internal_edwards25519_Point *v, crypto_internal_edwards25519_projP1xP1 *p)",
    "crypto_internal_edwards25519._ptr_Point.fromP2": "crypto_internal_edwards25519_Point *__golang crypto_internal_edwards25519__ptr_Point_fromP2(crypto_internal_edwards25519_Point *v, crypto_internal_edwards25519_projP2 *p)",
    "crypto_internal_edwards25519._ptr_projCached.FromP3": "crypto_internal_edwards25519_projCached *__golang crypto_internal_edwards25519__ptr_projCached_FromP3(crypto_internal_edwards25519_projCached *v, crypto_internal_edwards25519_Point *p)",
    "crypto_internal_edwards25519._ptr_affineCached.FromP3": "crypto_internal_edwards25519_affineCached *__golang crypto_internal_edwards25519__ptr_affineCached_FromP3(crypto_internal_edwards25519_affineCached *v, crypto_internal_edwards25519_Point *p)",
    "crypto_internal_edwards25519._ptr_Point.Add": "crypto_internal_edwards25519_Point *__golang crypto_internal_edwards25519__ptr_Point_Add(crypto_internal_edwards25519_Point *v, crypto_internal_edwards25519_Point *p, crypto_internal_edwards25519_Point *q)",
    "crypto_internal_edwards25519._ptr_projP1xP1.Add": "crypto_internal_edwards25519_projP1xP1 *__golang crypto_internal_edwards25519__ptr_projP1xP1_Add(crypto_internal_edwards25519_projP1xP1 *v, crypto_internal_edwards25519_Point *p, crypto_internal_edwards25519_projCached *q)",
    "crypto_internal_edwards25519._ptr_projP1xP1.Sub": "crypto_internal_edwards25519_projP1xP1 *__golang crypto_internal_edwards25519__ptr_projP1xP1_Sub(crypto_internal_edwards25519_projP1xP1 *v, crypto_internal_edwards25519_Point *p, crypto_internal_edwards25519_projCached *q)",
    "crypto_internal_edwards25519._ptr_projP1xP1.AddAffine": "crypto_internal_edwards25519_projP1xP1 *__golang crypto_internal_edwards25519__ptr_projP1xP1_AddAffine(crypto_internal_edwards25519_projP1xP1 *v, crypto_internal_edwards25519_Point *p, crypto_internal_edwards25519_affineCached *q)",
    "crypto_internal_edwards25519._ptr_projP1xP1.SubAffine": "crypto_internal_edwards25519_projP1xP1 *__golang crypto_internal_edwards25519__ptr_projP1xP1_SubAffine(crypto_internal_edwards25519_projP1xP1 *v, crypto_internal_edwards25519_Point *p, crypto_internal_edwards25519_affineCached *q)",
    "crypto_internal_edwards25519._ptr_projP1xP1.Double": "crypto_internal_edwards25519_projP1xP1 *__golang crypto_internal_edwards25519__ptr_projP1xP1_Double(crypto_internal_edwards25519_projP1xP1 *v, crypto_internal_edwards25519_projP2 *p)",
    "crypto_internal_edwards25519._ptr_Point.Negate": "crypto_internal_edwards25519_Point *__golang crypto_internal_edwards25519__ptr_Point_Negate(crypto_internal_edwards25519_Point *v, crypto_internal_edwards25519_Point *p)",
    "crypto_internal_edwards25519._ptr_affineCached.Select": "crypto_internal_edwards25519_affineCached *__golang crypto_internal_edwards25519__ptr_affineCached_Select(crypto_internal_edwards25519_affineCached *v, crypto_internal_edwards25519_affineCached *a, crypto_internal_edwards25519_affineCached *b, int cond)",
    "crypto_internal_edwards25519._ptr_affineCached.CondNeg": "crypto_internal_edwards25519_affineCached *__golang crypto_internal_edwards25519__ptr_affineCached_CondNeg(crypto_internal_edwards25519_affineCached *v, int cond)",
    "crypto_internal_edwards25519._ptr_Scalar.MultiplyAdd": "crypto_internal_edwards25519_Scalar *__golang crypto_internal_edwards25519__ptr_Scalar_MultiplyAdd(crypto_internal_edwards25519_Scalar *s, crypto_internal_edwards25519_Scalar *x, crypto_internal_edwards25519_Scalar *y, crypto_internal_edwards25519_Scalar *z)",
    "crypto_internal_edwards25519._ptr_Scalar.setShortBytes": "crypto_internal_edwards25519_Scalar *__golang crypto_internal_edwards25519__ptr_Scalar_setShortBytes(crypto_internal_edwards25519_Scalar *s, _slice_uint8 x)",
    "crypto_internal_edwards25519._ptr_Scalar.bytes": "_slice_uint8 __golang crypto_internal_edwards25519__ptr_Scalar_bytes(crypto_internal_edwards25519_Scalar *s, uint8 (*out)[32])",
    "crypto_internal_edwards25519.fiatScalarMul": "void __golang crypto_internal_edwards25519_fiatScalarMul(crypto_internal_edwards25519_fiatScalarMontgomeryDomainFieldElement *out1, crypto_internal_edwards25519_fiatScalarMontgomeryDomainFieldElement *arg1, crypto_internal_edwards25519_fiatScalarMontgomeryDomainFieldElement *arg2)",
    "crypto_internal_edwards25519.fiatScalarAdd": "void __golang crypto_internal_edwards25519_fiatScalarAdd(crypto_internal_edwards25519_fiatScalarMontgomeryDomainFieldElement *out1, crypto_internal_edwards25519_fiatScalarMontgomeryDomainFieldElement *arg1, crypto_internal_edwards25519_fiatScalarMontgomeryDomainFieldElement *arg2)",
    "crypto_internal_edwards25519.fiatScalarFromMontgomery": "void __golang crypto_internal_edwards25519_fiatScalarFromMontgomery(crypto_internal_edwards25519_fiatScalarNonMontgomeryDomainFieldElement *out1, crypto_internal_edwards25519_fiatScalarMontgomeryDomainFieldElement *arg1)",
    "crypto_internal_edwards25519.fiatScalarToMontgomery": "void __golang crypto_internal_edwards25519_fiatScalarToMontgomery(crypto_internal_edwards25519_fiatScalarMontgomeryDomainFieldElement *out1, crypto_internal_edwards25519_fiatScalarNonMontgomeryDomainFieldElement *arg1)",
    "crypto_internal_edwards25519.fiatScalarToBytes": "void __golang crypto_internal_edwards25519_fiatScalarToBytes(uint8 (*out1)[32], uint64 (*arg1)[4])",
    "crypto_internal_edwards25519.fiatScalarFromBytes": "void __golang crypto_internal_edwards25519_fiatScalarFromBytes(uint64 (*out1)[4], uint8 (*arg1)[32])",
    "crypto_internal_edwards25519.basepointTable": "crypto_internal_edwards25519_affineLookupTable (*__golang crypto_internal_edwards25519_basepointTable())[32]",
    "crypto_internal_edwards25519._ptr_Point.ScalarBaseMult": "crypto_internal_edwards25519_Point *__golang crypto_internal_edwards25519__ptr_Point_ScalarBaseMult(crypto_internal_edwards25519_Point *v, crypto_internal_edwards25519_Scalar *x)",
    "crypto_internal_edwards25519.basepointNafTable": "crypto_internal_edwards25519_nafLookupTable8 *__golang crypto_internal_edwards25519_basepointNafTable()",
    "crypto_internal_edwards25519._ptr_Point.VarTimeDoubleScalarBaseMult": "crypto_internal_edwards25519_Point *__golang crypto_internal_edwards25519__ptr_Point_VarTimeDoubleScalarBaseMult(crypto_internal_edwards25519_Point *v, crypto_internal_edwards25519_Scalar *a, crypto_internal_edwards25519_Point *A, crypto_internal_edwards25519_Scalar *b)",
    "crypto_internal_edwards25519._ptr_affineLookupTable.FromP3": "void __golang crypto_internal_edwards25519__ptr_affineLookupTable_FromP3(crypto_internal_edwards25519_affineLookupTable *v, crypto_internal_edwards25519_Point *q)",
    "crypto_internal_edwards25519._ptr_nafLookupTable5.FromP3": "void __golang crypto_internal_edwards25519__ptr_nafLookupTable5_FromP3(crypto_internal_edwards25519_nafLookupTable5 *v, crypto_internal_edwards25519_Point *q)",
    "crypto_internal_edwards25519._ptr_nafLookupTable8.FromP3": "void __golang crypto_internal_edwards25519__ptr_nafLookupTable8_FromP3(crypto_internal_edwards25519_nafLookupTable8 *v, crypto_internal_edwards25519_Point *q)",
    "crypto_internal_edwards25519._ptr_affineLookupTable.SelectInto": "void __golang crypto_internal_edwards25519__ptr_affineLookupTable_SelectInto(crypto_internal_edwards25519_affineLookupTable *v, crypto_internal_edwards25519_affineCached *dest, int8 x)",
    "crypto_rand.getRandom": "error __golang crypto_rand_getRandom(_slice_uint8 p)",
    "crypto_rand.warnBlocked": "void __golang crypto_rand_warnBlocked()",
    "crypto_rand._ptr_reader.Read.deferwrap1": "void __golang crypto_rand__ptr_reader_Read_deferwrap1()",
    "crypto_ed25519.PublicKey.Equal": "bool __golang crypto_ed25519_PublicKey_Equal(ed25519_PublicKey, crypto_PublicKey_0)",
    "crypto_ed25519.PrivateKey.Public": "crypto_PublicKey_0 __golang crypto_ed25519_PrivateKey_Public(ed25519_PrivateKey)",
    "crypto_ed25519.PrivateKey.Equal": "bool __golang crypto_ed25519_PrivateKey_Equal(ed25519_PrivateKey, crypto_PrivateKey_0)",
    "crypto_ed25519.PrivateKey.Seed": "_slice_uint8_0 __golang crypto_ed25519_PrivateKey_Seed(ed25519_PrivateKey)",
    "crypto_ed25519.newKeyFromSeed": "void __golang crypto_ed25519_newKeyFromSeed(_slice_uint8 privateKey, _slice_uint8 seed)",
    "crypto_ed25519.verify": "void __golang crypto_ed25519_verify(crypto_ed25519_PublicKey publicKey, string domPrefix, _slice_uint8 message, string context, bool _r0, _slice_uint8 sig)",
    "crypto_ed25519._ptr_PublicKey.Equal": "bool __golang crypto_ed25519__ptr_PublicKey_Equal(_ptr_ed25519_PublicKey, crypto_PublicKey_0)",
    "crypto_ed25519._ptr_PrivateKey.Equal": "bool __golang crypto_ed25519__ptr_PrivateKey_Equal(_ptr_ed25519_PrivateKey, crypto_PrivateKey_0)",
    "crypto_ed25519._ptr_PrivateKey.Public": "crypto_PublicKey_0 __golang crypto_ed25519__ptr_PrivateKey_Public(_ptr_ed25519_PrivateKey)",
    "crypto_ed25519._ptr_PrivateKey.Seed": "_slice_uint8_0 __golang crypto_ed25519__ptr_PrivateKey_Seed(_ptr_ed25519_PrivateKey)",
    "crypto_md5._ptr_digest.Reset": "void __golang crypto_md5__ptr_digest_Reset(_ptr_md5_digest)",
    "crypto_md5._ptr_digest.UnmarshalBinary": "error_0 __golang crypto_md5__ptr_digest_UnmarshalBinary(_ptr_md5_digest, _slice_uint8_0)",
    "crypto_md5.New": "hash_Hash __golang crypto_md5_New()",
    "crypto_md5._ptr_digest.Size": "int_0 __golang crypto_md5__ptr_digest_Size(_ptr_md5_digest)",
    "crypto_md5._ptr_digest.BlockSize": "int_0 __golang crypto_md5__ptr_digest_BlockSize(_ptr_md5_digest)",
    "crypto_md5._ptr_digest.Sum": "_slice_uint8_0 __golang crypto_md5__ptr_digest_Sum(_ptr_md5_digest, _slice_uint8_0)",
    "crypto_md5._ptr_digest.checkSum": "_16_uint8 __golang crypto_md5__ptr_digest_checkSum(_ptr_md5_digest)",
    "crypto_md5.block": "void __golang crypto_md5_block()",
    "crypto_rsa.DecryptPKCS1v15SessionKey": "error __golang crypto_rsa_DecryptPKCS1v15SessionKey(io_Reader random, crypto_rsa_PrivateKey *priv, _slice_uint8 ciphertext, _slice_uint8 key)",
    "crypto_rsa.nonZeroRandomBytes": "error __golang crypto_rsa_nonZeroRandomBytes(_slice_uint8 s, io_Reader random)",
    "crypto_rsa.VerifyPKCS1v15": "error __golang crypto_rsa_VerifyPKCS1v15(crypto_rsa_PublicKey *pub, unsigned __int64 hash, _slice_uint8 hashed, _slice_uint8 sig)",
    "crypto_rsa.emsaPSSVerify": "void __golang crypto_rsa_emsaPSSVerify(_slice_uint8 mHash, hash_Hash hash, _slice_uint8 em, error _r0, int emBits, int sLen)",
    "crypto_rsa._ptr_PSSOptions.HashFunc": "crypto_Hash __golang crypto_rsa__ptr_PSSOptions_HashFunc(_ptr_rsa_PSSOptions)",
    "crypto_rsa.VerifyPSS": "error __golang crypto_rsa_VerifyPSS(crypto_rsa_PublicKey *pub, unsigned __int64 hash, _slice_uint8 digest, _slice_uint8 sig, crypto_rsa_PSSOptions *opts)",
    "crypto_rsa._ptr_PublicKey.Size": "int_0 __golang crypto_rsa__ptr_PublicKey_Size(_ptr_rsa_PublicKey)",
    "crypto_rsa._ptr_PublicKey.Equal": "bool __golang crypto_rsa__ptr_PublicKey_Equal(_ptr_rsa_PublicKey, crypto_PublicKey_0)",
    "crypto_rsa._ptr_PrivateKey.Public": "crypto_PublicKey_0 __golang crypto_rsa__ptr_PrivateKey_Public(_ptr_rsa_PrivateKey)",
    "crypto_rsa._ptr_PrivateKey.Equal": "bool __golang crypto_rsa__ptr_PrivateKey_Equal(_ptr_rsa_PrivateKey, crypto_PrivateKey_0)",
    "crypto_rsa.bigIntEqual": "bool __golang crypto_rsa_bigIntEqual(math_big_Int *a, math_big_Int *b)",
    "crypto_rsa._ptr_PrivateKey.Validate": "error_0 __golang crypto_rsa__ptr_PrivateKey_Validate(_ptr_rsa_PrivateKey)",
    "crypto_rsa.mgf1XOR": "void __golang crypto_rsa_mgf1XOR(_slice_uint8 out, hash_Hash hash, _slice_uint8 seed)",
    "crypto_rsa.EncryptOAEP": "void __golang crypto_rsa_EncryptOAEP(hash_Hash hash, _slice_uint8 label, io_Reader random, crypto_rsa_PublicKey *pub, _slice_uint8 _r0, error _r1, _slice_uint8 msg)",
    "crypto_rsa._ptr_PrivateKey.Precompute": "void __golang crypto_rsa__ptr_PrivateKey_Precompute(_ptr_rsa_PrivateKey)",
    "crypto_rsa.decryptOAEP": "void __golang crypto_rsa_decryptOAEP(hash_Hash hash, _slice_uint8 ciphertext, hash_Hash mgfHash, io_Reader random, _slice_uint8 label, _slice_uint8 _r0, error _r1, crypto_rsa_PrivateKey *priv)",
    "crypto_rsa._ptr_PrivateKey.Size": "int_0 __golang crypto_rsa__ptr_PrivateKey_Size(_ptr_rsa_PrivateKey)",
    "crypto_sha1._ptr_digest.UnmarshalBinary": "error_0 __golang crypto_sha1__ptr_digest_UnmarshalBinary(_ptr_sha1_digest, _slice_uint8_0)",
    "crypto_sha1._ptr_digest.Reset": "void __golang crypto_sha1__ptr_digest_Reset(_ptr_sha1_digest)",
    "crypto_sha1.New": "hash_Hash __golang crypto_sha1_New()",
    "crypto_sha1._ptr_digest.Size": "int_0 __golang crypto_sha1__ptr_digest_Size(_ptr_sha1_digest)",
    "crypto_sha1._ptr_digest.BlockSize": "int_0 __golang crypto_sha1__ptr_digest_BlockSize(_ptr_sha1_digest)",
    "crypto_sha1._ptr_digest.Sum": "_slice_uint8_0 __golang crypto_sha1__ptr_digest_Sum(_ptr_sha1_digest, _slice_uint8_0)",
    "crypto_sha1._ptr_digest.ConstantTimeSum": "_slice_uint8_0 __golang crypto_sha1__ptr_digest_ConstantTimeSum(_ptr_sha1_digest, _slice_uint8_0)",
    "crypto_sha1.block": "void __golang crypto_sha1_block(crypto_sha1_digest *dig, _slice_uint8 p)",
    "crypto_sha1.blockAMD64": "void __golang crypto_sha1_blockAMD64()",
    "crypto_sha1.blockAVX2": "void __golang crypto_sha1_blockAVX2()",
    "crypto_sha256._ptr_digest.UnmarshalBinary": "error_0 __golang crypto_sha256__ptr_digest_UnmarshalBinary(_ptr_sha256_digest, _slice_uint8_0)",
    "crypto_sha256._ptr_digest.Reset": "void __golang crypto_sha256__ptr_digest_Reset(_ptr_sha256_digest)",
    "crypto_sha256.New": "hash_Hash __golang crypto_sha256_New()",
    "crypto_sha256.New224": "hash_Hash __golang crypto_sha256_New224()",
    "crypto_sha256._ptr_digest.Size": "int_0 __golang crypto_sha256__ptr_digest_Size(_ptr_sha256_digest)",
    "crypto_sha256._ptr_digest.BlockSize": "int_0 __golang crypto_sha256__ptr_digest_BlockSize(_ptr_sha256_digest)",
    "crypto_sha256._ptr_digest.Sum": "_slice_uint8_0 __golang crypto_sha256__ptr_digest_Sum(_ptr_sha256_digest, _slice_uint8_0)",
    "crypto_sha256.block": "void __golang crypto_sha256_block()",
    "encoding_base64.Encoding.WithPadding": "_ptr_base64_Encoding __golang encoding_base64_Encoding_WithPadding(base64_Encoding, int32_0)",
    "encoding_base64.Encoding.Strict": "_ptr_base64_Encoding __golang encoding_base64_Encoding_Strict(base64_Encoding)",
    "encoding_base64._ptr_Encoding.Encode": "void __golang encoding_base64__ptr_Encoding_Encode(_ptr_base64_Encoding, _slice_uint8_0, _slice_uint8_0)",
    "encoding_base64._ptr_Encoding.EncodeToString": "string_0 __golang encoding_base64__ptr_Encoding_EncodeToString(_ptr_base64_Encoding, _slice_uint8_0)",
    "encoding_base64._ptr_encoder.Close": "error_0 __golang encoding_base64__ptr_encoder_Close(_ptr_base64_encoder)",
    "encoding_base64._ptr_Encoding.EncodedLen": "int_0 __golang encoding_base64__ptr_Encoding_EncodedLen(_ptr_base64_Encoding, int_0)",
    "encoding_base64.CorruptInputError.Error": "string_0 __golang encoding_base64_CorruptInputError_Error(base64_CorruptInputError)",
    "encoding_base64._ptr_Encoding.DecodedLen": "int_0 __golang encoding_base64__ptr_Encoding_DecodedLen(_ptr_base64_Encoding, int_0)",
    "encoding_base64._ptr_Encoding.Strict": "_ptr_base64_Encoding __golang encoding_base64__ptr_Encoding_Strict(_ptr_base64_Encoding)",
    "encoding_base64._ptr_Encoding.WithPadding": "_ptr_base64_Encoding __golang encoding_base64__ptr_Encoding_WithPadding(_ptr_base64_Encoding, int32_0)",
    "encoding_base64._ptr_CorruptInputError.Error": "string_0 __golang encoding_base64__ptr_CorruptInputError_Error(_ptr_base64_CorruptInputError)",
    "encoding_pem.removeSpacesAndTabs": "_slice_uint8 __golang encoding_pem_removeSpacesAndTabs(_slice_uint8 data)",
    "encoding_pem._ptr_lineBreaker.Close": "error_0 __golang encoding_pem__ptr_lineBreaker_Close(_ptr_pem_lineBreaker)",
    "encoding_pem.Encode": "error __golang encoding_pem_Encode(io_Writer out, encoding_pem_Block *b)",
    "encoding_hex.InvalidByteError.Error": "string_0 __golang encoding_hex_InvalidByteError_Error(hex_InvalidByteError)",
    "encoding_hex._ptr_dumper.Close": "error_0 __golang encoding_hex__ptr_dumper_Close(_ptr_hex_dumper)",
    "encoding_hex._ptr_InvalidByteError.Error": "string_0 __golang encoding_hex__ptr_InvalidByteError_Error(_ptr_hex_InvalidByteError)",
    "crypto_x509_pkix.RDNSequence.String": "string_0 __golang crypto_x509_pkix_RDNSequence_String(pkix_RDNSequence)",
    "crypto_x509_pkix._ptr_Name.FillFromRDNSequence": "void __golang crypto_x509_pkix__ptr_Name_FillFromRDNSequence(_ptr_pkix_Name, _ptr_pkix_RDNSequence)",
    "crypto_x509_pkix.Name.appendRDNs": "crypto_x509_pkix_RDNSequence __golang crypto_x509_pkix_Name_appendRDNs(crypto_x509_pkix_Name n, crypto_x509_pkix_RDNSequence in, _slice_string values, encoding_asn1_ObjectIdentifier oid)",
    "crypto_x509_pkix.Name.ToRDNSequence": "pkix_RDNSequence __golang crypto_x509_pkix_Name_ToRDNSequence(pkix_Name)",
    "crypto_x509_pkix.Name.String": "string_0 __golang crypto_x509_pkix_Name_String(pkix_Name)",
    "crypto_x509_pkix._ptr_CertificateList.HasExpired": "bool __golang crypto_x509_pkix__ptr_CertificateList_HasExpired(_ptr_pkix_CertificateList, time_Time_0)",
    "crypto_x509_pkix._ptr_RDNSequence.String": "string_0 __golang crypto_x509_pkix__ptr_RDNSequence_String(_ptr_pkix_RDNSequence)",
    "crypto_x509_pkix._ptr_Name.String": "string_0 __golang crypto_x509_pkix__ptr_Name_String(_ptr_pkix_Name)",
    "crypto_x509_pkix._ptr_Name.ToRDNSequence": "pkix_RDNSequence __golang crypto_x509_pkix__ptr_Name_ToRDNSequence(_ptr_pkix_Name)",
    "internal_intern._ptr_Value.Get": "interface__0 __golang internal_intern__ptr_Value_Get(_ptr_intern_Value)",
    "internal_intern.get.deferwrap1": "void __golang internal_intern_get_deferwrap1()",
    "internal_intern.finalize": "void __golang internal_intern_finalize(internal_intern_Value *v)",
    "internal_intern.finalize.deferwrap1": "void __golang internal_intern_finalize_deferwrap1()",
    "net_netip.AddrFrom16": "net_netip_Addr __golang net_netip_AddrFrom16(uint8 addr[16])",
    "net_netip.parseAddrError.Error": "string_0 __golang net_netip_parseAddrError_Error(netip_parseAddrError)",
    "net_netip.Addr.IsValid": "bool __golang net_netip_Addr_IsValid(netip_Addr)",
    "net_netip.Addr.BitLen": "int_0 __golang net_netip_Addr_BitLen(netip_Addr)",
    "net_netip.Addr.Zone": "string_0 __golang net_netip_Addr_Zone(netip_Addr)",
    "net_netip.Addr.Compare": "int_0 __golang net_netip_Addr_Compare(netip_Addr, netip_Addr)",
    "net_netip.Addr.Less": "bool __golang net_netip_Addr_Less(netip_Addr, netip_Addr)",
    "net_netip.Addr.Is4": "bool __golang net_netip_Addr_Is4(netip_Addr)",
    "net_netip.Addr.Is4In6": "bool __golang net_netip_Addr_Is4In6(netip_Addr)",
    "net_netip.Addr.Is6": "bool __golang net_netip_Addr_Is6(netip_Addr)",
    "net_netip.Addr.Unmap": "net_netip_Addr __golang net_netip_Addr_Unmap(net_netip_Addr ip_0)",
    "net_netip.Addr.WithZone": "netip_Addr __golang net_netip_Addr_WithZone(netip_Addr, string_0)",
    "net_netip.Addr.IsLinkLocalUnicast": "bool __golang net_netip_Addr_IsLinkLocalUnicast(netip_Addr)",
    "net_netip.Addr.IsLoopback": "bool __golang net_netip_Addr_IsLoopback(netip_Addr)",
    "net_netip.Addr.IsMulticast": "bool __golang net_netip_Addr_IsMulticast(netip_Addr)",
    "net_netip.Addr.IsInterfaceLocalMulticast": "bool __golang net_netip_Addr_IsInterfaceLocalMulticast(netip_Addr)",
    "net_netip.Addr.IsLinkLocalMulticast": "bool __golang net_netip_Addr_IsLinkLocalMulticast(netip_Addr)",
    "net_netip.Addr.IsGlobalUnicast": "bool __golang net_netip_Addr_IsGlobalUnicast(netip_Addr)",
    "net_netip.Addr.IsPrivate": "bool __golang net_netip_Addr_IsPrivate(netip_Addr)",
    "net_netip.Addr.IsUnspecified": "bool __golang net_netip_Addr_IsUnspecified(netip_Addr)",
    "net_netip.Addr.As16": "_16_uint8 __golang net_netip_Addr_As16(netip_Addr)",
    "net_netip.Addr.As4": "_4_uint8 __golang net_netip_Addr_As4(netip_Addr)",
    "net_netip.Addr.AsSlice": "_slice_uint8_0 __golang net_netip_Addr_AsSlice(netip_Addr)",
    "net_netip.Addr.Next": "net_netip_Addr __golang net_netip_Addr_Next(net_netip_Addr ip_0)",
    "net_netip.Addr.Prev": "net_netip_Addr __golang net_netip_Addr_Prev(net_netip_Addr ip_0)",
    "net_netip.Addr.String": "string_0 __golang net_netip_Addr_String(netip_Addr)",
    "net_netip.Addr.AppendTo": "_slice_uint8_0 __golang net_netip_Addr_AppendTo(netip_Addr, _slice_uint8_0)",
    "net_netip.Addr.appendTo4": "_slice_uint8_0 __golang net_netip_Addr_appendTo4(netip_Addr, _slice_uint8_0)",
    "net_netip.Addr.appendTo6": "_slice_uint8_0 __golang net_netip_Addr_appendTo6(netip_Addr, _slice_uint8_0)",
    "net_netip.Addr.StringExpanded": "string_0 __golang net_netip_Addr_StringExpanded(netip_Addr)",
    "net_netip._ptr_Addr.UnmarshalText": "error_0 __golang net_netip__ptr_Addr_UnmarshalText(_ptr_netip_Addr, _slice_uint8_0)",
    "net_netip.Addr.marshalBinaryWithTrailingBytes": "_slice_uint8_0 __golang net_netip_Addr_marshalBinaryWithTrailingBytes(netip_Addr, int_0)",
    "net_netip._ptr_Addr.UnmarshalBinary": "error_0 __golang net_netip__ptr_Addr_UnmarshalBinary(_ptr_netip_Addr, _slice_uint8_0)",
    "net_netip.AddrPort.Addr": "netip_Addr __golang net_netip_AddrPort_Addr(netip_AddrPort)",
    "net_netip.AddrPort.Port": "uint16_0 __golang net_netip_AddrPort_Port(netip_AddrPort)",
    "net_netip.AddrPort.IsValid": "bool __golang net_netip_AddrPort_IsValid(netip_AddrPort)",
    "net_netip.AddrPort.Compare": "int_0 __golang net_netip_AddrPort_Compare(netip_AddrPort, netip_AddrPort)",
    "net_netip.AddrPort.String": "string_0 __golang net_netip_AddrPort_String(netip_AddrPort)",
    "net_netip.AddrPort.AppendTo": "_slice_uint8_0 __golang net_netip_AddrPort_AppendTo(netip_AddrPort, _slice_uint8_0)",
    "net_netip._ptr_AddrPort.UnmarshalText": "error_0 __golang net_netip__ptr_AddrPort_UnmarshalText(_ptr_netip_AddrPort, _slice_uint8_0)",
    "net_netip._ptr_AddrPort.UnmarshalBinary": "error_0 __golang net_netip__ptr_AddrPort_UnmarshalBinary(_ptr_netip_AddrPort, _slice_uint8_0)",
    "net_netip.Prefix.Addr": "net_netip_Addr __golang net_netip_Prefix_Addr(net_netip_Prefix p)",
    "net_netip.Prefix.Bits": "int_0 __golang net_netip_Prefix_Bits(netip_Prefix)",
    "net_netip.Prefix.IsValid": "bool __golang net_netip_Prefix_IsValid(netip_Prefix)",
    "net_netip.Prefix.IsSingleIP": "bool __golang net_netip_Prefix_IsSingleIP(netip_Prefix)",
    "net_netip.Prefix.Masked": "netip_Prefix __golang net_netip_Prefix_Masked(netip_Prefix)",
    "net_netip.Prefix.Contains": "bool __golang net_netip_Prefix_Contains(netip_Prefix, netip_Addr)",
    "net_netip.Prefix.AppendTo": "_slice_uint8_0 __golang net_netip_Prefix_AppendTo(netip_Prefix, _slice_uint8_0)",
    "net_netip._ptr_Prefix.UnmarshalText": "error_0 __golang net_netip__ptr_Prefix_UnmarshalText(_ptr_netip_Prefix, _slice_uint8_0)",
    "net_netip._ptr_Prefix.UnmarshalBinary": "error_0 __golang net_netip__ptr_Prefix_UnmarshalBinary(_ptr_netip_Prefix, _slice_uint8_0)",
    "net_netip.Prefix.String": "string_0 __golang net_netip_Prefix_String(netip_Prefix)",
    "net_netip._ptr_Addr.AppendTo": "_slice_uint8_0 __golang net_netip__ptr_Addr_AppendTo(_ptr_netip_Addr, _slice_uint8_0)",
    "net_netip._ptr_Addr.As16": "_16_uint8 __golang net_netip__ptr_Addr_As16(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.As4": "_4_uint8 __golang net_netip__ptr_Addr_As4(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.AsSlice": "_slice_uint8_0 __golang net_netip__ptr_Addr_AsSlice(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.BitLen": "int_0 __golang net_netip__ptr_Addr_BitLen(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.Compare": "int_0 __golang net_netip__ptr_Addr_Compare(_ptr_netip_Addr, netip_Addr)",
    "net_netip._ptr_Addr.Is4": "bool __golang net_netip__ptr_Addr_Is4(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.Is4In6": "bool __golang net_netip__ptr_Addr_Is4In6(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.Is6": "bool __golang net_netip__ptr_Addr_Is6(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsGlobalUnicast": "bool __golang net_netip__ptr_Addr_IsGlobalUnicast(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsInterfaceLocalMulticast": "bool __golang net_netip__ptr_Addr_IsInterfaceLocalMulticast(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsLinkLocalMulticast": "bool __golang net_netip__ptr_Addr_IsLinkLocalMulticast(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsLinkLocalUnicast": "bool __golang net_netip__ptr_Addr_IsLinkLocalUnicast(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsLoopback": "bool __golang net_netip__ptr_Addr_IsLoopback(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsMulticast": "bool __golang net_netip__ptr_Addr_IsMulticast(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsPrivate": "bool __golang net_netip__ptr_Addr_IsPrivate(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsUnspecified": "bool __golang net_netip__ptr_Addr_IsUnspecified(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.IsValid": "bool __golang net_netip__ptr_Addr_IsValid(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.Less": "bool __golang net_netip__ptr_Addr_Less(_ptr_netip_Addr, netip_Addr)",
    "net_netip._ptr_Addr.Next": "net_netip_Addr __golang net_netip__ptr_Addr_Next(net_netip_Addr *ip_0)",
    "net_netip._ptr_Addr.Prev": "net_netip_Addr __golang net_netip__ptr_Addr_Prev(net_netip_Addr *ip_0)",
    "net_netip._ptr_Addr.String": "string_0 __golang net_netip__ptr_Addr_String(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.StringExpanded": "string_0 __golang net_netip__ptr_Addr_StringExpanded(_ptr_netip_Addr)",
    "net_netip._ptr_Addr.Unmap": "net_netip_Addr __golang net_netip__ptr_Addr_Unmap(net_netip_Addr *ip_0)",
    "net_netip._ptr_Addr.WithZone": "netip_Addr __golang net_netip__ptr_Addr_WithZone(_ptr_netip_Addr, string_0)",
    "net_netip._ptr_Addr.Zone": "string_0 __golang net_netip__ptr_Addr_Zone(_ptr_netip_Addr)",
    "net_netip._ptr_Prefix.Addr": "net_netip_Addr __golang net_netip__ptr_Prefix_Addr(net_netip_Prefix *p)",
    "net_netip._ptr_Prefix.AppendTo": "_slice_uint8_0 __golang net_netip__ptr_Prefix_AppendTo(_ptr_netip_Prefix, _slice_uint8_0)",
    "net_netip._ptr_Prefix.Bits": "int_0 __golang net_netip__ptr_Prefix_Bits(_ptr_netip_Prefix)",
    "net_netip._ptr_Prefix.Contains": "bool __golang net_netip__ptr_Prefix_Contains(_ptr_netip_Prefix, netip_Addr)",
    "net_netip._ptr_Prefix.IsSingleIP": "bool __golang net_netip__ptr_Prefix_IsSingleIP(_ptr_netip_Prefix)",
    "net_netip._ptr_Prefix.IsValid": "bool __golang net_netip__ptr_Prefix_IsValid(_ptr_netip_Prefix)",
    "net_netip._ptr_Prefix.Masked": "netip_Prefix __golang net_netip__ptr_Prefix_Masked(_ptr_netip_Prefix)",
    "net_netip._ptr_Prefix.Overlaps": "bool __golang net_netip__ptr_Prefix_Overlaps(_ptr_netip_Prefix, netip_Prefix)",
    "net_netip._ptr_Prefix.String": "string_0 __golang net_netip__ptr_Prefix_String(_ptr_netip_Prefix)",
    "net_netip._ptr_parseAddrError.Error": "string_0 __golang net_netip__ptr_parseAddrError_Error(_ptr_netip_parseAddrError)",
    "net_netip._ptr_AddrPort.Addr": "netip_Addr __golang net_netip__ptr_AddrPort_Addr(_ptr_netip_AddrPort)",
    "net_netip._ptr_AddrPort.AppendTo": "_slice_uint8_0 __golang net_netip__ptr_AddrPort_AppendTo(_ptr_netip_AddrPort, _slice_uint8_0)",
    "net_netip._ptr_AddrPort.Compare": "int_0 __golang net_netip__ptr_AddrPort_Compare(_ptr_netip_AddrPort, netip_AddrPort)",
    "net_netip._ptr_AddrPort.IsValid": "bool __golang net_netip__ptr_AddrPort_IsValid(_ptr_netip_AddrPort)",
    "net_netip._ptr_AddrPort.Port": "uint16_0 __golang net_netip__ptr_AddrPort_Port(_ptr_netip_AddrPort)",
    "net_netip._ptr_AddrPort.String": "string_0 __golang net_netip__ptr_AddrPort_String(_ptr_netip_AddrPort)",
    "vendor_golang.org_x_net_dns_dnsmessage._ptr_nestedError.Error": "string_0 __golang vendor_golang_org_x_net_dns_dnsmessage__ptr_nestedError_Error(_ptr_dnsmessage_nestedError)",
    "vendor_golang.org_x_net_dns_dnsmessage._ptr_header.pack": "_slice_uint8_0 __golang vendor_golang_org_x_net_dns_dnsmessage__ptr_header_pack(_ptr_dnsmessage_header, _slice_uint8_0)",
    "vendor_golang.org_x_net_dns_dnsmessage._ptr_Parser.skipResource": "error __golang vendor_golang_org_x_net_dns_dnsmessage__ptr_Parser_skipResource(vendor_golang_org_x_net_dns_dnsmessage_Parser *p, unsigned __int8 sec)",
    "vendor_golang.org_x_net_dns_dnsmessage._ptr_Parser.SkipQuestion": "error_0 __golang vendor_golang_org_x_net_dns_dnsmessage__ptr_Parser_SkipQuestion(_ptr_dnsmessage_Parser)",
    "vendor_golang.org_x_net_dns_dnsmessage.NewBuilder": "void __golang vendor_golang_org_x_net_dns_dnsmessage_NewBuilder(vendor_golang_org_x_net_dns_dnsmessage_Header h, vendor_golang_org_x_net_dns_dnsmessage_Builder _r0, _slice_uint8 buf)",
    "vendor_golang.org_x_net_dns_dnsmessage._ptr_Builder.Question": "error __golang vendor_golang_org_x_net_dns_dnsmessage__ptr_Builder_Question(vendor_golang_org_x_net_dns_dnsmessage_Builder *b, vendor_golang_org_x_net_dns_dnsmessage_Question q)",
    "vendor_golang.org_x_net_dns_dnsmessage._ptr_Builder.OPTResource": "error __golang vendor_golang_org_x_net_dns_dnsmessage__ptr_Builder_OPTResource(vendor_golang_org_x_net_dns_dnsmessage_Builder *b, vendor_golang_org_x_net_dns_dnsmessage_ResourceHeader h, vendor_golang_org_x_net_dns_dnsmessage_OPTResource r)",
    "internal_singleflight._ptr_Group.DoChan": "_chan_left_chan_internal_singleflight_Result __golang internal_singleflight__ptr_Group_DoChan(internal_singleflight_Group *g, string key, func_interface__comma_error fn)",
    "internal_singleflight._ptr_Group.DoChan.gowrap1": "void __golang internal_singleflight__ptr_Group_DoChan_gowrap1()",
    "internal_singleflight._ptr_Group.doCall": "void __golang internal_singleflight__ptr_Group_doCall(internal_singleflight_Group *g, internal_singleflight_call *c, string key, func_interface__comma_error fn)",
    "internal_singleflight._ptr_Group.ForgetUnshared": "bool __golang internal_singleflight__ptr_Group_ForgetUnshared(_ptr_singleflight_Group, string_0)",
    "internal_singleflight._ptr_Group.ForgetUnshared.deferwrap1": "void __golang internal_singleflight__ptr_Group_ForgetUnshared_deferwrap1()",
    "net.sortByRFC6724": "void __golang net_sortByRFC6724(_slice_net_IPAddr addrs)",
    "net.sortByRFC6724withSrcs": "void __golang net_sortByRFC6724withSrcs(_slice_net_IPAddr addrs, _slice_net_netip_Addr srcs)",
    "net.srcAddrs": "_slice_net_netip_Addr __golang net_srcAddrs(_slice_net_IPAddr addrs)",
    "net.ipAttrOf": "net_ipAttr __golang net_ipAttrOf(net_netip_Addr ip_0)",
    "net._ptr_byRFC6724.Len": "int_0 __golang net__ptr_byRFC6724_Len(_ptr_net_byRFC6724)",
    "net._ptr_byRFC6724.Swap": "void __golang net__ptr_byRFC6724_Swap(_ptr_net_byRFC6724, int_0, int_0)",
    "net._ptr_byRFC6724.Less": "bool __golang net__ptr_byRFC6724_Less(_ptr_net_byRFC6724, int_0, int_0)",
    "net.classifyScope": "unsigned __int8 __golang net_classifyScope(net_netip_Addr ip_0)",
    "net.commonPrefixLen": "int __golang net_commonPrefixLen(net_netip_Addr a, net_IP b)",
    "net.addrinfoErrno.Error": "string_0 __golang net_addrinfoErrno_Error(net_addrinfoErrno)",
    "net.addrinfoErrno.Temporary": "bool __golang net_addrinfoErrno_Temporary(net_addrinfoErrno)",
    "net.addrinfoErrno.Timeout": "bool __golang net_addrinfoErrno_Timeout(net_addrinfoErrno)",
    "net.cgoLookupServicePort.deferwrap1": "void __golang net_cgoLookupServicePort_deferwrap1()",
    "net.cgoLookupHostIP": "void __golang net_cgoLookupHostIP(error err, _slice_net_IPAddr addrs, string network, string name)",
    "net.cgoLookupHostIP.deferwrap1": "void __golang net_cgoLookupHostIP_deferwrap1()",
    "net.initConfVal": "void __golang net_initConfVal()",
    "net.isLocalhost": "bool __golang net_isLocalhost(string h)",
    "net._ptr_mptcpStatus.get": "bool __golang net__ptr_mptcpStatus_get(_ptr_net_mptcpStatus)",
    "net.minNonzeroTime": "time_Time __golang net_minNonzeroTime(time_Time a, time_Time b)",
    "net._ptr_Dialer.deadline": "time_Time __golang net__ptr_Dialer_deadline(net_Dialer *d, context_Context ctx, time_Time now)",
    "net._ptr_Resolver.resolveAddrList": "void __golang net__ptr_Resolver_resolveAddrList(net_Resolver *r, context_Context ctx, net_Addr hint, string op, net_addrList _r0, string network, error _r1, string addr)",
    "net._ptr_sysDialer.dialParallel.gowrap4": "void __golang net__ptr_sysDialer_dialParallel_gowrap4()",
    "net._ptr_sysDialer.dialParallel.deferwrap3": "void __golang net__ptr_sysDialer_dialParallel_deferwrap3()",
    "net._ptr_sysDialer.dialParallel.gowrap2": "void __golang net__ptr_sysDialer_dialParallel_gowrap2()",
    "net._ptr_sysDialer.dialParallel.deferwrap1": "void __golang net__ptr_sysDialer_dialParallel_deferwrap1()",
    "net._ptr_sysDialer.dialSingle": "void __golang net__ptr_sysDialer_dialSingle(error err, net_Conn c, net_sysDialer *sd, context_Context ctx, net_Addr ra)",
    "net._ptr_ListenConfig.MultipathTCP": "bool __golang net__ptr_ListenConfig_MultipathTCP(_ptr_net_ListenConfig)",
    "net._ptr_ListenConfig.SetMultipathTCP": "void __golang net__ptr_ListenConfig_SetMultipathTCP(_ptr_net_ListenConfig, bool)",
    "net.isDomainName": "bool __golang net_isDomainName(string s)",
    "net.checkResponse": "bool __golang net_checkResponse(uint16 reqID, vendor_golang_org_x_net_dns_dnsmessage_Question reqQues, vendor_golang_org_x_net_dns_dnsmessage_Header respHdr, vendor_golang_org_x_net_dns_dnsmessage_Question respQues)",
    "net.dnsPacketRoundTrip": "void __golang net_dnsPacketRoundTrip(net_Conn c, vendor_golang_org_x_net_dns_dnsmessage_Question query, _slice_uint8 b, vendor_golang_org_x_net_dns_dnsmessage_Parser _r0, vendor_golang_org_x_net_dns_dnsmessage_Header _r1, error _r2, uint16 id)",
    "net.dnsStreamRoundTrip": "void __golang net_dnsStreamRoundTrip(net_Conn c, vendor_golang_org_x_net_dns_dnsmessage_Question query, _slice_uint8 b, vendor_golang_org_x_net_dns_dnsmessage_Parser _r0, vendor_golang_org_x_net_dns_dnsmessage_Header _r1, error _r2, uint16 id)",
    "net._ptr_Resolver.exchange": "void __golang net__ptr_Resolver_exchange(net_Resolver *r, context_Context ctx, vendor_golang_org_x_net_dns_dnsmessage_Question q, __int64 timeout, bool useTCP, bool ad, vendor_golang_org_x_net_dns_dnsmessage_Parser _r0, vendor_golang_org_x_net_dns_dnsmessage_Header _r1, error _r2, error _r2, string server)",
    "net.checkHeader": "error __golang net_checkHeader(vendor_golang_org_x_net_dns_dnsmessage_Parser *p, vendor_golang_org_x_net_dns_dnsmessage_Header h)",
    "net.skipToAnswer": "error __golang net_skipToAnswer(vendor_golang_org_x_net_dns_dnsmessage_Parser *p, unsigned __int16 qtype)",
    "net.extractExtendedRCode": "unsigned __int16 __golang net_extractExtendedRCode(vendor_golang_org_x_net_dns_dnsmessage_Parser p, vendor_golang_org_x_net_dns_dnsmessage_Header hdr)",
    "net._ptr_resolverConfig.tryUpdate": "void __golang net__ptr_resolverConfig_tryUpdate(net_resolverConfig *conf, string name)",
    "net._ptr_resolverConfig.tryUpdate.deferwrap1": "void __golang net__ptr_resolverConfig_tryUpdate_deferwrap1()",
    "net._ptr_resolverConfig.releaseSema": "void __golang net__ptr_resolverConfig_releaseSema(net_resolverConfig *conf)",
    "net.avoidDNS": "bool __golang net_avoidDNS(string name)",
    "net._ptr_dnsConfig.nameList": "_slice_string_0 __golang net__ptr_dnsConfig_nameList(_ptr_net_dnsConfig, string_0)",
    "net.dnsReadConfig.deferwrap1": "void __golang net_dnsReadConfig_deferwrap1()",
    "net.dnsDefaultSearch": "_slice_string __golang net_dnsDefaultSearch()",
    "net._ptr_netFD.Close": "error_0 __golang net__ptr_netFD_Close(_ptr_net_netFD)",
    "net._ptr_netFD.shutdown": "error_0 __golang net__ptr_netFD_shutdown(_ptr_net_netFD, int_0)",
    "net._ptr_netFD.SetDeadline": "error_0 __golang net__ptr_netFD_SetDeadline(_ptr_net_netFD, time_Time_0)",
    "net._ptr_netFD.SetReadDeadline": "error_0 __golang net__ptr_netFD_SetReadDeadline(_ptr_net_netFD, time_Time_0)",
    "net._ptr_netFD.SetWriteDeadline": "error_0 __golang net__ptr_netFD_SetWriteDeadline(_ptr_net_netFD, time_Time_0)",
    "net._ptr_netFD.name": "string_0 __golang net__ptr_netFD_name(_ptr_net_netFD)",
    "net._ptr_netFD.connect": "void __golang net__ptr_netFD_connect(syscall_Sockaddr rsa, error ret, net_netFD *fd, context_Context ctx, syscall_Sockaddr la, syscall_Sockaddr ra)",
    "net._ptr_netFD.connect.deferwrap1": "void __golang net__ptr_netFD_connect_deferwrap1()",
    "net.parseLiteralIP": "string __golang net_parseLiteralIP(string addr)",
    "net.readHosts": "void __golang net_readHosts()",
    "net.readHosts.deferwrap1": "void __golang net_readHosts_deferwrap1()",
    "net.lookupStaticHost.deferwrap1": "void __golang net_lookupStaticHost_deferwrap1()",
    "net._ptr_ipv6ZoneCache.update.deferwrap1": "void __golang net__ptr_ipv6ZoneCache_update_deferwrap1()",
    "net._ptr_ipv6ZoneCache.name": "string __golang net__ptr_ipv6ZoneCache_name(net_ipv6ZoneCache *zc, int index)",
    "net._ptr_ipv6ZoneCache.index": "int __golang net__ptr_ipv6ZoneCache_index(net_ipv6ZoneCache *zc, string name)",
    "net.newLink": "net_Interface *__golang net_newLink(syscall_IfInfomsg *ifim, _slice_syscall_NetlinkRouteAttr attrs)",
    "net.IP.IsUnspecified": "bool __golang net_IP_IsUnspecified(net_IP_0)",
    "net.IP.IsLoopback": "bool __golang net_IP_IsLoopback(net_IP_0)",
    "net.IP.IsPrivate": "bool __golang net_IP_IsPrivate(net_IP_0)",
    "net.IP.IsMulticast": "bool __golang net_IP_IsMulticast(net_IP_0)",
    "net.IP.IsInterfaceLocalMulticast": "bool __golang net_IP_IsInterfaceLocalMulticast(net_IP_0)",
    "net.IP.IsLinkLocalMulticast": "bool __golang net_IP_IsLinkLocalMulticast(net_IP_0)",
    "net.IP.IsLinkLocalUnicast": "bool __golang net_IP_IsLinkLocalUnicast(net_IP_0)",
    "net.IP.IsGlobalUnicast": "bool __golang net_IP_IsGlobalUnicast(net_IP_0)",
    "net.IP.To4": "net_IP_0 __golang net_IP_To4(net_IP_0)",
    "net.IP.To16": "net_IP_0 __golang net_IP_To16(net_IP_0)",
    "net.IP.DefaultMask": "net_IPMask_0 __golang net_IP_DefaultMask(net_IP_0)",
    "net.IP.Mask": "net_IP_0 __golang net_IP_Mask(net_IP_0, net_IPMask_0)",
    "net.IP.String": "string_0 __golang net_IP_String(net_IP_0)",
    "net._ptr_IP.UnmarshalText": "error_0 __golang net__ptr_IP_UnmarshalText(_ptr_net_IP, _slice_uint8_0)",
    "net.IP.Equal": "bool __golang net_IP_Equal(net_IP_0, net_IP_0)",
    "net.IP.matchAddrFamily": "bool __golang net_IP_matchAddrFamily(net_IP_0, net_IP_0)",
    "net._ptr_IPNet.Contains": "bool __golang net__ptr_IPNet_Contains(_ptr_net_IPNet, net_IP_0)",
    "net._ptr_IPNet.Network": "string_0 __golang net__ptr_IPNet_Network(_ptr_net_IPNet)",
    "net._ptr_IPNet.String": "string_0 __golang net__ptr_IPNet_String(_ptr_net_IPNet)",
    "net._ptr_IPAddr.Network": "string_0 __golang net__ptr_IPAddr_Network(_ptr_net_IPAddr)",
    "net._ptr_IPAddr.String": "string_0 __golang net__ptr_IPAddr_String(_ptr_net_IPAddr)",
    "net._ptr_IPAddr.isWildcard": "bool __golang net__ptr_IPAddr_isWildcard(_ptr_net_IPAddr)",
    "net.sockaddrToIP": "net_Addr __golang net_sockaddrToIP(syscall_Sockaddr sa)",
    "net._ptr_IPAddr.family": "int_0 __golang net__ptr_IPAddr_family(_ptr_net_IPAddr)",
    "net.isIPv4": "bool __golang net_isIPv4(net_Addr addr)",
    "net.addrList.forResolve": "net_Addr __golang net_addrList_forResolve(net_addrList addrs, string network, string addr)",
    "net.ipv4only": "bool __golang net_ipv4only(net_IPAddr addr)",
    "net.ipv6only": "bool __golang net_ipv6only(net_IPAddr addr)",
    "net._ptr_ipStackCapabilities.probe": "void __golang net__ptr_ipStackCapabilities_probe(net_ipStackCapabilities *p)",
    "net._ptr_ipStackCapabilities.probe.deferwrap1": "void __golang net__ptr_ipStackCapabilities_probe_deferwrap1()",
    "net.internetSocket": "void __golang net_internetSocket(context_Context ctx, int proto, string net, string mode, net_sockaddr laddr, funccontext_Context_comma_string_comma_string_comma_syscall_RawConn_error ctrlCtxFn, net_netFD *fd, net_sockaddr raddr, error err, int sotype)",
    "net._ptr_onlyValuesCtx.Value": "interface__0 __golang net__ptr_onlyValuesCtx_Value(_ptr_net_onlyValuesCtx, interface__0)",
    "net._ptr_Resolver.lookupIPAddr.gowrap2": "void __golang net__ptr_Resolver_lookupIPAddr_gowrap2()",
    "net._ptr_Resolver.lookupIPAddr.gowrap1": "void __golang net__ptr_Resolver_lookupIPAddr_gowrap1()",
    "net.readProtocols": "void __golang net_readProtocols()",
    "net.readProtocols.deferwrap1": "void __golang net_readProtocols_deferwrap1()",
    "net.initMPTCPavailable": "void __golang net_initMPTCPavailable()",
    "net.isUsingMultipathTCP": "bool __golang net_isUsingMultipathTCP(net_netFD *fd)",
    "net._ptr_conn.Close": "error_0 __golang net__ptr_conn_Close(_ptr_net_conn)",
    "net._ptr_conn.LocalAddr": "net_Addr_0 __golang net__ptr_conn_LocalAddr(_ptr_net_conn)",
    "net._ptr_conn.RemoteAddr": "net_Addr_0 __golang net__ptr_conn_RemoteAddr(_ptr_net_conn)",
    "net._ptr_conn.SetDeadline": "error_0 __golang net__ptr_conn_SetDeadline(_ptr_net_conn, time_Time_0)",
    "net._ptr_conn.SetReadDeadline": "error_0 __golang net__ptr_conn_SetReadDeadline(_ptr_net_conn, time_Time_0)",
    "net._ptr_conn.SetWriteDeadline": "error_0 __golang net__ptr_conn_SetWriteDeadline(_ptr_net_conn, time_Time_0)",
    "net._ptr_conn.SetReadBuffer": "error_0 __golang net__ptr_conn_SetReadBuffer(_ptr_net_conn, int_0)",
    "net._ptr_conn.SetWriteBuffer": "error_0 __golang net__ptr_conn_SetWriteBuffer(_ptr_net_conn, int_0)",
    "net.listenerBacklog": "int __golang net_listenerBacklog()",
    "net.canceledError.Error": "string_0 __golang net_canceledError_Error(net_canceledError_0)",
    "net.canceledError.Is": "bool __golang net_canceledError_Is(net_canceledError_0, error_0)",
    "net._ptr_OpError.Unwrap": "error_0 __golang net__ptr_OpError_Unwrap(_ptr_net_OpError)",
    "net._ptr_OpError.Error": "string_0 __golang net__ptr_OpError_Error(_ptr_net_OpError)",
    "net._ptr_OpError.Timeout": "bool __golang net__ptr_OpError_Timeout(_ptr_net_OpError)",
    "net._ptr_OpError.Temporary": "bool __golang net__ptr_OpError_Temporary(_ptr_net_OpError)",
    "net._ptr_ParseError.Error": "string_0 __golang net__ptr_ParseError_Error(_ptr_net_ParseError)",
    "net._ptr_ParseError.Timeout": "bool __golang net__ptr_ParseError_Timeout(_ptr_net_ParseError)",
    "net._ptr_ParseError.Temporary": "bool __golang net__ptr_ParseError_Temporary(_ptr_net_ParseError)",
    "net._ptr_AddrError.Error": "string_0 __golang net__ptr_AddrError_Error(_ptr_net_AddrError)",
    "net._ptr_AddrError.Timeout": "bool __golang net__ptr_AddrError_Timeout(_ptr_net_AddrError)",
    "net._ptr_AddrError.Temporary": "bool __golang net__ptr_AddrError_Temporary(_ptr_net_AddrError)",
    "net.UnknownNetworkError.Error": "string_0 __golang net_UnknownNetworkError_Error(net_UnknownNetworkError_0)",
    "net.UnknownNetworkError.Timeout": "bool __golang net_UnknownNetworkError_Timeout(net_UnknownNetworkError_0)",
    "net.UnknownNetworkError.Temporary": "bool __golang net_UnknownNetworkError_Temporary(net_UnknownNetworkError_0)",
    "net._ptr_timeoutError.Error": "string_0 __golang net__ptr_timeoutError_Error(_ptr_net_timeoutError)",
    "net._ptr_timeoutError.Timeout": "bool __golang net__ptr_timeoutError_Timeout(_ptr_net_timeoutError)",
    "net._ptr_timeoutError.Temporary": "bool __golang net__ptr_timeoutError_Temporary(_ptr_net_timeoutError)",
    "net._ptr_timeoutError.Is": "bool __golang net__ptr_timeoutError_Is(_ptr_net_timeoutError, error_0)",
    "net._ptr_DNSError.Error": "string_0 __golang net__ptr_DNSError_Error(_ptr_net_DNSError)",
    "net._ptr_DNSError.Timeout": "bool __golang net__ptr_DNSError_Timeout(_ptr_net_DNSError)",
    "net._ptr_DNSError.Temporary": "bool __golang net__ptr_DNSError_Temporary(_ptr_net_DNSError)",
    "net.acquireThread": "void __golang net_acquireThread()",
    "net.releaseThread": "void __golang net_releaseThread()",
    "net.getSystemNSS": "net_nssConf *__golang net_getSystemNSS()",
    "net._ptr_nsswitchConfig.tryUpdate": "void __golang net__ptr_nsswitchConfig_tryUpdate(net_nsswitchConfig *conf)",
    "net._ptr_nsswitchConfig.tryUpdate.deferwrap1": "void __golang net__ptr_nsswitchConfig_tryUpdate_deferwrap1()",
    "net._ptr_nsswitchConfig.releaseSema": "void __golang net__ptr_nsswitchConfig_releaseSema(net_nsswitchConfig *conf)",
    "net.parseNSSConfFile.deferwrap1": "void __golang net_parseNSSConfFile_deferwrap1()",
    "net.parseNSSConf": "net_nssConf *__golang net_parseNSSConf(net_file *f)",
    "net._ptr_file.close": "void __golang net__ptr_file_close(_ptr_net_file)",
    "net.countAnyByte": "int __golang net_countAnyByte(string s, string t)",
    "net.splitAtBytes": "_slice_string __golang net_splitAtBytes(string s, string t)",
    "net.hasUpperCase": "bool __golang net_hasUpperCase(string s)",
    "net.lowerASCIIBytes": "void __golang net_lowerASCIIBytes(_slice_uint8 x)",
    "net.foreachField": "error __golang net_foreachField(string x, funcstring_error fn)",
    "net.stringsHasSuffixFold": "bool __golang net_stringsHasSuffixFold(string s, string suffix)",
    "net.readServices": "void __golang net_readServices()",
    "net.readServices.deferwrap1": "void __golang net_readServices_deferwrap1()",
    "net._ptr_rawConn.Control": "error_0 __golang net__ptr_rawConn_Control(_ptr_net_rawConn, PTR_funcuintptr_0)",
    "net._ptr_rawConn.Read": "error_0 __golang net__ptr_rawConn_Read(_ptr_net_rawConn, PTR_funcuintptr_bool_0)",
    "net._ptr_rawConn.Write": "error_0 __golang net__ptr_rawConn_Write(_ptr_net_rawConn, PTR_funcuintptr_bool_0)",
    "net._ptr_rawConn.PollFD": "_ptr_poll_FD __golang net__ptr_rawConn_PollFD(_ptr_net_rawConn)",
    "net._ptr_rawConn.Network": "poll_String __golang net__ptr_rawConn_Network(_ptr_net_rawConn)",
    "net._ptr_rawListener.Read": "error_0 __golang net__ptr_rawListener_Read(_ptr_net_rawListener, PTR_funcuintptr_bool_0)",
    "net._ptr_rawListener.Write": "error_0 __golang net__ptr_rawListener_Write(_ptr_net_rawListener, PTR_funcuintptr_bool_0)",
    "net.concurrentThreadsLimit": "int __golang net_concurrentThreadsLimit()",
    "net.maxAckBacklog": "int __golang net_maxAckBacklog(int n)",
    "net.maxListenerBacklog.deferwrap1": "void __golang net_maxListenerBacklog_deferwrap1()",
    "net.socket": "void __golang net_socket(context_Context ctx, net_sockaddr laddr, string net, net_sockaddr raddr, int family, int sotype, funccontext_Context_comma_string_comma_string_comma_syscall_RawConn_error ctrlCtxFn, int proto, net_netFD *fd, error err, bool ipv6only)",
    "net._ptr_netFD.dial": "error __golang net__ptr_netFD_dial(net_netFD *fd, context_Context ctx, net_sockaddr laddr, net_sockaddr raddr, funccontext_Context_comma_string_comma_string_comma_syscall_RawConn_error ctrlCtxFn)",
    "net._ptr_netFD.listenStream": "error __golang net__ptr_netFD_listenStream(net_netFD *fd, context_Context ctx, net_sockaddr laddr, int backlog, funccontext_Context_comma_string_comma_string_comma_syscall_RawConn_error ctrlCtxFn)",
    "net._ptr_netFD.listenDatagram": "error __golang net__ptr_netFD_listenDatagram(net_netFD *fd, context_Context ctx, net_sockaddr laddr, funccontext_Context_comma_string_comma_string_comma_syscall_RawConn_error ctrlCtxFn)",
    "net.setDefaultSockopts": "error __golang net_setDefaultSockopts(int s, int family, int sotype, bool ipv6only)",
    "net.setDefaultListenerSockopts": "error __golang net_setDefaultListenerSockopts(int s)",
    "net.setDefaultMulticastSockopts": "error __golang net_setDefaultMulticastSockopts(int s)",
    "net.setReadBuffer": "error __golang net_setReadBuffer(net_netFD *fd, int bytes)",
    "net.setWriteBuffer": "error __golang net_setWriteBuffer(net_netFD *fd, int bytes)",
    "net.setKeepAlive": "error __golang net_setKeepAlive(net_netFD *fd, bool keepalive)",
    "net.setLinger": "error __golang net_setLinger(net_netFD *fd, int sec)",
    "net._ptr_TCPAddr.AddrPort": "netip_AddrPort __golang net__ptr_TCPAddr_AddrPort(_ptr_net_TCPAddr)",
    "net._ptr_TCPAddr.Network": "string_0 __golang net__ptr_TCPAddr_Network(_ptr_net_TCPAddr)",
    "net._ptr_TCPAddr.String": "string_0 __golang net__ptr_TCPAddr_String(_ptr_net_TCPAddr)",
    "net._ptr_TCPAddr.isWildcard": "bool __golang net__ptr_TCPAddr_isWildcard(_ptr_net_TCPAddr)",
    "net._ptr_TCPConn.CloseRead": "error_0 __golang net__ptr_TCPConn_CloseRead(_ptr_net_TCPConn)",
    "net._ptr_TCPConn.CloseWrite": "error_0 __golang net__ptr_TCPConn_CloseWrite(_ptr_net_TCPConn)",
    "net._ptr_TCPConn.SetLinger": "error_0 __golang net__ptr_TCPConn_SetLinger(_ptr_net_TCPConn, int_0)",
    "net._ptr_TCPConn.SetKeepAlive": "error_0 __golang net__ptr_TCPConn_SetKeepAlive(_ptr_net_TCPConn, bool)",
    "net._ptr_TCPConn.SetKeepAlivePeriod": "error_0 __golang net__ptr_TCPConn_SetKeepAlivePeriod(_ptr_net_TCPConn, time_Duration)",
    "net._ptr_TCPConn.SetNoDelay": "error_0 __golang net__ptr_TCPConn_SetNoDelay(_ptr_net_TCPConn, bool)",
    "net.newTCPConn": "net_TCPConn *__golang net_newTCPConn(net_netFD *fd, __int64 keepAlive, functime_Duration keepAliveHook)",
    "net._ptr_TCPListener.Close": "error_0 __golang net__ptr_TCPListener_Close(_ptr_net_TCPListener)",
    "net._ptr_TCPListener.Addr": "net_Addr_0 __golang net__ptr_TCPListener_Addr(_ptr_net_TCPListener)",
    "net._ptr_TCPListener.SetDeadline": "error_0 __golang net__ptr_TCPListener_SetDeadline(_ptr_net_TCPListener, time_Time_0)",
    "net.sockaddrToTCP": "net_Addr __golang net_sockaddrToTCP(syscall_Sockaddr sa)",
    "net._ptr_TCPAddr.family": "int_0 __golang net__ptr_TCPAddr_family(_ptr_net_TCPAddr)",
    "net.selfConnect": "bool __golang net_selfConnect(net_netFD *fd, error err)",
    "net.setNoDelay": "error __golang net_setNoDelay(net_netFD *fd, bool noDelay)",
    "net.setKeepAlivePeriod": "error __golang net_setKeepAlivePeriod(net_netFD *fd, __int64 d)",
    "net._ptr_UDPAddr.AddrPort": "netip_AddrPort __golang net__ptr_UDPAddr_AddrPort(_ptr_net_UDPAddr)",
    "net._ptr_UDPAddr.Network": "string_0 __golang net__ptr_UDPAddr_Network(_ptr_net_UDPAddr)",
    "net._ptr_UDPAddr.String": "string_0 __golang net__ptr_UDPAddr_String(_ptr_net_UDPAddr)",
    "net._ptr_UDPAddr.isWildcard": "bool __golang net__ptr_UDPAddr_isWildcard(_ptr_net_UDPAddr)",
    "net.UDPAddrFromAddrPort": "net_UDPAddr *__golang net_UDPAddrFromAddrPort(net_netip_AddrPort addr)",
    "net.addrPortUDPAddr.Network": "string_0 __golang net_addrPortUDPAddr_Network(net_addrPortUDPAddr_0)",
    "net.sockaddrToUDP": "net_Addr __golang net_sockaddrToUDP(syscall_Sockaddr sa)",
    "net._ptr_UDPAddr.family": "int_0 __golang net__ptr_UDPAddr_family(_ptr_net_UDPAddr)",
    "net._ptr_UnixAddr.Network": "string_0 __golang net__ptr_UnixAddr_Network(_ptr_net_UnixAddr)",
    "net._ptr_UnixAddr.String": "string_0 __golang net__ptr_UnixAddr_String(_ptr_net_UnixAddr)",
    "net._ptr_UnixAddr.isWildcard": "bool __golang net__ptr_UnixAddr_isWildcard(_ptr_net_UnixAddr)",
    "net._ptr_UnixConn.CloseRead": "error_0 __golang net__ptr_UnixConn_CloseRead(_ptr_net_UnixConn)",
    "net._ptr_UnixConn.CloseWrite": "error_0 __golang net__ptr_UnixConn_CloseWrite(_ptr_net_UnixConn)",
    "net._ptr_UnixListener.Close": "error_0 __golang net__ptr_UnixListener_Close(_ptr_net_UnixListener)",
    "net._ptr_UnixListener.Addr": "net_Addr_0 __golang net__ptr_UnixListener_Addr(_ptr_net_UnixListener)",
    "net._ptr_UnixListener.SetDeadline": "error_0 __golang net__ptr_UnixListener_SetDeadline(_ptr_net_UnixListener, time_Time_0)",
    "net.unixSocket": "void __golang net_unixSocket(context_Context ctx, string mode, string net, funccontext_Context_comma_string_comma_string_comma_syscall_RawConn_error ctxCtrlFn, net_sockaddr laddr, net_netFD *_r0, error _r1, net_sockaddr raddr)",
    "net.sockaddrToUnix": "net_Addr __golang net_sockaddrToUnix(syscall_Sockaddr sa)",
    "net.sockaddrToUnixgram": "net_Addr __golang net_sockaddrToUnixgram(syscall_Sockaddr sa)",
    "net.sockaddrToUnixpacket": "net_Addr __golang net_sockaddrToUnixpacket(syscall_Sockaddr sa)",
    "net._ptr_UnixAddr.family": "int_0 __golang net__ptr_UnixAddr_family(_ptr_net_UnixAddr)",
    "net._ptr_UnixListener.close": "error_0 __golang net__ptr_UnixListener_close(_ptr_net_UnixListener)",
    "net._ptr_UnixListener.SetUnlinkOnClose": "void __golang net__ptr_UnixListener_SetUnlinkOnClose(_ptr_net_UnixListener, bool)",
    "net._ptr_IP.DefaultMask": "net_IPMask_0 __golang net__ptr_IP_DefaultMask(_ptr_net_IP)",
    "net._ptr_IP.Equal": "bool __golang net__ptr_IP_Equal(_ptr_net_IP, net_IP_0)",
    "net._ptr_IP.IsGlobalUnicast": "bool __golang net__ptr_IP_IsGlobalUnicast(_ptr_net_IP)",
    "net._ptr_IP.IsInterfaceLocalMulticast": "bool __golang net__ptr_IP_IsInterfaceLocalMulticast(_ptr_net_IP)",
    "net._ptr_IP.IsLinkLocalMulticast": "bool __golang net__ptr_IP_IsLinkLocalMulticast(_ptr_net_IP)",
    "net._ptr_IP.IsLinkLocalUnicast": "bool __golang net__ptr_IP_IsLinkLocalUnicast(_ptr_net_IP)",
    "net._ptr_IP.IsLoopback": "bool __golang net__ptr_IP_IsLoopback(_ptr_net_IP)",
    "net._ptr_IP.IsMulticast": "bool __golang net__ptr_IP_IsMulticast(_ptr_net_IP)",
    "net._ptr_IP.IsPrivate": "bool __golang net__ptr_IP_IsPrivate(_ptr_net_IP)",
    "net._ptr_IP.IsUnspecified": "bool __golang net__ptr_IP_IsUnspecified(_ptr_net_IP)",
    "net._ptr_IP.Mask": "net_IP_0 __golang net__ptr_IP_Mask(_ptr_net_IP, net_IPMask_0)",
    "net._ptr_IP.String": "string_0 __golang net__ptr_IP_String(_ptr_net_IP)",
    "net._ptr_IP.To16": "net_IP_0 __golang net__ptr_IP_To16(_ptr_net_IP)",
    "net._ptr_IP.To4": "net_IP_0 __golang net__ptr_IP_To4(_ptr_net_IP)",
    "net._ptr_IPMask.String": "string_0 __golang net__ptr_IPMask_String(_ptr_net_IPMask)",
    "net.onlyValuesCtx.Done": "_chan_left_chan_struct__0 __golang net_onlyValuesCtx_Done(net_onlyValuesCtx_0)",
    "net._ptr_onlyValuesCtx.Done": "_chan_left_chan_struct__0 __golang net__ptr_onlyValuesCtx_Done(_ptr_net_onlyValuesCtx)",
    "net.onlyValuesCtx.Err": "error_0 __golang net_onlyValuesCtx_Err(net_onlyValuesCtx_0)",
    "net._ptr_onlyValuesCtx.Err": "error_0 __golang net__ptr_onlyValuesCtx_Err(_ptr_net_onlyValuesCtx)",
    "net._ptr_canceledError.Error": "string_0 __golang net__ptr_canceledError_Error(_ptr_net_canceledError)",
    "net._ptr_canceledError.Is": "bool __golang net__ptr_canceledError_Is(_ptr_net_canceledError, error_0)",
    "net._ptr_addrinfoErrno.Error": "string_0 __golang net__ptr_addrinfoErrno_Error(_ptr_net_addrinfoErrno)",
    "net._ptr_addrinfoErrno.Temporary": "bool __golang net__ptr_addrinfoErrno_Temporary(_ptr_net_addrinfoErrno)",
    "net._ptr_addrinfoErrno.Timeout": "bool __golang net__ptr_addrinfoErrno_Timeout(_ptr_net_addrinfoErrno)",
    "net._ptr_TCPConn.Close": "error_0 __golang net__ptr_TCPConn_Close(_ptr_net_TCPConn)",
    "net._ptr_TCPConn.LocalAddr": "net_Addr_0 __golang net__ptr_TCPConn_LocalAddr(_ptr_net_TCPConn)",
    "net._ptr_TCPConn.RemoteAddr": "net_Addr_0 __golang net__ptr_TCPConn_RemoteAddr(_ptr_net_TCPConn)",
    "net._ptr_TCPConn.SetDeadline": "error_0 __golang net__ptr_TCPConn_SetDeadline(_ptr_net_TCPConn, time_Time_0)",
    "net._ptr_TCPConn.SetReadBuffer": "error_0 __golang net__ptr_TCPConn_SetReadBuffer(_ptr_net_TCPConn, int_0)",
    "net._ptr_TCPConn.SetReadDeadline": "error_0 __golang net__ptr_TCPConn_SetReadDeadline(_ptr_net_TCPConn, time_Time_0)",
    "net._ptr_TCPConn.SetWriteBuffer": "error_0 __golang net__ptr_TCPConn_SetWriteBuffer(_ptr_net_TCPConn, int_0)",
    "net._ptr_TCPConn.SetWriteDeadline": "error_0 __golang net__ptr_TCPConn_SetWriteDeadline(_ptr_net_TCPConn, time_Time_0)",
    "net._ptr_IPConn.Close": "error_0 __golang net__ptr_IPConn_Close(_ptr_net_IPConn)",
    "net._ptr_IPConn.LocalAddr": "net_Addr_0 __golang net__ptr_IPConn_LocalAddr(_ptr_net_IPConn)",
    "net._ptr_IPConn.RemoteAddr": "net_Addr_0 __golang net__ptr_IPConn_RemoteAddr(_ptr_net_IPConn)",
    "net._ptr_IPConn.SetDeadline": "error_0 __golang net__ptr_IPConn_SetDeadline(_ptr_net_IPConn, time_Time_0)",
    "net._ptr_IPConn.SetReadBuffer": "error_0 __golang net__ptr_IPConn_SetReadBuffer(_ptr_net_IPConn, int_0)",
    "net._ptr_IPConn.SetReadDeadline": "error_0 __golang net__ptr_IPConn_SetReadDeadline(_ptr_net_IPConn, time_Time_0)",
    "net._ptr_IPConn.SetWriteBuffer": "error_0 __golang net__ptr_IPConn_SetWriteBuffer(_ptr_net_IPConn, int_0)",
    "net._ptr_IPConn.SetWriteDeadline": "error_0 __golang net__ptr_IPConn_SetWriteDeadline(_ptr_net_IPConn, time_Time_0)",
    "net._ptr_UDPConn.Close": "error_0 __golang net__ptr_UDPConn_Close(_ptr_net_UDPConn)",
    "net._ptr_UDPConn.LocalAddr": "net_Addr_0 __golang net__ptr_UDPConn_LocalAddr(_ptr_net_UDPConn)",
    "net._ptr_UDPConn.RemoteAddr": "net_Addr_0 __golang net__ptr_UDPConn_RemoteAddr(_ptr_net_UDPConn)",
    "net._ptr_UDPConn.SetDeadline": "error_0 __golang net__ptr_UDPConn_SetDeadline(_ptr_net_UDPConn, time_Time_0)",
    "net._ptr_UDPConn.SetReadBuffer": "error_0 __golang net__ptr_UDPConn_SetReadBuffer(_ptr_net_UDPConn, int_0)",
    "net._ptr_UDPConn.SetReadDeadline": "error_0 __golang net__ptr_UDPConn_SetReadDeadline(_ptr_net_UDPConn, time_Time_0)",
    "net._ptr_UDPConn.SetWriteBuffer": "error_0 __golang net__ptr_UDPConn_SetWriteBuffer(_ptr_net_UDPConn, int_0)",
    "net._ptr_UDPConn.SetWriteDeadline": "error_0 __golang net__ptr_UDPConn_SetWriteDeadline(_ptr_net_UDPConn, time_Time_0)",
    "net._ptr_UnixConn.Close": "error_0 __golang net__ptr_UnixConn_Close(_ptr_net_UnixConn)",
    "net._ptr_UnixConn.LocalAddr": "net_Addr_0 __golang net__ptr_UnixConn_LocalAddr(_ptr_net_UnixConn)",
    "net._ptr_UnixConn.RemoteAddr": "net_Addr_0 __golang net__ptr_UnixConn_RemoteAddr(_ptr_net_UnixConn)",
    "net._ptr_UnixConn.SetDeadline": "error_0 __golang net__ptr_UnixConn_SetDeadline(_ptr_net_UnixConn, time_Time_0)",
    "net._ptr_UnixConn.SetReadBuffer": "error_0 __golang net__ptr_UnixConn_SetReadBuffer(_ptr_net_UnixConn, int_0)",
    "net._ptr_UnixConn.SetReadDeadline": "error_0 __golang net__ptr_UnixConn_SetReadDeadline(_ptr_net_UnixConn, time_Time_0)",
    "net._ptr_UnixConn.SetWriteBuffer": "error_0 __golang net__ptr_UnixConn_SetWriteBuffer(_ptr_net_UnixConn, int_0)",
    "net._ptr_UnixConn.SetWriteDeadline": "error_0 __golang net__ptr_UnixConn_SetWriteDeadline(_ptr_net_UnixConn, time_Time_0)",
    "net._ptr_UnknownNetworkError.Error": "string_0 __golang net__ptr_UnknownNetworkError_Error(_ptr_net_UnknownNetworkError)",
    "net._ptr_UnknownNetworkError.Temporary": "bool __golang net__ptr_UnknownNetworkError_Temporary(_ptr_net_UnknownNetworkError)",
    "net._ptr_UnknownNetworkError.Timeout": "bool __golang net__ptr_UnknownNetworkError_Timeout(_ptr_net_UnknownNetworkError)",
    "net.tcpConnWithoutReadFrom.Close": "error_0 __golang net_tcpConnWithoutReadFrom_Close(net_tcpConnWithoutReadFrom_0)",
    "net._ptr_tcpConnWithoutReadFrom.Close": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_Close(_ptr_net_tcpConnWithoutReadFrom)",
    "net.tcpConnWithoutReadFrom.CloseRead": "error_0 __golang net_tcpConnWithoutReadFrom_CloseRead(net_tcpConnWithoutReadFrom_0)",
    "net._ptr_tcpConnWithoutReadFrom.CloseRead": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_CloseRead(_ptr_net_tcpConnWithoutReadFrom)",
    "net.tcpConnWithoutReadFrom.CloseWrite": "error_0 __golang net_tcpConnWithoutReadFrom_CloseWrite(net_tcpConnWithoutReadFrom_0)",
    "net._ptr_tcpConnWithoutReadFrom.CloseWrite": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_CloseWrite(_ptr_net_tcpConnWithoutReadFrom)",
    "net.tcpConnWithoutReadFrom.LocalAddr": "net_Addr_0 __golang net_tcpConnWithoutReadFrom_LocalAddr(net_tcpConnWithoutReadFrom_0)",
    "net._ptr_tcpConnWithoutReadFrom.LocalAddr": "net_Addr_0 __golang net__ptr_tcpConnWithoutReadFrom_LocalAddr(_ptr_net_tcpConnWithoutReadFrom)",
    "net.tcpConnWithoutReadFrom.RemoteAddr": "net_Addr_0 __golang net_tcpConnWithoutReadFrom_RemoteAddr(net_tcpConnWithoutReadFrom_0)",
    "net._ptr_tcpConnWithoutReadFrom.RemoteAddr": "net_Addr_0 __golang net__ptr_tcpConnWithoutReadFrom_RemoteAddr(_ptr_net_tcpConnWithoutReadFrom)",
    "net.tcpConnWithoutReadFrom.SetDeadline": "error_0 __golang net_tcpConnWithoutReadFrom_SetDeadline(net_tcpConnWithoutReadFrom_0, time_Time_0)",
    "net._ptr_tcpConnWithoutReadFrom.SetDeadline": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetDeadline(_ptr_net_tcpConnWithoutReadFrom, time_Time_0)",
    "net.tcpConnWithoutReadFrom.SetKeepAlive": "error_0 __golang net_tcpConnWithoutReadFrom_SetKeepAlive(net_tcpConnWithoutReadFrom_0, bool)",
    "net._ptr_tcpConnWithoutReadFrom.SetKeepAlive": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetKeepAlive(_ptr_net_tcpConnWithoutReadFrom, bool)",
    "net.tcpConnWithoutReadFrom.SetKeepAlivePeriod": "error_0 __golang net_tcpConnWithoutReadFrom_SetKeepAlivePeriod(net_tcpConnWithoutReadFrom_0, time_Duration)",
    "net._ptr_tcpConnWithoutReadFrom.SetKeepAlivePeriod": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetKeepAlivePeriod(_ptr_net_tcpConnWithoutReadFrom, time_Duration)",
    "net.tcpConnWithoutReadFrom.SetLinger": "error_0 __golang net_tcpConnWithoutReadFrom_SetLinger(net_tcpConnWithoutReadFrom_0, int_0)",
    "net._ptr_tcpConnWithoutReadFrom.SetLinger": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetLinger(_ptr_net_tcpConnWithoutReadFrom, int_0)",
    "net.tcpConnWithoutReadFrom.SetNoDelay": "error_0 __golang net_tcpConnWithoutReadFrom_SetNoDelay(net_tcpConnWithoutReadFrom_0, bool)",
    "net._ptr_tcpConnWithoutReadFrom.SetNoDelay": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetNoDelay(_ptr_net_tcpConnWithoutReadFrom, bool)",
    "net.tcpConnWithoutReadFrom.SetReadBuffer": "error_0 __golang net_tcpConnWithoutReadFrom_SetReadBuffer(net_tcpConnWithoutReadFrom_0, int_0)",
    "net._ptr_tcpConnWithoutReadFrom.SetReadBuffer": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetReadBuffer(_ptr_net_tcpConnWithoutReadFrom, int_0)",
    "net.tcpConnWithoutReadFrom.SetReadDeadline": "error_0 __golang net_tcpConnWithoutReadFrom_SetReadDeadline(net_tcpConnWithoutReadFrom_0, time_Time_0)",
    "net._ptr_tcpConnWithoutReadFrom.SetReadDeadline": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetReadDeadline(_ptr_net_tcpConnWithoutReadFrom, time_Time_0)",
    "net.tcpConnWithoutReadFrom.SetWriteBuffer": "error_0 __golang net_tcpConnWithoutReadFrom_SetWriteBuffer(net_tcpConnWithoutReadFrom_0, int_0)",
    "net._ptr_tcpConnWithoutReadFrom.SetWriteBuffer": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetWriteBuffer(_ptr_net_tcpConnWithoutReadFrom, int_0)",
    "net.tcpConnWithoutReadFrom.SetWriteDeadline": "error_0 __golang net_tcpConnWithoutReadFrom_SetWriteDeadline(net_tcpConnWithoutReadFrom_0, time_Time_0)",
    "net._ptr_tcpConnWithoutReadFrom.SetWriteDeadline": "error_0 __golang net__ptr_tcpConnWithoutReadFrom_SetWriteDeadline(_ptr_net_tcpConnWithoutReadFrom, time_Time_0)",
    "net.tcpConnWithoutWriteTo.Close": "error_0 __golang net_tcpConnWithoutWriteTo_Close(net_tcpConnWithoutWriteTo_0)",
    "net._ptr_tcpConnWithoutWriteTo.Close": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_Close(_ptr_net_tcpConnWithoutWriteTo)",
    "net.tcpConnWithoutWriteTo.CloseRead": "error_0 __golang net_tcpConnWithoutWriteTo_CloseRead(net_tcpConnWithoutWriteTo_0)",
    "net._ptr_tcpConnWithoutWriteTo.CloseRead": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_CloseRead(_ptr_net_tcpConnWithoutWriteTo)",
    "net.tcpConnWithoutWriteTo.CloseWrite": "error_0 __golang net_tcpConnWithoutWriteTo_CloseWrite(net_tcpConnWithoutWriteTo_0)",
    "net._ptr_tcpConnWithoutWriteTo.CloseWrite": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_CloseWrite(_ptr_net_tcpConnWithoutWriteTo)",
    "net.tcpConnWithoutWriteTo.LocalAddr": "net_Addr_0 __golang net_tcpConnWithoutWriteTo_LocalAddr(net_tcpConnWithoutWriteTo_0)",
    "net._ptr_tcpConnWithoutWriteTo.LocalAddr": "net_Addr_0 __golang net__ptr_tcpConnWithoutWriteTo_LocalAddr(_ptr_net_tcpConnWithoutWriteTo)",
    "net.tcpConnWithoutWriteTo.RemoteAddr": "net_Addr_0 __golang net_tcpConnWithoutWriteTo_RemoteAddr(net_tcpConnWithoutWriteTo_0)",
    "net._ptr_tcpConnWithoutWriteTo.RemoteAddr": "net_Addr_0 __golang net__ptr_tcpConnWithoutWriteTo_RemoteAddr(_ptr_net_tcpConnWithoutWriteTo)",
    "net.tcpConnWithoutWriteTo.SetDeadline": "error_0 __golang net_tcpConnWithoutWriteTo_SetDeadline(net_tcpConnWithoutWriteTo_0, time_Time_0)",
    "net._ptr_tcpConnWithoutWriteTo.SetDeadline": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetDeadline(_ptr_net_tcpConnWithoutWriteTo, time_Time_0)",
    "net.tcpConnWithoutWriteTo.SetKeepAlive": "error_0 __golang net_tcpConnWithoutWriteTo_SetKeepAlive(net_tcpConnWithoutWriteTo_0, bool)",
    "net._ptr_tcpConnWithoutWriteTo.SetKeepAlive": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetKeepAlive(_ptr_net_tcpConnWithoutWriteTo, bool)",
    "net.tcpConnWithoutWriteTo.SetKeepAlivePeriod": "error_0 __golang net_tcpConnWithoutWriteTo_SetKeepAlivePeriod(net_tcpConnWithoutWriteTo_0, time_Duration)",
    "net._ptr_tcpConnWithoutWriteTo.SetKeepAlivePeriod": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetKeepAlivePeriod(_ptr_net_tcpConnWithoutWriteTo, time_Duration)",
    "net.tcpConnWithoutWriteTo.SetLinger": "error_0 __golang net_tcpConnWithoutWriteTo_SetLinger(net_tcpConnWithoutWriteTo_0, int_0)",
    "net._ptr_tcpConnWithoutWriteTo.SetLinger": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetLinger(_ptr_net_tcpConnWithoutWriteTo, int_0)",
    "net.tcpConnWithoutWriteTo.SetNoDelay": "error_0 __golang net_tcpConnWithoutWriteTo_SetNoDelay(net_tcpConnWithoutWriteTo_0, bool)",
    "net._ptr_tcpConnWithoutWriteTo.SetNoDelay": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetNoDelay(_ptr_net_tcpConnWithoutWriteTo, bool)",
    "net.tcpConnWithoutWriteTo.SetReadBuffer": "error_0 __golang net_tcpConnWithoutWriteTo_SetReadBuffer(net_tcpConnWithoutWriteTo_0, int_0)",
    "net._ptr_tcpConnWithoutWriteTo.SetReadBuffer": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetReadBuffer(_ptr_net_tcpConnWithoutWriteTo, int_0)",
    "net.tcpConnWithoutWriteTo.SetReadDeadline": "error_0 __golang net_tcpConnWithoutWriteTo_SetReadDeadline(net_tcpConnWithoutWriteTo_0, time_Time_0)",
    "net._ptr_tcpConnWithoutWriteTo.SetReadDeadline": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetReadDeadline(_ptr_net_tcpConnWithoutWriteTo, time_Time_0)",
    "net.tcpConnWithoutWriteTo.SetWriteBuffer": "error_0 __golang net_tcpConnWithoutWriteTo_SetWriteBuffer(net_tcpConnWithoutWriteTo_0, int_0)",
    "net._ptr_tcpConnWithoutWriteTo.SetWriteBuffer": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetWriteBuffer(_ptr_net_tcpConnWithoutWriteTo, int_0)",
    "net.tcpConnWithoutWriteTo.SetWriteDeadline": "error_0 __golang net_tcpConnWithoutWriteTo_SetWriteDeadline(net_tcpConnWithoutWriteTo_0, time_Time_0)",
    "net._ptr_tcpConnWithoutWriteTo.SetWriteDeadline": "error_0 __golang net__ptr_tcpConnWithoutWriteTo_SetWriteDeadline(_ptr_net_tcpConnWithoutWriteTo, time_Time_0)",
    "net._ptr_rawListener.Control": "error_0 __golang net__ptr_rawListener_Control(_ptr_net_rawListener, PTR_funcuintptr_0)",
    "net._ptr_rawListener.Network": "poll_String __golang net__ptr_rawListener_Network(_ptr_net_rawListener)",
    "net._ptr_rawListener.PollFD": "_ptr_poll_FD __golang net__ptr_rawListener_PollFD(_ptr_net_rawListener)",
    "net.addrPortUDPAddr.Addr": "netip_Addr __golang net_addrPortUDPAddr_Addr(net_addrPortUDPAddr_0)",
    "net._ptr_addrPortUDPAddr.Addr": "netip_Addr __golang net__ptr_addrPortUDPAddr_Addr(_ptr_net_addrPortUDPAddr)",
    "net.addrPortUDPAddr.AppendTo": "_slice_uint8_0 __golang net_addrPortUDPAddr_AppendTo(net_addrPortUDPAddr_0, _slice_uint8_0)",
    "net._ptr_addrPortUDPAddr.AppendTo": "_slice_uint8_0 __golang net__ptr_addrPortUDPAddr_AppendTo(_ptr_net_addrPortUDPAddr, _slice_uint8_0)",
    "net.addrPortUDPAddr.Compare": "int_0 __golang net_addrPortUDPAddr_Compare(net_addrPortUDPAddr_0, netip_AddrPort)",
    "net._ptr_addrPortUDPAddr.Compare": "int_0 __golang net__ptr_addrPortUDPAddr_Compare(_ptr_net_addrPortUDPAddr, netip_AddrPort)",
    "net.addrPortUDPAddr.IsValid": "bool __golang net_addrPortUDPAddr_IsValid(net_addrPortUDPAddr_0)",
    "net._ptr_addrPortUDPAddr.IsValid": "bool __golang net__ptr_addrPortUDPAddr_IsValid(_ptr_net_addrPortUDPAddr)",
    "net._ptr_addrPortUDPAddr.Network": "string_0 __golang net__ptr_addrPortUDPAddr_Network(_ptr_net_addrPortUDPAddr)",
    "net.addrPortUDPAddr.Port": "uint16_0 __golang net_addrPortUDPAddr_Port(net_addrPortUDPAddr_0)",
    "net._ptr_addrPortUDPAddr.Port": "uint16_0 __golang net__ptr_addrPortUDPAddr_Port(_ptr_net_addrPortUDPAddr)",
    "net.addrPortUDPAddr.String": "string_0 __golang net_addrPortUDPAddr_String(net_addrPortUDPAddr_0)",
    "net._ptr_addrPortUDPAddr.String": "string_0 __golang net__ptr_addrPortUDPAddr_String(_ptr_net_addrPortUDPAddr)",
    "net._ptr_addrPortUDPAddr.UnmarshalBinary": "error_0 __golang net__ptr_addrPortUDPAddr_UnmarshalBinary(_ptr_net_addrPortUDPAddr, _slice_uint8_0)",
    "net._ptr_addrPortUDPAddr.UnmarshalText": "error_0 __golang net__ptr_addrPortUDPAddr_UnmarshalText(_ptr_net_addrPortUDPAddr, _slice_uint8_0)",
    "net._ptr_nsswitchConfig.init_fm": "void __golang net__ptr_nsswitchConfig_init_fm()",
    "net._ptr_ipStackCapabilities.probe_fm": "void __golang net__ptr_ipStackCapabilities_probe_fm()",
    "net._ptr_resolverConfig.init_fm": "void __golang net__ptr_resolverConfig_init_fm()",
    "net_url._ptr_Error.Unwrap": "error_0 __golang net_url__ptr_Error_Unwrap(_ptr_url_Error)",
    "net_url._ptr_Error.Error": "string_0 __golang net_url__ptr_Error_Error(_ptr_url_Error)",
    "net_url._ptr_Error.Timeout": "bool __golang net_url__ptr_Error_Timeout(_ptr_url_Error)",
    "net_url._ptr_Error.Temporary": "bool __golang net_url__ptr_Error_Temporary(_ptr_url_Error)",
    "net_url.EscapeError.Error": "string_0 __golang net_url_EscapeError_Error(url_EscapeError)",
    "net_url.InvalidHostError.Error": "string_0 __golang net_url_InvalidHostError_Error(url_InvalidHostError)",
    "net_url.shouldEscape": "bool __golang net_url_shouldEscape(uint8 c, __int64 mode)",
    "net_url.escape": "string __golang net_url_escape(string s, __int64 mode)",
    "net_url._ptr_Userinfo.Username": "string_0 __golang net_url__ptr_Userinfo_Username(_ptr_url_Userinfo)",
    "net_url._ptr_Userinfo.String": "string_0 __golang net_url__ptr_Userinfo_String(_ptr_url_Userinfo)",
    "net_url._ptr_URL.setPath": "error_0 __golang net_url__ptr_URL_setPath(_ptr_url_URL, string_0)",
    "net_url._ptr_URL.EscapedPath": "string_0 __golang net_url__ptr_URL_EscapedPath(_ptr_url_URL)",
    "net_url.validEncoded": "bool __golang net_url_validEncoded(string s, __int64 mode)",
    "net_url._ptr_URL.setFragment": "error_0 __golang net_url__ptr_URL_setFragment(_ptr_url_URL, string_0)",
    "net_url._ptr_URL.EscapedFragment": "string_0 __golang net_url__ptr_URL_EscapedFragment(_ptr_url_URL)",
    "net_url._ptr_URL.String": "string_0 __golang net_url__ptr_URL_String(_ptr_url_URL)",
    "net_url._ptr_URL.Redacted": "string_0 __golang net_url__ptr_URL_Redacted(_ptr_url_URL)",
    "net_url.Values.Get": "string_0 __golang net_url_Values_Get(url_Values, string_0)",
    "net_url.Values.Set": "void __golang net_url_Values_Set(url_Values, string_0, string_0)",
    "net_url.Values.Add": "void __golang net_url_Values_Add(url_Values, string_0, string_0)",
    "net_url.Values.Del": "void __golang net_url_Values_Del(url_Values, string_0)",
    "net_url.Values.Has": "bool __golang net_url_Values_Has(url_Values, string_0)",
    "net_url.parseQuery": "error __golang net_url_parseQuery(net_url_Values m, string query)",
    "net_url.Values.Encode": "string_0 __golang net_url_Values_Encode(url_Values)",
    "net_url.resolvePath": "string __golang net_url_resolvePath(string base, string ref)",
    "net_url._ptr_URL.IsAbs": "bool __golang net_url__ptr_URL_IsAbs(_ptr_url_URL)",
    "net_url._ptr_URL.ResolveReference": "_ptr_url_URL __golang net_url__ptr_URL_ResolveReference(_ptr_url_URL, _ptr_url_URL)",
    "net_url._ptr_URL.Query": "url_Values __golang net_url__ptr_URL_Query(_ptr_url_URL)",
    "net_url._ptr_URL.RequestURI": "string_0 __golang net_url__ptr_URL_RequestURI(_ptr_url_URL)",
    "net_url._ptr_URL.Hostname": "string_0 __golang net_url__ptr_URL_Hostname(_ptr_url_URL)",
    "net_url._ptr_URL.Port": "string_0 __golang net_url__ptr_URL_Port(_ptr_url_URL)",
    "net_url._ptr_URL.UnmarshalBinary": "error_0 __golang net_url__ptr_URL_UnmarshalBinary(_ptr_url_URL, _slice_uint8_0)",
    "net_url._ptr_URL.JoinPath": "_ptr_url_URL __golang net_url__ptr_URL_JoinPath(_ptr_url_URL, _slice_string_0)",
    "net_url._ptr_EscapeError.Error": "string_0 __golang net_url__ptr_EscapeError_Error(_ptr_url_EscapeError)",
    "net_url._ptr_InvalidHostError.Error": "string_0 __golang net_url__ptr_InvalidHostError_Error(_ptr_url_InvalidHostError)",
    "net_url._ptr_Values.Add": "void __golang net_url__ptr_Values_Add(_ptr_url_Values, string_0, string_0)",
    "net_url._ptr_Values.Del": "void __golang net_url__ptr_Values_Del(_ptr_url_Values, string_0)",
    "net_url._ptr_Values.Encode": "string_0 __golang net_url__ptr_Values_Encode(_ptr_url_Values)",
    "net_url._ptr_Values.Get": "string_0 __golang net_url__ptr_Values_Get(_ptr_url_Values, string_0)",
    "net_url._ptr_Values.Has": "bool __golang net_url__ptr_Values_Has(_ptr_url_Values, string_0)",
    "net_url._ptr_Values.Set": "void __golang net_url__ptr_Values_Set(_ptr_url_Values, string_0, string_0)",
    "crypto_x509._ptr_CertPool.len": "int_0 __golang crypto_x509__ptr_CertPool_len(_ptr_x509_CertPool)",
    "crypto_x509._ptr_CertPool.Clone": "_ptr_x509_CertPool __golang crypto_x509__ptr_CertPool_Clone(_ptr_x509_CertPool)",
    "crypto_x509._ptr_CertPool.findPotentialParents": "_slice_crypto_x509_potentialParent __golang crypto_x509__ptr_CertPool_findPotentialParents(crypto_x509_CertPool *s, crypto_x509_Certificate *cert)",
    "crypto_x509._ptr_CertPool.AddCert": "void __golang crypto_x509__ptr_CertPool_AddCert(_ptr_x509_CertPool, _ptr_x509_Certificate)",
    "crypto_x509._ptr_CertPool.AppendCertsFromPEM": "bool __golang crypto_x509__ptr_CertPool_AppendCertsFromPEM(_ptr_x509_CertPool, _slice_uint8_0)",
    "crypto_x509._ptr_CertPool.Subjects": "_slice__slice_uint8_0 __golang crypto_x509__ptr_CertPool_Subjects(_ptr_x509_CertPool)",
    "crypto_x509._ptr_CertPool.Equal": "bool __golang crypto_x509__ptr_CertPool_Equal(_ptr_x509_CertPool, _ptr_x509_CertPool)",
    "crypto_x509._ptr_CertPool.AddCertWithConstraint": "void __golang crypto_x509__ptr_CertPool_AddCertWithConstraint(_ptr_x509_CertPool, _ptr_x509_Certificate, PTR_func_slice__ptr_x509_Certificate_error)",
    "crypto_x509.OID.Equal": "bool __golang crypto_x509_OID_Equal(x509_OID, x509_OID)",
    "crypto_x509.OID.EqualASN1OID": "bool __golang crypto_x509_OID_EqualASN1OID(x509_OID, asn1_ObjectIdentifier)",
    "crypto_x509.forEachSAN": "error __golang crypto_x509_forEachSAN(vendor_golang_org_x_crypto_cryptobyte_String der, funcint_comma__slice_uint8_error callback)",
    "crypto_x509.processExtensions": "error __golang crypto_x509_processExtensions(crypto_x509_Certificate *out)",
    "crypto_x509.systemRootsPool.deferwrap1": "void __golang crypto_x509_systemRootsPool_deferwrap1()",
    "crypto_x509.initSystemRoots": "void __golang crypto_x509_initSystemRoots()",
    "crypto_x509.initSystemRoots.deferwrap1": "void __golang crypto_x509_initSystemRoots_deferwrap1()",
    "crypto_x509.isSameDirSymlink": "bool __golang crypto_x509_isSameDirSymlink(io_fs_DirEntry f, string dir)",
    "crypto_x509.CertificateInvalidError.Error": "string_0 __golang crypto_x509_CertificateInvalidError_Error(x509_CertificateInvalidError)",
    "crypto_x509.HostnameError.Error": "string_0 __golang crypto_x509_HostnameError_Error(x509_HostnameError)",
    "crypto_x509.UnknownAuthorityError.Error": "string_0 __golang crypto_x509_UnknownAuthorityError_Error(x509_UnknownAuthorityError)",
    "crypto_x509.SystemRootsError.Error": "string_0 __golang crypto_x509_SystemRootsError_Error(x509_SystemRootsError)",
    "crypto_x509.SystemRootsError.Unwrap": "error_0 __golang crypto_x509_SystemRootsError_Unwrap(x509_SystemRootsError)",
    "crypto_x509._ptr_Certificate.checkNameConstraints": "void __golang crypto_x509__ptr_Certificate_checkNameConstraints(crypto_x509_Certificate *c, int *count, funcinterface__comma_interface__bool_comma_error match, int maxConstraintComparisons, interface_ permitted, string nameType, interface_ excluded, string name, error _r0, interface_ parsedName)",
    "crypto_x509._ptr_Certificate.isValid": "error __golang crypto_x509__ptr_Certificate_isValid(crypto_x509_Certificate *c, int certType, _slice__ptr_crypto_x509_Certificate currentChain, crypto_x509_VerifyOptions *opts)",
    "crypto_x509.alreadyInChain": "bool __golang crypto_x509_alreadyInChain(crypto_x509_Certificate *candidate, _slice__ptr_crypto_x509_Certificate chain)",
    "crypto_x509._ptr_Certificate.buildChains": "void __golang crypto_x509__ptr_Certificate_buildChains(error err, _slice__slice__ptr_crypto_x509_Certificate chains, crypto_x509_Certificate *c, _slice__ptr_crypto_x509_Certificate currentChain, int *sigChecks, crypto_x509_VerifyOptions *opts)",
    "crypto_x509.validHostname": "bool __golang crypto_x509_validHostname(string host, bool isPattern)",
    "crypto_x509.matchExactly": "bool __golang crypto_x509_matchExactly(string hostA, string hostB)",
    "crypto_x509.matchHostnames": "bool __golang crypto_x509_matchHostnames(string pattern, string host)",
    "crypto_x509._ptr_Certificate.VerifyHostname": "error_0 __golang crypto_x509__ptr_Certificate_VerifyHostname(_ptr_x509_Certificate, string_0)",
    "crypto_x509.checkChainForKeyUsage": "bool __golang crypto_x509_checkChainForKeyUsage(_slice__ptr_crypto_x509_Certificate chain, _slice_crypto_x509_ExtKeyUsage keyUsages)",
    "crypto_x509.SignatureAlgorithm.String": "string_0 __golang crypto_x509_SignatureAlgorithm_String(x509_SignatureAlgorithm)",
    "crypto_x509.PublicKeyAlgorithm.String": "string_0 __golang crypto_x509_PublicKeyAlgorithm_String(x509_PublicKeyAlgorithm)",
    "crypto_x509.getSignatureAlgorithmFromAI": "__int64 __golang crypto_x509_getSignatureAlgorithmFromAI(crypto_x509_pkix_AlgorithmIdentifier ai)",
    "crypto_x509.getPublicKeyAlgorithmFromOID": "__int64 __golang crypto_x509_getPublicKeyAlgorithmFromOID(encoding_asn1_ObjectIdentifier oid)",
    "crypto_x509.namedCurveFromOID": "crypto_elliptic_Curve __golang crypto_x509_namedCurveFromOID(encoding_asn1_ObjectIdentifier oid)",
    "crypto_x509.InsecureAlgorithmError.Error": "string_0 __golang crypto_x509_InsecureAlgorithmError_Error(x509_InsecureAlgorithmError)",
    "crypto_x509.ConstraintViolationError.Error": "string_0 __golang crypto_x509_ConstraintViolationError_Error(x509_ConstraintViolationError)",
    "crypto_x509._ptr_Certificate.Equal": "bool __golang crypto_x509__ptr_Certificate_Equal(_ptr_x509_Certificate, _ptr_x509_Certificate)",
    "crypto_x509._ptr_Certificate.CheckSignatureFrom": "error_0 __golang crypto_x509__ptr_Certificate_CheckSignatureFrom(_ptr_x509_Certificate, _ptr_x509_Certificate)",
    "crypto_x509._ptr_Certificate.CheckSignature": "error_0 __golang crypto_x509__ptr_Certificate_CheckSignature(_ptr_x509_Certificate, x509_SignatureAlgorithm, _slice_uint8_0, _slice_uint8_0)",
    "crypto_x509.signaturePublicKeyAlgoMismatchError": "error __golang crypto_x509_signaturePublicKeyAlgoMismatchError(__int64 expectedPubKeyAlgo, interface_ pubKey)",
    "crypto_x509.checkSignature": "void __golang crypto_x509_checkSignature(__int64 algo, _slice_uint8 signed, bool allowSHA1, error err, _slice_uint8 signature, crypto_PublicKey publicKey)",
    "crypto_x509._ptr_Certificate.CheckCRLSignature": "error_0 __golang crypto_x509__ptr_Certificate_CheckCRLSignature(_ptr_x509_Certificate, _ptr_pkix_CertificateList)",
    "crypto_x509.UnhandledCriticalExtension.Error": "string_0 __golang crypto_x509_UnhandledCriticalExtension_Error(x509_UnhandledCriticalExtension)",
    "crypto_x509.isIA5String": "error __golang crypto_x509_isIA5String(string s)",
    "crypto_x509.signingParamsForPublicKey": "error __golang crypto_x509_signingParamsForPublicKey(unsigned __int64 hashFunc, interface_ pub, crypto_x509_pkix_AlgorithmIdentifier sigAlgo, __int64 requestedSigAlgo)",
    "crypto_x509._ptr_PublicKeyAlgorithm.String": "string_0 __golang crypto_x509__ptr_PublicKeyAlgorithm_String(_ptr_x509_PublicKeyAlgorithm)",
    "crypto_x509._ptr_SignatureAlgorithm.String": "string_0 __golang crypto_x509__ptr_SignatureAlgorithm_String(_ptr_x509_SignatureAlgorithm)",
    "crypto_x509._ptr_OID.Equal": "bool __golang crypto_x509__ptr_OID_Equal(_ptr_x509_OID, x509_OID)",
    "crypto_x509._ptr_OID.EqualASN1OID": "bool __golang crypto_x509__ptr_OID_EqualASN1OID(_ptr_x509_OID, asn1_ObjectIdentifier)",
    "crypto_x509._ptr_OID.String": "string_0 __golang crypto_x509__ptr_OID_String(_ptr_x509_OID)",
    "crypto_x509._ptr_CertificateInvalidError.Error": "string_0 __golang crypto_x509__ptr_CertificateInvalidError_Error(_ptr_x509_CertificateInvalidError)",
    "crypto_x509._ptr_HostnameError.Error": "string_0 __golang crypto_x509__ptr_HostnameError_Error(_ptr_x509_HostnameError)",
    "crypto_x509._ptr_UnknownAuthorityError.Error": "string_0 __golang crypto_x509__ptr_UnknownAuthorityError_Error(_ptr_x509_UnknownAuthorityError)",
    "crypto_x509._ptr_SystemRootsError.Error": "string_0 __golang crypto_x509__ptr_SystemRootsError_Error(_ptr_x509_SystemRootsError)",
    "crypto_x509._ptr_SystemRootsError.Unwrap": "error_0 __golang crypto_x509__ptr_SystemRootsError_Unwrap(_ptr_x509_SystemRootsError)",
    "crypto_x509._ptr_InsecureAlgorithmError.Error": "string_0 __golang crypto_x509__ptr_InsecureAlgorithmError_Error(_ptr_x509_InsecureAlgorithmError)",
    "crypto_x509._ptr_ConstraintViolationError.Error": "string_0 __golang crypto_x509__ptr_ConstraintViolationError_Error(_ptr_x509_ConstraintViolationError)",
    "crypto_x509._ptr_UnhandledCriticalExtension.Error": "string_0 __golang crypto_x509__ptr_UnhandledCriticalExtension_Error(_ptr_x509_UnhandledCriticalExtension)",
    "crypto_hmac._ptr_hmac.Sum": "_slice_uint8_0 __golang crypto_hmac__ptr_hmac_Sum(_ptr_hmac_hmac, _slice_uint8_0)",
    "crypto_hmac._ptr_hmac.Size": "int_0 __golang crypto_hmac__ptr_hmac_Size(_ptr_hmac_hmac)",
    "crypto_hmac._ptr_hmac.BlockSize": "int_0 __golang crypto_hmac__ptr_hmac_BlockSize(_ptr_hmac_hmac)",
    "crypto_hmac._ptr_hmac.Reset": "void __golang crypto_hmac__ptr_hmac_Reset(_ptr_hmac_hmac)",
    "crypto_hmac.New": "hash_Hash __golang crypto_hmac_New(func_hash_Hash h, _slice_uint8 key)",
    "crypto_rc4.KeySizeError.Error": "string_0 __golang crypto_rc4_KeySizeError_Error(rc4_KeySizeError)",
    "crypto_rc4._ptr_Cipher.Reset": "void __golang crypto_rc4__ptr_Cipher_Reset(_ptr_rc4_Cipher)",
    "crypto_rc4._ptr_Cipher.XORKeyStream": "void __golang crypto_rc4__ptr_Cipher_XORKeyStream(_ptr_rc4_Cipher, _slice_uint8_0, _slice_uint8_0)",
    "crypto_rc4._ptr_KeySizeError.Error": "string_0 __golang crypto_rc4__ptr_KeySizeError_Error(_ptr_rc4_KeySizeError)",
    "vendor_golang.org_x_sys_cpu.processOptions": "void __golang vendor_golang_org_x_sys_cpu_processOptions()",
    "vendor_golang.org_x_sys_cpu.initOptions": "void __golang vendor_golang_org_x_sys_cpu_initOptions()",
    "vendor_golang.org_x_sys_cpu.archInit": "void __golang vendor_golang_org_x_sys_cpu_archInit()",
    "vendor_golang.org_x_sys_cpu.cpuid": "void __golang vendor_golang_org_x_sys_cpu_cpuid()",
    "vendor_golang.org_x_sys_cpu.xgetbv": "void __golang vendor_golang_org_x_sys_cpu_xgetbv()",
    "vendor_golang.org_x_crypto_chacha20._ptr_Cipher.XORKeyStream": "void __golang vendor_golang_org_x_crypto_chacha20__ptr_Cipher_XORKeyStream(vendor_golang_org_x_crypto_chacha20_Cipher *s, _slice_uint8 dst, _slice_uint8 src)",
    "vendor_golang.org_x_crypto_chacha20._ptr_Cipher.xorKeyStreamBlocksGeneric": "void __golang vendor_golang_org_x_crypto_chacha20__ptr_Cipher_xorKeyStreamBlocksGeneric(vendor_golang_org_x_crypto_chacha20_Cipher *s, _slice_uint8 dst, _slice_uint8 src)",
    "vendor_golang.org_x_crypto_internal_poly1305._ptr_MAC.Verify": "bool __golang vendor_golang_org_x_crypto_internal_poly1305__ptr_MAC_Verify(vendor_golang_org_x_crypto_internal_poly1305_MAC *h, _slice_uint8 expected)",
    "vendor_golang.org_x_crypto_internal_poly1305._ptr_mac.Sum": "void __golang vendor_golang_org_x_crypto_internal_poly1305__ptr_mac_Sum(vendor_golang_org_x_crypto_internal_poly1305_mac *h, uint8 (*out)[16])",
    "vendor_golang.org_x_crypto_internal_poly1305.finalize": "void __golang vendor_golang_org_x_crypto_internal_poly1305_finalize(uint8 (*out)[16], uint64 (*h)[3], uint64 (*s)[2])",
    "vendor_golang.org_x_crypto_internal_poly1305.update": "void __golang vendor_golang_org_x_crypto_internal_poly1305_update()",
    "vendor_golang.org_x_crypto_chacha20poly1305._ptr_chacha20poly1305.NonceSize": "int_0 __golang vendor_golang_org_x_crypto_chacha20poly1305__ptr_chacha20poly1305_NonceSize(_ptr_chacha20poly1305_chacha20poly1305)",
    "vendor_golang.org_x_crypto_chacha20poly1305._ptr_chacha20poly1305.Overhead": "int_0 __golang vendor_golang_org_x_crypto_chacha20poly1305__ptr_chacha20poly1305_Overhead(_ptr_chacha20poly1305_chacha20poly1305)",
    "vendor_golang.org_x_crypto_chacha20poly1305._ptr_chacha20poly1305.Seal": "_slice_uint8_0 __golang vendor_golang_org_x_crypto_chacha20poly1305__ptr_chacha20poly1305_Seal(_ptr_chacha20poly1305_chacha20poly1305, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0)",
    "vendor_golang.org_x_crypto_chacha20poly1305.setupState": "void __golang vendor_golang_org_x_crypto_chacha20poly1305_setupState(uint32 (*state)[16], uint8 (*key)[32], _slice_uint8 nonce)",
    "vendor_golang.org_x_crypto_chacha20poly1305.writeWithPadding": "void __golang vendor_golang_org_x_crypto_chacha20poly1305_writeWithPadding(vendor_golang_org_x_crypto_internal_poly1305_MAC *p, _slice_uint8 b)",
    "vendor_golang.org_x_crypto_chacha20poly1305.writeUint64": "void __golang vendor_golang_org_x_crypto_chacha20poly1305_writeUint64(vendor_golang_org_x_crypto_internal_poly1305_MAC *p, int n)",
    "vendor_golang.org_x_crypto_chacha20poly1305._ptr_chacha20poly1305.sealGeneric": "_slice_uint8_0 __golang vendor_golang_org_x_crypto_chacha20poly1305__ptr_chacha20poly1305_sealGeneric(_ptr_chacha20poly1305_chacha20poly1305, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0)",
    "vendor_golang.org_x_crypto_chacha20poly1305.chacha20Poly1305Open": "void __golang vendor_golang_org_x_crypto_chacha20poly1305_chacha20Poly1305Open()",
    "vendor_golang.org_x_crypto_chacha20poly1305.chacha20Poly1305Seal": "void __golang vendor_golang_org_x_crypto_chacha20poly1305_chacha20Poly1305Seal()",
    "vendor_golang.org_x_crypto_hkdf.Extract": "_slice_uint8 __golang vendor_golang_org_x_crypto_hkdf_Extract(func_hash_Hash hash, _slice_uint8 secret, _slice_uint8 salt)",
    "vendor_golang.org_x_crypto_hkdf.Expand": "io_Reader __golang vendor_golang_org_x_crypto_hkdf_Expand(func_hash_Hash hash, _slice_uint8 pseudorandomKey, _slice_uint8 info)",
    "crypto_tls.AlertError.Error": "string_0 __golang crypto_tls_AlertError_Error(tls_AlertError)",
    "crypto_tls.alert.String": "string_0 __golang crypto_tls_alert_String(tls_alert)",
    "crypto_tls.alert.Error": "string_0 __golang crypto_tls_alert_Error(tls_alert)",
    "crypto_tls.verifyHandshakeSignature": "void __golang crypto_tls_verifyHandshakeSignature(uint8 sigType, crypto_PublicKey pubkey, _slice_uint8 sig, unsigned __int64 hashFunc, error _r0, _slice_uint8 signed)",
    "crypto_tls.signedMessage": "_slice_uint8 __golang crypto_tls_signedMessage(unsigned __int64 sigHash, string context, hash_Hash transcript)",
    "crypto_tls.signatureSchemesForCertificate": "_slice_crypto_tls_SignatureScheme __golang crypto_tls_signatureSchemesForCertificate(uint16 version, crypto_tls_Certificate *cert)",
    "crypto_tls.unsupportedCertificateError": "error __golang crypto_tls_unsupportedCertificateError(crypto_tls_Certificate *cert)",
    "crypto_tls._ptr_certCache.active": "crypto_tls_activeCert *__golang crypto_tls__ptr_certCache_active(crypto_tls_certCache *cc, crypto_tls_cacheEntry *e)",
    "crypto_tls.selectCipherSuite": "crypto_tls_cipherSuite *__golang crypto_tls_selectCipherSuite(_slice_uint16 ids, _slice_uint16 supportedIDs, func_ptr_crypto_tls_cipherSuite_bool ok)",
    "crypto_tls.cipherRC4": "interface_ __golang crypto_tls_cipherRC4(_slice_uint8 key, _slice_uint8 iv, bool isRead)",
    "crypto_tls.cipher3DES": "interface_ __golang crypto_tls_cipher3DES(_slice_uint8 key, _slice_uint8 iv, bool isRead)",
    "crypto_tls.cipherAES": "interface_ __golang crypto_tls_cipherAES(_slice_uint8 key, _slice_uint8 iv, bool isRead)",
    "crypto_tls.macSHA1": "hash_Hash __golang crypto_tls_macSHA1(_slice_uint8 key)",
    "crypto_tls.macSHA256": "hash_Hash __golang crypto_tls_macSHA256(_slice_uint8 key)",
    "crypto_tls._ptr_prefixNonceAEAD.NonceSize": "int_0 __golang crypto_tls__ptr_prefixNonceAEAD_NonceSize(_ptr_tls_prefixNonceAEAD)",
    "crypto_tls._ptr_prefixNonceAEAD.Overhead": "int_0 __golang crypto_tls__ptr_prefixNonceAEAD_Overhead(_ptr_tls_prefixNonceAEAD)",
    "crypto_tls._ptr_prefixNonceAEAD.explicitNonceLen": "int_0 __golang crypto_tls__ptr_prefixNonceAEAD_explicitNonceLen(_ptr_tls_prefixNonceAEAD)",
    "crypto_tls._ptr_prefixNonceAEAD.Seal": "_slice_uint8_0 __golang crypto_tls__ptr_prefixNonceAEAD_Seal(_ptr_tls_prefixNonceAEAD, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0)",
    "crypto_tls._ptr_xorNonceAEAD.NonceSize": "int_0 __golang crypto_tls__ptr_xorNonceAEAD_NonceSize(_ptr_tls_xorNonceAEAD)",
    "crypto_tls._ptr_xorNonceAEAD.Overhead": "int_0 __golang crypto_tls__ptr_xorNonceAEAD_Overhead(_ptr_tls_xorNonceAEAD)",
    "crypto_tls._ptr_xorNonceAEAD.explicitNonceLen": "int_0 __golang crypto_tls__ptr_xorNonceAEAD_explicitNonceLen(_ptr_tls_xorNonceAEAD)",
    "crypto_tls._ptr_xorNonceAEAD.Seal": "_slice_uint8_0 __golang crypto_tls__ptr_xorNonceAEAD_Seal(_ptr_tls_xorNonceAEAD, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0)",
    "crypto_tls.aeadAESGCM": "crypto_tls_aead __golang crypto_tls_aeadAESGCM(_slice_uint8 key, _slice_uint8 noncePrefix)",
    "crypto_tls.aeadAESGCMTLS13": "crypto_tls_aead __golang crypto_tls_aeadAESGCMTLS13(_slice_uint8 key, _slice_uint8 nonceMask)",
    "crypto_tls.aeadChaCha20Poly1305": "crypto_tls_aead __golang crypto_tls_aeadChaCha20Poly1305(_slice_uint8 key, _slice_uint8 nonceMask)",
    "crypto_tls._ptr_cthWrapper.Size": "int_0 __golang crypto_tls__ptr_cthWrapper_Size(_ptr_tls_cthWrapper)",
    "crypto_tls._ptr_cthWrapper.BlockSize": "int_0 __golang crypto_tls__ptr_cthWrapper_BlockSize(_ptr_tls_cthWrapper)",
    "crypto_tls._ptr_cthWrapper.Reset": "void __golang crypto_tls__ptr_cthWrapper_Reset(_ptr_tls_cthWrapper)",
    "crypto_tls._ptr_cthWrapper.Sum": "_slice_uint8_0 __golang crypto_tls__ptr_cthWrapper_Sum(_ptr_tls_cthWrapper, _slice_uint8_0)",
    "crypto_tls.tls10MAC": "void __golang crypto_tls_tls10MAC(hash_Hash h, _slice_uint8 header, _slice_uint8 out, _slice_uint8 data, _slice_uint8 extra, _slice_uint8 _r0, _slice_uint8 seq)",
    "crypto_tls.rsaKA": "crypto_tls_keyAgreement __golang crypto_tls_rsaKA(uint16 version)",
    "crypto_tls.ecdheECDSAKA": "crypto_tls_keyAgreement __golang crypto_tls_ecdheECDSAKA(uint16 version)",
    "crypto_tls.ecdheRSAKA": "crypto_tls_keyAgreement __golang crypto_tls_ecdheRSAKA(uint16 version)",
    "crypto_tls._ptr_ClientHelloInfo.Context": "context_Context_0 __golang crypto_tls__ptr_ClientHelloInfo_Context(_ptr_tls_ClientHelloInfo)",
    "crypto_tls._ptr_CertificateRequestInfo.Context": "context_Context_0 __golang crypto_tls__ptr_CertificateRequestInfo_Context(_ptr_tls_CertificateRequestInfo)",
    "crypto_tls._ptr_Config.ticketKeyFromBytes": "crypto_tls_ticketKey __golang crypto_tls__ptr_Config_ticketKeyFromBytes(crypto_tls_Config *c, uint8 b[32])",
    "crypto_tls._ptr_Config.Clone": "_ptr_tls_Config __golang crypto_tls__ptr_Config_Clone(_ptr_tls_Config)",
    "crypto_tls._ptr_Config.Clone.deferwrap1": "void __golang crypto_tls__ptr_Config_Clone_deferwrap1()",
    "crypto_tls._ptr_Config.initLegacySessionTicketKeyRLocked": "void __golang crypto_tls__ptr_Config_initLegacySessionTicketKeyRLocked(_ptr_tls_Config)",
    "crypto_tls._ptr_Config.initLegacySessionTicketKeyRLocked.deferwrap2": "void __golang crypto_tls__ptr_Config_initLegacySessionTicketKeyRLocked_deferwrap2()",
    "crypto_tls._ptr_Config.initLegacySessionTicketKeyRLocked.deferwrap1": "void __golang crypto_tls__ptr_Config_initLegacySessionTicketKeyRLocked_deferwrap1()",
    "crypto_tls._ptr_Config.ticketKeys.deferwrap3": "void __golang crypto_tls__ptr_Config_ticketKeys_deferwrap3()",
    "crypto_tls._ptr_Config.ticketKeys.deferwrap2": "void __golang crypto_tls__ptr_Config_ticketKeys_deferwrap2()",
    "crypto_tls._ptr_Config.ticketKeys.deferwrap1": "void __golang crypto_tls__ptr_Config_ticketKeys_deferwrap1()",
    "crypto_tls._ptr_Config.SetSessionTicketKeys": "void __golang crypto_tls__ptr_Config_SetSessionTicketKeys(_ptr_tls_Config, _slice__32_uint8_0)",
    "crypto_tls._ptr_Config.cipherSuites": "_slice_uint16 __golang crypto_tls__ptr_Config_cipherSuites(crypto_tls_Config *c)",
    "crypto_tls._ptr_Config.supportedVersions": "_slice_uint16 __golang crypto_tls__ptr_Config_supportedVersions(crypto_tls_Config *c, bool isClient)",
    "crypto_tls._ptr_ClientHelloInfo.SupportsCertificate": "error_0 __golang crypto_tls__ptr_ClientHelloInfo_SupportsCertificate(_ptr_tls_ClientHelloInfo, _ptr_tls_Certificate)",
    "crypto_tls._ptr_CertificateRequestInfo.SupportsCertificate": "error_0 __golang crypto_tls__ptr_CertificateRequestInfo_SupportsCertificate(_ptr_tls_CertificateRequestInfo, _ptr_tls_Certificate)",
    "crypto_tls._ptr_Config.BuildNameToCertificate": "void __golang crypto_tls__ptr_Config_BuildNameToCertificate(_ptr_tls_Config)",
    "crypto_tls._ptr_Config.writeKeyLog": "error __golang crypto_tls__ptr_Config_writeKeyLog(crypto_tls_Config *c, string label, _slice_uint8 clientRandom, _slice_uint8 secret)",
    "crypto_tls._ptr_CertificateVerificationError.Error": "string_0 __golang crypto_tls__ptr_CertificateVerificationError_Error(_ptr_tls_CertificateVerificationError)",
    "crypto_tls._ptr_CertificateVerificationError.Unwrap": "error_0 __golang crypto_tls__ptr_CertificateVerificationError_Unwrap(_ptr_tls_CertificateVerificationError)",
    "crypto_tls.SignatureScheme.String": "string_0 __golang crypto_tls_SignatureScheme_String(tls_SignatureScheme)",
    "crypto_tls.CurveID.String": "string_0 __golang crypto_tls_CurveID_String(tls_CurveID)",
    "crypto_tls.ClientAuthType.String": "string_0 __golang crypto_tls_ClientAuthType_String(tls_ClientAuthType)",
    "crypto_tls._ptr_Conn.LocalAddr": "net_Addr_0 __golang crypto_tls__ptr_Conn_LocalAddr(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.RemoteAddr": "net_Addr_0 __golang crypto_tls__ptr_Conn_RemoteAddr(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.SetDeadline": "error_0 __golang crypto_tls__ptr_Conn_SetDeadline(_ptr_tls_Conn, time_Time_0)",
    "crypto_tls._ptr_Conn.SetReadDeadline": "error_0 __golang crypto_tls__ptr_Conn_SetReadDeadline(_ptr_tls_Conn, time_Time_0)",
    "crypto_tls._ptr_Conn.SetWriteDeadline": "error_0 __golang crypto_tls__ptr_Conn_SetWriteDeadline(_ptr_tls_Conn, time_Time_0)",
    "crypto_tls._ptr_Conn.NetConn": "net_Conn_0 __golang crypto_tls__ptr_Conn_NetConn(_ptr_tls_Conn)",
    "crypto_tls._ptr_permanentError.Error": "string_0 __golang crypto_tls__ptr_permanentError_Error(_ptr_tls_permanentError)",
    "crypto_tls._ptr_permanentError.Unwrap": "error_0 __golang crypto_tls__ptr_permanentError_Unwrap(_ptr_tls_permanentError)",
    "crypto_tls._ptr_permanentError.Timeout": "bool __golang crypto_tls__ptr_permanentError_Timeout(_ptr_tls_permanentError)",
    "crypto_tls._ptr_permanentError.Temporary": "bool __golang crypto_tls__ptr_permanentError_Temporary(_ptr_tls_permanentError)",
    "crypto_tls._ptr_halfConn.setTrafficSecret": "void __golang crypto_tls__ptr_halfConn_setTrafficSecret(crypto_tls_halfConn *hc, crypto_tls_cipherSuiteTLS13 *suite, __int64 level, _slice_uint8 secret)",
    "crypto_tls._ptr_halfConn.explicitNonceLen": "int_0 __golang crypto_tls__ptr_halfConn_explicitNonceLen(_ptr_tls_halfConn)",
    "crypto_tls.RecordHeaderError.Error": "string_0 __golang crypto_tls_RecordHeaderError_Error(tls_RecordHeaderError)",
    "crypto_tls._ptr_Conn.readRecordOrCCS": "error_0 __golang crypto_tls__ptr_Conn_readRecordOrCCS(_ptr_tls_Conn, bool)",
    "crypto_tls._ptr_Conn.retryReadRecord": "error_0 __golang crypto_tls__ptr_Conn_retryReadRecord(_ptr_tls_Conn, bool)",
    "crypto_tls._ptr_Conn.readFromUntil": "error __golang crypto_tls__ptr_Conn_readFromUntil(crypto_tls_Conn *c, io_Reader r, int n)",
    "crypto_tls._ptr_Conn.sendAlertLocked": "error __golang crypto_tls__ptr_Conn_sendAlertLocked(crypto_tls_Conn *c, unsigned __int8 err)",
    "crypto_tls._ptr_Conn.sendAlert.deferwrap1": "void __golang crypto_tls__ptr_Conn_sendAlert_deferwrap1()",
    "crypto_tls._ptr_Conn.maxPayloadSizeForWrite": "int __golang crypto_tls__ptr_Conn_maxPayloadSizeForWrite(crypto_tls_Conn *c, unsigned __int8 typ)",
    "crypto_tls._ptr_Conn.writeHandshakeRecord.deferwrap1": "void __golang crypto_tls__ptr_Conn_writeHandshakeRecord_deferwrap1()",
    "crypto_tls._ptr_Conn.writeChangeCipherRecord": "error_0 __golang crypto_tls__ptr_Conn_writeChangeCipherRecord(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.writeChangeCipherRecord.deferwrap1": "void __golang crypto_tls__ptr_Conn_writeChangeCipherRecord_deferwrap1()",
    "crypto_tls._ptr_Conn.readHandshakeBytes": "error_0 __golang crypto_tls__ptr_Conn_readHandshakeBytes(_ptr_tls_Conn, int_0)",
    "crypto_tls._ptr_Conn.Write.deferwrap2": "void __golang crypto_tls__ptr_Conn_Write_deferwrap2()",
    "crypto_tls._ptr_Conn.Write.deferwrap1": "void __golang crypto_tls__ptr_Conn_Write_deferwrap1()",
    "crypto_tls._ptr_Conn.handleRenegotiation": "error_0 __golang crypto_tls__ptr_Conn_handleRenegotiation(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.handleRenegotiation.deferwrap1": "void __golang crypto_tls__ptr_Conn_handleRenegotiation_deferwrap1()",
    "crypto_tls._ptr_Conn.handlePostHandshakeMessage": "error_0 __golang crypto_tls__ptr_Conn_handlePostHandshakeMessage(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.handleKeyUpdate.deferwrap1": "void __golang crypto_tls__ptr_Conn_handleKeyUpdate_deferwrap1()",
    "crypto_tls._ptr_Conn.Read.deferwrap1": "void __golang crypto_tls__ptr_Conn_Read_deferwrap1()",
    "crypto_tls._ptr_Conn.Close": "error_0 __golang crypto_tls__ptr_Conn_Close(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.CloseWrite": "error_0 __golang crypto_tls__ptr_Conn_CloseWrite(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.closeNotify": "error_0 __golang crypto_tls__ptr_Conn_closeNotify(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.closeNotify.deferwrap1": "void __golang crypto_tls__ptr_Conn_closeNotify_deferwrap1()",
    "crypto_tls._ptr_Conn.Handshake": "error_0 __golang crypto_tls__ptr_Conn_Handshake(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.HandshakeContext": "error_0 __golang crypto_tls__ptr_Conn_HandshakeContext(_ptr_tls_Conn, context_Context_0)",
    "crypto_tls._ptr_Conn.handshakeContext": "error_0 __golang crypto_tls__ptr_Conn_handshakeContext(_ptr_tls_Conn, context_Context_0)",
    "crypto_tls._ptr_Conn.handshakeContext.deferwrap2": "void __golang crypto_tls__ptr_Conn_handshakeContext_deferwrap2()",
    "crypto_tls._ptr_Conn.handshakeContext.deferwrap1": "void __golang crypto_tls__ptr_Conn_handshakeContext_deferwrap1()",
    "crypto_tls._ptr_Conn.ConnectionState": "tls_ConnectionState __golang crypto_tls__ptr_Conn_ConnectionState(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.ConnectionState.deferwrap1": "void __golang crypto_tls__ptr_Conn_ConnectionState_deferwrap1()",
    "crypto_tls._ptr_Conn.connectionStateLocked": "tls_ConnectionState __golang crypto_tls__ptr_Conn_connectionStateLocked(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.OCSPResponse": "_slice_uint8_0 __golang crypto_tls__ptr_Conn_OCSPResponse(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.OCSPResponse.deferwrap1": "void __golang crypto_tls__ptr_Conn_OCSPResponse_deferwrap1()",
    "crypto_tls._ptr_Conn.VerifyHostname": "error_0 __golang crypto_tls__ptr_Conn_VerifyHostname(_ptr_tls_Conn, string_0)",
    "crypto_tls._ptr_Conn.VerifyHostname.deferwrap1": "void __golang crypto_tls__ptr_Conn_VerifyHostname_deferwrap1()",
    "crypto_tls._ptr_Conn.clientHandshake": "error_0 __golang crypto_tls__ptr_Conn_clientHandshake(_ptr_tls_Conn, context_Context_0)",
    "crypto_tls._ptr_Conn.pickTLSVersion": "error __golang crypto_tls__ptr_Conn_pickTLSVersion(crypto_tls_Conn *c, crypto_tls_serverHelloMsg *serverHello)",
    "crypto_tls._ptr_clientHandshakeState.handshake": "error_0 __golang crypto_tls__ptr_clientHandshakeState_handshake(_ptr_tls_clientHandshakeState)",
    "crypto_tls._ptr_clientHandshakeState.pickCipherSuite": "error_0 __golang crypto_tls__ptr_clientHandshakeState_pickCipherSuite(_ptr_tls_clientHandshakeState)",
    "crypto_tls._ptr_clientHandshakeState.doFullHandshake": "error_0 __golang crypto_tls__ptr_clientHandshakeState_doFullHandshake(_ptr_tls_clientHandshakeState)",
    "crypto_tls._ptr_clientHandshakeState.establishKeys": "error_0 __golang crypto_tls__ptr_clientHandshakeState_establishKeys(_ptr_tls_clientHandshakeState)",
    "crypto_tls._ptr_clientHandshakeState.readFinished": "error_0 __golang crypto_tls__ptr_clientHandshakeState_readFinished(_ptr_tls_clientHandshakeState, _slice_uint8_0)",
    "crypto_tls._ptr_clientHandshakeState.readSessionTicket": "error_0 __golang crypto_tls__ptr_clientHandshakeState_readSessionTicket(_ptr_tls_clientHandshakeState)",
    "crypto_tls._ptr_clientHandshakeState.saveSessionTicket": "error_0 __golang crypto_tls__ptr_clientHandshakeState_saveSessionTicket(_ptr_tls_clientHandshakeState)",
    "crypto_tls._ptr_clientHandshakeState.sendFinished": "error_0 __golang crypto_tls__ptr_clientHandshakeState_sendFinished(_ptr_tls_clientHandshakeState, _slice_uint8_0)",
    "crypto_tls._ptr_Conn.verifyServerCertificate": "error __golang crypto_tls__ptr_Conn_verifyServerCertificate(crypto_tls_Conn *c, _slice__slice_uint8 certificates)",
    "crypto_tls.certificateRequestInfoFromMsg": "crypto_tls_CertificateRequestInfo *__golang crypto_tls_certificateRequestInfoFromMsg(context_Context ctx, uint16 vers, crypto_tls_certificateRequestMsg *certReq)",
    "crypto_tls._ptr_Conn.clientSessionCacheKey": "string_0 __golang crypto_tls__ptr_Conn_clientSessionCacheKey(_ptr_tls_Conn)",
    "crypto_tls.hostnameInSNI": "string __golang crypto_tls_hostnameInSNI(string name)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.handshake": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_handshake(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.checkServerHelloOrHRR": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_checkServerHelloOrHRR(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.processHelloRetryRequest": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_processHelloRetryRequest(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.processServerHello": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_processServerHello(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.establishHandshakeKeys": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_establishHandshakeKeys(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.readServerParameters": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_readServerParameters(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.readServerCertificate": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_readServerCertificate(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.readServerFinished": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_readServerFinished(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.sendClientCertificate": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_sendClientCertificate(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_clientHandshakeStateTLS13.sendClientFinished": "error __golang crypto_tls__ptr_clientHandshakeStateTLS13_sendClientFinished(crypto_tls_clientHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_Conn.handleNewSessionTicket": "error __golang crypto_tls__ptr_Conn_handleNewSessionTicket(crypto_tls_Conn *c, crypto_tls_newSessionTicketMsgTLS13 *msg)",
    "crypto_tls.marshalingFunction.Marshal": "error __golang crypto_tls_marshalingFunction_Marshal(crypto_tls_marshalingFunction f, vendor_golang_org_x_crypto_cryptobyte_Builder *b)",
    "crypto_tls.addBytesWithLength": "void __golang crypto_tls_addBytesWithLength(vendor_golang_org_x_crypto_cryptobyte_Builder *b, _slice_uint8 v, int n)",
    "crypto_tls.addUint64": "void __golang crypto_tls_addUint64(vendor_golang_org_x_crypto_cryptobyte_Builder *b, uint64 v)",
    "crypto_tls.readUint64": "bool __golang crypto_tls_readUint64(vendor_golang_org_x_crypto_cryptobyte_String *s, uint64 *out)",
    "crypto_tls._ptr_clientHelloMsg.updateBinders": "error __golang crypto_tls__ptr_clientHelloMsg_updateBinders(crypto_tls_clientHelloMsg *m, _slice__slice_uint8 pskBinders)",
    "crypto_tls._ptr_clientHelloMsg.unmarshal": "bool __golang crypto_tls__ptr_clientHelloMsg_unmarshal(_ptr_tls_clientHelloMsg, _slice_uint8_0)",
    "crypto_tls._ptr_serverHelloMsg.unmarshal": "bool __golang crypto_tls__ptr_serverHelloMsg_unmarshal(_ptr_tls_serverHelloMsg, _slice_uint8_0)",
    "crypto_tls._ptr_encryptedExtensionsMsg.unmarshal": "bool __golang crypto_tls__ptr_encryptedExtensionsMsg_unmarshal(_ptr_tls_encryptedExtensionsMsg, _slice_uint8_0)",
    "crypto_tls._ptr_endOfEarlyDataMsg.unmarshal": "bool __golang crypto_tls__ptr_endOfEarlyDataMsg_unmarshal(_ptr_tls_endOfEarlyDataMsg, _slice_uint8_0)",
    "crypto_tls._ptr_keyUpdateMsg.unmarshal": "bool __golang crypto_tls__ptr_keyUpdateMsg_unmarshal(_ptr_tls_keyUpdateMsg, _slice_uint8_0)",
    "crypto_tls._ptr_newSessionTicketMsgTLS13.unmarshal": "bool __golang crypto_tls__ptr_newSessionTicketMsgTLS13_unmarshal(_ptr_tls_newSessionTicketMsgTLS13, _slice_uint8_0)",
    "crypto_tls._ptr_certificateRequestMsgTLS13.unmarshal": "bool __golang crypto_tls__ptr_certificateRequestMsgTLS13_unmarshal(_ptr_tls_certificateRequestMsgTLS13, _slice_uint8_0)",
    "crypto_tls._ptr_certificateMsg.unmarshal": "bool __golang crypto_tls__ptr_certificateMsg_unmarshal(_ptr_tls_certificateMsg, _slice_uint8_0)",
    "crypto_tls._ptr_certificateMsgTLS13.unmarshal": "bool __golang crypto_tls__ptr_certificateMsgTLS13_unmarshal(_ptr_tls_certificateMsgTLS13, _slice_uint8_0)",
    "crypto_tls.unmarshalCertificate": "bool __golang crypto_tls_unmarshalCertificate(vendor_golang_org_x_crypto_cryptobyte_String *s, crypto_tls_Certificate *certificate)",
    "crypto_tls._ptr_serverKeyExchangeMsg.unmarshal": "bool __golang crypto_tls__ptr_serverKeyExchangeMsg_unmarshal(_ptr_tls_serverKeyExchangeMsg, _slice_uint8_0)",
    "crypto_tls._ptr_certificateStatusMsg.unmarshal": "bool __golang crypto_tls__ptr_certificateStatusMsg_unmarshal(_ptr_tls_certificateStatusMsg, _slice_uint8_0)",
    "crypto_tls._ptr_serverHelloDoneMsg.unmarshal": "bool __golang crypto_tls__ptr_serverHelloDoneMsg_unmarshal(_ptr_tls_serverHelloDoneMsg, _slice_uint8_0)",
    "crypto_tls._ptr_clientKeyExchangeMsg.unmarshal": "bool __golang crypto_tls__ptr_clientKeyExchangeMsg_unmarshal(_ptr_tls_clientKeyExchangeMsg, _slice_uint8_0)",
    "crypto_tls._ptr_finishedMsg.unmarshal": "bool __golang crypto_tls__ptr_finishedMsg_unmarshal(_ptr_tls_finishedMsg, _slice_uint8_0)",
    "crypto_tls._ptr_certificateRequestMsg.unmarshal": "bool __golang crypto_tls__ptr_certificateRequestMsg_unmarshal(_ptr_tls_certificateRequestMsg, _slice_uint8_0)",
    "crypto_tls._ptr_certificateVerifyMsg.unmarshal": "bool __golang crypto_tls__ptr_certificateVerifyMsg_unmarshal(_ptr_tls_certificateVerifyMsg, _slice_uint8_0)",
    "crypto_tls._ptr_newSessionTicketMsg.unmarshal": "bool __golang crypto_tls__ptr_newSessionTicketMsg_unmarshal(_ptr_tls_newSessionTicketMsg, _slice_uint8_0)",
    "crypto_tls._ptr_helloRequestMsg.unmarshal": "bool __golang crypto_tls__ptr_helloRequestMsg_unmarshal(_ptr_tls_helloRequestMsg, _slice_uint8_0)",
    "crypto_tls.transcriptMsg": "error __golang crypto_tls_transcriptMsg(crypto_tls_handshakeMessage msg, crypto_tls_transcriptHash h)",
    "crypto_tls._ptr_Conn.serverHandshake": "error_0 __golang crypto_tls__ptr_Conn_serverHandshake(_ptr_tls_Conn, context_Context_0)",
    "crypto_tls._ptr_serverHandshakeState.handshake": "error_0 __golang crypto_tls__ptr_serverHandshakeState_handshake(_ptr_tls_serverHandshakeState)",
    "crypto_tls._ptr_serverHandshakeState.processClientHello": "error_0 __golang crypto_tls__ptr_serverHandshakeState_processClientHello(_ptr_tls_serverHandshakeState)",
    "crypto_tls.supportsECDHE": "bool __golang crypto_tls_supportsECDHE(crypto_tls_Config *c, _slice_crypto_tls_CurveID supportedCurves, _slice_uint8 supportedPoints)",
    "crypto_tls._ptr_serverHandshakeState.pickCipherSuite": "error_0 __golang crypto_tls__ptr_serverHandshakeState_pickCipherSuite(_ptr_tls_serverHandshakeState)",
    "crypto_tls._ptr_serverHandshakeState.checkForResumption": "error_0 __golang crypto_tls__ptr_serverHandshakeState_checkForResumption(_ptr_tls_serverHandshakeState)",
    "crypto_tls._ptr_serverHandshakeState.doResumeHandshake": "error_0 __golang crypto_tls__ptr_serverHandshakeState_doResumeHandshake(_ptr_tls_serverHandshakeState)",
    "crypto_tls._ptr_serverHandshakeState.doFullHandshake": "error_0 __golang crypto_tls__ptr_serverHandshakeState_doFullHandshake(_ptr_tls_serverHandshakeState)",
    "crypto_tls._ptr_serverHandshakeState.establishKeys": "error_0 __golang crypto_tls__ptr_serverHandshakeState_establishKeys(_ptr_tls_serverHandshakeState)",
    "crypto_tls._ptr_serverHandshakeState.readFinished": "error_0 __golang crypto_tls__ptr_serverHandshakeState_readFinished(_ptr_tls_serverHandshakeState, _slice_uint8_0)",
    "crypto_tls._ptr_serverHandshakeState.sendSessionTicket": "error_0 __golang crypto_tls__ptr_serverHandshakeState_sendSessionTicket(_ptr_tls_serverHandshakeState)",
    "crypto_tls._ptr_serverHandshakeState.sendFinished": "error_0 __golang crypto_tls__ptr_serverHandshakeState_sendFinished(_ptr_tls_serverHandshakeState, _slice_uint8_0)",
    "crypto_tls._ptr_Conn.processCertsFromClient": "error __golang crypto_tls__ptr_Conn_processCertsFromClient(crypto_tls_Conn *c, crypto_tls_Certificate certificate)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.handshake": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_handshake(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.processClientHello": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_processClientHello(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.checkForResumption": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_checkForResumption(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls.cloneHash": "hash_Hash __golang crypto_tls_cloneHash(hash_Hash in, unsigned __int64 h)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.pickCertificate": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_pickCertificate(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.doHelloRetryRequest": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_doHelloRetryRequest(crypto_tls_serverHandshakeStateTLS13 *hs, unsigned __int16 selectedGroup)",
    "crypto_tls.illegalClientHelloChange": "bool __golang crypto_tls_illegalClientHelloChange(crypto_tls_clientHelloMsg *ch_0, crypto_tls_clientHelloMsg *ch1)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.sendServerParameters": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_sendServerParameters(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.sendServerCertificate": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_sendServerCertificate(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.sendServerFinished": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_sendServerFinished(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.sendSessionTickets": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_sendSessionTickets(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_Conn.sendSessionTicket": "error_0 __golang crypto_tls__ptr_Conn_sendSessionTicket(_ptr_tls_Conn, bool)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.readClientCertificate": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_readClientCertificate(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls._ptr_serverHandshakeStateTLS13.readClientFinished": "error __golang crypto_tls__ptr_serverHandshakeStateTLS13_readClientFinished(crypto_tls_serverHandshakeStateTLS13 *hs)",
    "crypto_tls.rsaKeyAgreement.processServerKeyExchange": "error_0 __golang crypto_tls_rsaKeyAgreement_processServerKeyExchange(tls_rsaKeyAgreement, _ptr_tls_Config, _ptr_tls_clientHelloMsg, _ptr_tls_serverHelloMsg, _ptr_x509_Certificate, _ptr_tls_serverKeyExchangeMsg)",
    "crypto_tls.sha1Hash": "_slice_uint8 __golang crypto_tls_sha1Hash(_slice__slice_uint8 slices)",
    "crypto_tls.md5SHA1Hash": "_slice_uint8 __golang crypto_tls_md5SHA1Hash(_slice__slice_uint8 slices)",
    "crypto_tls.hashForServerKeyExchange": "_slice_uint8 __golang crypto_tls_hashForServerKeyExchange(uint8 sigType, unsigned __int64 hashFunc, uint16 version, _slice__slice_uint8 slices)",
    "crypto_tls._ptr_ecdheKeyAgreement.processServerKeyExchange": "error_0 __golang crypto_tls__ptr_ecdheKeyAgreement_processServerKeyExchange(_ptr_tls_ecdheKeyAgreement, _ptr_tls_Config, _ptr_tls_clientHelloMsg, _ptr_tls_serverHelloMsg, _ptr_x509_Certificate, _ptr_tls_serverKeyExchangeMsg)",
    "crypto_tls._ptr_cipherSuiteTLS13.expandLabel": "void __golang crypto_tls__ptr_cipherSuiteTLS13_expandLabel(crypto_tls_cipherSuiteTLS13 *c, _slice_uint8 secret, int length, _slice_uint8 _r0, string label, _slice_uint8 context)",
    "crypto_tls._ptr_cipherSuiteTLS13.deriveSecret": "_slice_uint8 __golang crypto_tls__ptr_cipherSuiteTLS13_deriveSecret(crypto_tls_cipherSuiteTLS13 *c, _slice_uint8 secret, string label, hash_Hash transcript)",
    "crypto_tls._ptr_cipherSuiteTLS13.extract": "_slice_uint8_0 __golang crypto_tls__ptr_cipherSuiteTLS13_extract(_ptr_tls_cipherSuiteTLS13, _slice_uint8_0, _slice_uint8_0)",
    "crypto_tls._ptr_cipherSuiteTLS13.nextTrafficSecret": "_slice_uint8_0 __golang crypto_tls__ptr_cipherSuiteTLS13_nextTrafficSecret(_ptr_tls_cipherSuiteTLS13, _slice_uint8_0)",
    "crypto_tls._ptr_cipherSuiteTLS13.finishedHash": "_slice_uint8 __golang crypto_tls__ptr_cipherSuiteTLS13_finishedHash(crypto_tls_cipherSuiteTLS13 *c, _slice_uint8 baseKey, hash_Hash transcript)",
    "crypto_tls._ptr_cipherSuiteTLS13.exportKeyingMaterial": "funcstring_comma__slice_uint8_comma_int__slice_uint8_comma_error __golang crypto_tls__ptr_cipherSuiteTLS13_exportKeyingMaterial(crypto_tls_cipherSuiteTLS13 *c, _slice_uint8 masterSecret, hash_Hash transcript)",
    "crypto_tls.prfForVersion": "func_slice_uint8_comma__slice_uint8_comma__slice_uint8_comma__slice_uint8 __golang crypto_tls_prfForVersion(uint16 version, crypto_tls_cipherSuite *suite)",
    "crypto_tls.masterFromPreMasterSecret": "void __golang crypto_tls_masterFromPreMasterSecret(uint16 version, crypto_tls_cipherSuite *suite, _slice_uint8 serverRandom, _slice_uint8 preMasterSecret, _slice_uint8 _r0, _slice_uint8 clientRandom)",
    "crypto_tls.extMasterFromPreMasterSecret": "_slice_uint8 __golang crypto_tls_extMasterFromPreMasterSecret(uint16 version, crypto_tls_cipherSuite *suite, _slice_uint8 preMasterSecret, _slice_uint8 transcript)",
    "crypto_tls.keysFromMasterSecret": "void __golang crypto_tls_keysFromMasterSecret(_slice_uint8 clientKey, uint16 version, crypto_tls_cipherSuite *suite, _slice_uint8 serverRandom, _slice_uint8 masterSecret, int keyLen, int ivLen, _slice_uint8 clientMAC, _slice_uint8 serverKey, _slice_uint8 serverMAC, _slice_uint8 clientIV, _slice_uint8 serverIV, _slice_uint8 clientRandom, int macLen)",
    "crypto_tls.newFinishedHash": "crypto_tls_finishedHash __golang crypto_tls_newFinishedHash(uint16 version, crypto_tls_cipherSuite *cipherSuite)",
    "crypto_tls.finishedHash.Sum": "_slice_uint8_0 __golang crypto_tls_finishedHash_Sum(tls_finishedHash)",
    "crypto_tls.finishedHash.clientSum": "_slice_uint8_0 __golang crypto_tls_finishedHash_clientSum(tls_finishedHash, _slice_uint8_0)",
    "crypto_tls.finishedHash.serverSum": "_slice_uint8_0 __golang crypto_tls_finishedHash_serverSum(tls_finishedHash, _slice_uint8_0)",
    "crypto_tls.finishedHash.hashForClientCertificate": "_slice_uint8 __golang crypto_tls_finishedHash_hashForClientCertificate(crypto_tls_finishedHash h, uint8 sigType, unsigned __int64 hashAlg)",
    "crypto_tls.QUICEncryptionLevel.String": "string_0 __golang crypto_tls_QUICEncryptionLevel_String(tls_QUICEncryptionLevel)",
    "crypto_tls._ptr_Conn.quicReadHandshakeBytes": "error_0 __golang crypto_tls__ptr_Conn_quicReadHandshakeBytes(_ptr_tls_Conn, int_0)",
    "crypto_tls._ptr_Conn.quicWaitForSignal": "error_0 __golang crypto_tls__ptr_Conn_quicWaitForSignal(_ptr_tls_Conn)",
    "crypto_tls._ptr_Conn.quicWaitForSignal.deferwrap1": "void __golang crypto_tls__ptr_Conn_quicWaitForSignal_deferwrap1()",
    "crypto_tls._ptr_Config.decryptTicket": "_slice_uint8 __golang crypto_tls__ptr_Config_decryptTicket(crypto_tls_Config *c, _slice_uint8 encrypted, _slice_crypto_tls_ticketKey ticketKeys)",
    "crypto_tls._ptr_alert.Error": "string_0 __golang crypto_tls__ptr_alert_Error(_ptr_tls_alert)",
    "crypto_tls._ptr_alert.String": "string_0 __golang crypto_tls__ptr_alert_String(_ptr_tls_alert)",
    "crypto_tls._ptr_SignatureScheme.String": "string_0 __golang crypto_tls__ptr_SignatureScheme_String(_ptr_tls_SignatureScheme)",
    "crypto_tls._ptr_CurveID.String": "string_0 __golang crypto_tls__ptr_CurveID_String(_ptr_tls_CurveID)",
    "crypto_tls._ptr_ClientAuthType.String": "string_0 __golang crypto_tls__ptr_ClientAuthType_String(_ptr_tls_ClientAuthType)",
    "crypto_tls._ptr_AlertError.Error": "string_0 __golang crypto_tls__ptr_AlertError_Error(_ptr_tls_AlertError)",
    "crypto_tls._ptr_QUICEncryptionLevel.String": "string_0 __golang crypto_tls__ptr_QUICEncryptionLevel_String(_ptr_tls_QUICEncryptionLevel)",
    "crypto_tls._ptr_halfConn.Lock": "void __golang crypto_tls__ptr_halfConn_Lock(_ptr_tls_halfConn)",
    "crypto_tls._ptr_halfConn.TryLock": "bool __golang crypto_tls__ptr_halfConn_TryLock(_ptr_tls_halfConn)",
    "crypto_tls._ptr_halfConn.Unlock": "void __golang crypto_tls__ptr_halfConn_Unlock(_ptr_tls_halfConn)",
    "crypto_tls._ptr_RecordHeaderError.Error": "string_0 __golang crypto_tls__ptr_RecordHeaderError_Error(_ptr_tls_RecordHeaderError)",
    "crypto_tls._ptr_finishedHash.Sum": "_slice_uint8_0 __golang crypto_tls__ptr_finishedHash_Sum(_ptr_tls_finishedHash)",
    "crypto_tls._ptr_rsaKeyAgreement.processServerKeyExchange": "error_0 __golang crypto_tls__ptr_rsaKeyAgreement_processServerKeyExchange(_ptr_tls_rsaKeyAgreement, _ptr_tls_Config, _ptr_tls_clientHelloMsg, _ptr_tls_serverHelloMsg, _ptr_x509_Certificate, _ptr_tls_serverKeyExchangeMsg)",
    "crypto_tls.listener.Addr": "net_Addr_0 __golang crypto_tls_listener_Addr(tls_listener)",
    "crypto_tls._ptr_listener.Addr": "net_Addr_0 __golang crypto_tls__ptr_listener_Addr(_ptr_tls_listener)",
    "crypto_tls.listener.Close": "error_0 __golang crypto_tls_listener_Close(tls_listener)",
    "crypto_tls._ptr_listener.Close": "error_0 __golang crypto_tls__ptr_listener_Close(_ptr_tls_listener)",
    "crypto_tls._ptr_Conn.clientHandshake_fm": "error __golang crypto_tls__ptr_Conn_clientHandshake_fm(context_Context ctx)",
    "crypto_tls._ptr_Conn.serverHandshake_fm": "error __golang crypto_tls__ptr_Conn_serverHandshake_fm(context_Context ctx)",
    "crypto_tls._ptr_serverHandshakeState.cipherSuiteOk_fm": "bool __golang crypto_tls__ptr_serverHandshakeState_cipherSuiteOk_fm(crypto_tls_cipherSuite *c)",
    "crypto.Hash.New_fm": "hash_Hash __golang crypto_Hash_New_fm()",
    "reflect.TypeFor_go.shape.interface__Value_database_sql_driver.Value_comma__error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__Value_database_sql_driver_Value_comma__error__()",
    "database_sql.describeNamedValue": "string __golang database_sql_describeNamedValue(database_sql_driver_NamedValue *nv)",
    "database_sql.validateNamedValueName": "error __golang database_sql_validateNamedValueName(string name)",
    "database_sql.ccChecker.CheckNamedValue": "error_0 __golang database_sql_ccChecker_CheckNamedValue(sql_ccChecker, _ptr_driver_NamedValue)",
    "database_sql.defaultCheckNamedValue": "error __golang database_sql_defaultCheckNamedValue(database_sql_driver_NamedValue *nv)",
    "database_sql.convertAssignRows": "error __golang database_sql_convertAssignRows(interface_ dest, interface_ src, database_sql_Rows *rows)",
    "database_sql.asString": "string __golang database_sql_asString(interface_ src)",
    "database_sql.ctxDriverExec": "void __golang database_sql_ctxDriverExec(context_Context ctx, _slice_database_sql_driver_NamedValue nvdargs, database_sql_driver_ExecerContext execerCtx, database_sql_driver_Execer execer, database_sql_driver_Result _r0, error _r1, string query)",
    "database_sql.ctxDriverQuery": "void __golang database_sql_ctxDriverQuery(context_Context ctx, _slice_database_sql_driver_NamedValue nvdargs, database_sql_driver_QueryerContext queryerCtx, database_sql_driver_Queryer queryer, database_sql_driver_Rows _r0, error _r1, string query)",
    "database_sql.IsolationLevel.String": "string_0 __golang database_sql_IsolationLevel_String(sql_IsolationLevel)",
    "database_sql._ptr_driverConn.removeOpenStmt": "void __golang database_sql__ptr_driverConn_removeOpenStmt(database_sql_driverConn *dc, database_sql_driverStmt *ds_0)",
    "database_sql._ptr_driverConn.removeOpenStmt.deferwrap1": "void __golang database_sql__ptr_driverConn_removeOpenStmt_deferwrap1()",
    "database_sql._ptr_driverConn.expired": "bool __golang database_sql__ptr_driverConn_expired(_ptr_sql_driverConn, time_Duration)",
    "database_sql._ptr_driverConn.resetSession": "error_0 __golang database_sql__ptr_driverConn_resetSession(_ptr_sql_driverConn, context_Context_0)",
    "database_sql._ptr_driverConn.resetSession.deferwrap1": "void __golang database_sql__ptr_driverConn_resetSession_deferwrap1()",
    "database_sql._ptr_driverConn.validateConnection": "bool __golang database_sql__ptr_driverConn_validateConnection(_ptr_sql_driverConn, bool)",
    "database_sql._ptr_driverConn.validateConnection.deferwrap1": "void __golang database_sql__ptr_driverConn_validateConnection_deferwrap1()",
    "database_sql._ptr_driverConn.closeDBLocked.deferwrap1": "void __golang database_sql__ptr_driverConn_closeDBLocked_deferwrap1()",
    "database_sql._ptr_driverConn.Close": "error_0 __golang database_sql__ptr_driverConn_Close(_ptr_sql_driverConn)",
    "database_sql._ptr_driverConn.finalClose": "error_0 __golang database_sql__ptr_driverConn_finalClose(_ptr_sql_driverConn)",
    "database_sql._ptr_driverStmt.Close": "error_0 __golang database_sql__ptr_driverStmt_Close(_ptr_sql_driverStmt)",
    "database_sql._ptr_driverStmt.Close.deferwrap1": "void __golang database_sql__ptr_driverStmt_Close_deferwrap1()",
    "database_sql._ptr_DB.addDep": "void __golang database_sql__ptr_DB_addDep(database_sql_DB *db, database_sql_finalCloser x, interface_ dep)",
    "database_sql._ptr_DB.addDep.deferwrap1": "void __golang database_sql__ptr_DB_addDep_deferwrap1()",
    "database_sql._ptr_DB.removeDep": "error __golang database_sql__ptr_DB_removeDep(database_sql_DB *db, database_sql_finalCloser x, interface_ dep)",
    "database_sql._ptr_DB.removeDepLocked": "func_error __golang database_sql__ptr_DB_removeDepLocked(database_sql_DB *db, database_sql_finalCloser x, interface_ dep)",
    "database_sql._ptr_DB.pingDC": "error __golang database_sql__ptr_DB_pingDC(database_sql_DB *db, context_Context ctx, database_sql_driverConn *dc, funcerror release)",
    "database_sql._ptr_DB.PingContext": "error_0 __golang database_sql__ptr_DB_PingContext(_ptr_sql_DB, context_Context_0)",
    "database_sql._ptr_DB.Ping": "error_0 __golang database_sql__ptr_DB_Ping(_ptr_sql_DB)",
    "database_sql._ptr_DB.Close": "error_0 __golang database_sql__ptr_DB_Close(_ptr_sql_DB)",
    "database_sql._ptr_DB.SetMaxIdleConns": "void __golang database_sql__ptr_DB_SetMaxIdleConns(_ptr_sql_DB, int_0)",
    "database_sql._ptr_DB.SetMaxOpenConns": "void __golang database_sql__ptr_DB_SetMaxOpenConns(_ptr_sql_DB, int_0)",
    "database_sql._ptr_DB.SetConnMaxLifetime": "void __golang database_sql__ptr_DB_SetConnMaxLifetime(_ptr_sql_DB, time_Duration)",
    "database_sql._ptr_DB.SetConnMaxIdleTime": "void __golang database_sql__ptr_DB_SetConnMaxIdleTime(_ptr_sql_DB, time_Duration)",
    "database_sql._ptr_DB.SetConnMaxIdleTime.deferwrap1": "void __golang database_sql__ptr_DB_SetConnMaxIdleTime_deferwrap1()",
    "database_sql._ptr_DB.startCleanerLocked": "void __golang database_sql__ptr_DB_startCleanerLocked(_ptr_sql_DB)",
    "database_sql._ptr_DB.startCleanerLocked.gowrap1": "void __golang database_sql__ptr_DB_startCleanerLocked_gowrap1()",
    "database_sql._ptr_DB.connectionCleaner": "void __golang database_sql__ptr_DB_connectionCleaner(_ptr_sql_DB, time_Duration)",
    "database_sql._ptr_DB.Stats": "sql_DBStats __golang database_sql__ptr_DB_Stats(_ptr_sql_DB)",
    "database_sql._ptr_DB.Stats.deferwrap1": "void __golang database_sql__ptr_DB_Stats_deferwrap1()",
    "database_sql._ptr_DB.noteUnusedDriverStatement": "void __golang database_sql__ptr_DB_noteUnusedDriverStatement(database_sql_DB *db, database_sql_driverConn *c, database_sql_driverStmt *ds_0)",
    "database_sql._ptr_DB.noteUnusedDriverStatement.deferwrap1": "void __golang database_sql__ptr_DB_noteUnusedDriverStatement_deferwrap1()",
    "database_sql._ptr_DB.putConn": "void __golang database_sql__ptr_DB_putConn(database_sql_DB *db, database_sql_driverConn *dc, error err, bool resetSession)",
    "database_sql._ptr_DB.putConnDBLocked": "bool __golang database_sql__ptr_DB_putConnDBLocked(database_sql_DB *db, database_sql_driverConn *dc, error err)",
    "database_sql._ptr_DB.retry": "error __golang database_sql__ptr_DB_retry(database_sql_DB *db, funcdatabase_sql_connReuseStrategy_error fn)",
    "database_sql._ptr_DB.execDC": "void __golang database_sql__ptr_DB_execDC(database_sql_Result res, error err, database_sql_DB *db, context_Context ctx, _slice_interface_ args, database_sql_driverConn *dc, funcerror release, string query)",
    "database_sql._ptr_DB.execDC.deferwrap1": "void __golang database_sql__ptr_DB_execDC_deferwrap1()",
    "database_sql._ptr_DB.queryDC": "void __golang database_sql__ptr_DB_queryDC(database_sql_DB *db, context_Context ctx, _slice_interface_ args, context_Context txctx, database_sql_Rows *_r0, database_sql_driverConn *dc, error _r1, funcerror releaseConn, string query)",
    "database_sql._ptr_DB.QueryRowContext": "_ptr_sql_Row __golang database_sql__ptr_DB_QueryRowContext(_ptr_sql_DB, context_Context_0, string_0, _slice_interface__0)",
    "database_sql._ptr_DB.QueryRow": "_ptr_sql_Row __golang database_sql__ptr_DB_QueryRow(_ptr_sql_DB, string_0, _slice_interface__0)",
    "database_sql._ptr_DB.beginDC": "database_sql_Tx *__golang database_sql__ptr_DB_beginDC(error err, database_sql_DB *db, context_Context ctx, database_sql_driverConn *dc, funcerror release, database_sql_TxOptions *opts)",
    "database_sql._ptr_DB.beginDC.gowrap1": "void __golang database_sql__ptr_DB_beginDC_gowrap1()",
    "database_sql._ptr_DB.Driver": "driver_Driver __golang database_sql__ptr_DB_Driver(_ptr_sql_DB)",
    "database_sql._ptr_Conn.PingContext": "error_0 __golang database_sql__ptr_Conn_PingContext(_ptr_sql_Conn, context_Context_0)",
    "database_sql._ptr_Conn.QueryRowContext": "_ptr_sql_Row __golang database_sql__ptr_Conn_QueryRowContext(_ptr_sql_Conn, context_Context_0, string_0, _slice_interface__0)",
    "database_sql._ptr_Conn.Raw": "error_0 __golang database_sql__ptr_Conn_Raw(_ptr_sql_Conn, PTR_funcinterface__error_0)",
    "database_sql._ptr_Conn.closemuRUnlockCondReleaseConn": "void __golang database_sql__ptr_Conn_closemuRUnlockCondReleaseConn(_ptr_sql_Conn, error_0)",
    "database_sql._ptr_Conn.txCtx": "context_Context_0 __golang database_sql__ptr_Conn_txCtx(_ptr_sql_Conn)",
    "database_sql._ptr_Conn.close": "error_0 __golang database_sql__ptr_Conn_close(_ptr_sql_Conn, error_0)",
    "database_sql._ptr_Conn.close.deferwrap1": "void __golang database_sql__ptr_Conn_close_deferwrap1()",
    "database_sql._ptr_Conn.Close": "error_0 __golang database_sql__ptr_Conn_Close(_ptr_sql_Conn)",
    "database_sql._ptr_Tx.awaitDone": "void __golang database_sql__ptr_Tx_awaitDone(_ptr_sql_Tx)",
    "database_sql._ptr_Tx.txCtx": "context_Context_0 __golang database_sql__ptr_Tx_txCtx(_ptr_sql_Tx)",
    "database_sql._ptr_Tx.closemuRUnlockRelease": "void __golang database_sql__ptr_Tx_closemuRUnlockRelease(_ptr_sql_Tx, error_0)",
    "database_sql._ptr_Tx.closePrepared": "void __golang database_sql__ptr_Tx_closePrepared(_ptr_sql_Tx)",
    "database_sql._ptr_Tx.closePrepared.deferwrap1": "void __golang database_sql__ptr_Tx_closePrepared_deferwrap1()",
    "database_sql._ptr_Tx.Commit": "error_0 __golang database_sql__ptr_Tx_Commit(_ptr_sql_Tx)",
    "database_sql._ptr_Tx.rollback": "error_0 __golang database_sql__ptr_Tx_rollback(_ptr_sql_Tx, bool)",
    "database_sql._ptr_Tx.Rollback": "error_0 __golang database_sql__ptr_Tx_Rollback(_ptr_sql_Tx)",
    "database_sql._ptr_Tx.StmtContext": "_ptr_sql_Stmt __golang database_sql__ptr_Tx_StmtContext(_ptr_sql_Tx, context_Context_0, _ptr_sql_Stmt)",
    "database_sql._ptr_Tx.StmtContext.deferwrap1": "void __golang database_sql__ptr_Tx_StmtContext_deferwrap1()",
    "database_sql._ptr_Tx.Stmt": "_ptr_sql_Stmt __golang database_sql__ptr_Tx_Stmt(_ptr_sql_Tx, _ptr_sql_Stmt)",
    "database_sql._ptr_Tx.QueryRowContext": "_ptr_sql_Row __golang database_sql__ptr_Tx_QueryRowContext(_ptr_sql_Tx, context_Context_0, string_0, _slice_interface__0)",
    "database_sql._ptr_Tx.QueryRow": "_ptr_sql_Row __golang database_sql__ptr_Tx_QueryRow(_ptr_sql_Tx, string_0, _slice_interface__0)",
    "database_sql._ptr_Stmt.ExecContext.deferwrap1": "void __golang database_sql__ptr_Stmt_ExecContext_deferwrap1()",
    "database_sql.resultFromStatement.deferwrap1": "void __golang database_sql_resultFromStatement_deferwrap1()",
    "database_sql._ptr_Stmt.removeClosedStmtLocked": "void __golang database_sql__ptr_Stmt_removeClosedStmtLocked(_ptr_sql_Stmt)",
    "database_sql._ptr_Stmt.connStmt": "void __golang database_sql__ptr_Stmt_connStmt(funcerror releaseConn, error err, database_sql_driverStmt *ds_0, database_sql_driverConn *dc, database_sql_Stmt *s, context_Context ctx, unsigned __int8 strategy)",
    "database_sql._ptr_Stmt.QueryContext.deferwrap1": "void __golang database_sql__ptr_Stmt_QueryContext_deferwrap1()",
    "database_sql.rowsiFromStatement.deferwrap1": "void __golang database_sql_rowsiFromStatement_deferwrap1()",
    "database_sql._ptr_Stmt.QueryRowContext": "_ptr_sql_Row __golang database_sql__ptr_Stmt_QueryRowContext(_ptr_sql_Stmt, context_Context_0, _slice_interface__0)",
    "database_sql._ptr_Stmt.QueryRow": "_ptr_sql_Row __golang database_sql__ptr_Stmt_QueryRow(_ptr_sql_Stmt, _slice_interface__0)",
    "database_sql._ptr_Stmt.Close": "error_0 __golang database_sql__ptr_Stmt_Close(_ptr_sql_Stmt)",
    "database_sql._ptr_Stmt.Close.deferwrap1": "void __golang database_sql__ptr_Stmt_Close_deferwrap1()",
    "database_sql._ptr_Stmt.finalClose": "error_0 __golang database_sql__ptr_Stmt_finalClose(_ptr_sql_Stmt)",
    "database_sql._ptr_Stmt.finalClose.deferwrap1": "void __golang database_sql__ptr_Stmt_finalClose_deferwrap1()",
    "database_sql._ptr_Rows.initContextClose": "void __golang database_sql__ptr_Rows_initContextClose(database_sql_Rows *rs, context_Context ctx, context_Context txctx)",
    "database_sql._ptr_Rows.initContextClose.gowrap1": "void __golang database_sql__ptr_Rows_initContextClose_gowrap1()",
    "database_sql._ptr_Rows.awaitDone": "void __golang database_sql__ptr_Rows_awaitDone(database_sql_Rows *rs, context_Context ctx, context_Context txctx, context_Context closectx)",
    "database_sql._ptr_Rows.Next": "bool __golang database_sql__ptr_Rows_Next(_ptr_sql_Rows)",
    "database_sql._ptr_Rows.nextLocked.deferwrap1": "void __golang database_sql__ptr_Rows_nextLocked_deferwrap1()",
    "database_sql._ptr_Rows.NextResultSet": "bool __golang database_sql__ptr_Rows_NextResultSet(_ptr_sql_Rows)",
    "database_sql._ptr_Rows.NextResultSet.deferwrap2": "void __golang database_sql__ptr_Rows_NextResultSet_deferwrap2()",
    "database_sql._ptr_Rows.NextResultSet.deferwrap1": "void __golang database_sql__ptr_Rows_NextResultSet_deferwrap1()",
    "database_sql._ptr_Rows.Err": "error_0 __golang database_sql__ptr_Rows_Err(_ptr_sql_Rows)",
    "database_sql._ptr_Rows.Err.deferwrap1": "void __golang database_sql__ptr_Rows_Err_deferwrap1()",
    "database_sql._ptr_Rows.Columns.deferwrap2": "void __golang database_sql__ptr_Rows_Columns_deferwrap2()",
    "database_sql._ptr_Rows.Columns.deferwrap1": "void __golang database_sql__ptr_Rows_Columns_deferwrap1()",
    "database_sql._ptr_Rows.ColumnTypes.deferwrap2": "void __golang database_sql__ptr_Rows_ColumnTypes_deferwrap2()",
    "database_sql._ptr_Rows.ColumnTypes.deferwrap1": "void __golang database_sql__ptr_Rows_ColumnTypes_deferwrap1()",
    "database_sql._ptr_ColumnType.Name": "string_0 __golang database_sql__ptr_ColumnType_Name(_ptr_sql_ColumnType)",
    "database_sql._ptr_ColumnType.ScanType": "reflect_Type_0 __golang database_sql__ptr_ColumnType_ScanType(_ptr_sql_ColumnType)",
    "database_sql._ptr_ColumnType.DatabaseTypeName": "string_0 __golang database_sql__ptr_ColumnType_DatabaseTypeName(_ptr_sql_ColumnType)",
    "database_sql.rowsColumnInfoSetupConnLocked": "_slice__ptr_database_sql_ColumnType __golang database_sql_rowsColumnInfoSetupConnLocked(database_sql_driver_Rows rowsi)",
    "database_sql._ptr_Rows.Scan": "error_0 __golang database_sql__ptr_Rows_Scan(_ptr_sql_Rows, _slice_interface__0)",
    "database_sql._ptr_Rows.closemuRUnlockIfHeldByScan": "void __golang database_sql__ptr_Rows_closemuRUnlockIfHeldByScan(_ptr_sql_Rows)",
    "database_sql._ptr_Rows.Close": "error_0 __golang database_sql__ptr_Rows_Close(_ptr_sql_Rows)",
    "database_sql._ptr_Rows.close": "error_0 __golang database_sql__ptr_Rows_close(_ptr_sql_Rows, error_0)",
    "database_sql._ptr_Rows.close.deferwrap1": "void __golang database_sql__ptr_Rows_close_deferwrap1()",
    "database_sql._ptr_Row.Scan": "error_0 __golang database_sql__ptr_Row_Scan(_ptr_sql_Row, _slice_interface__0)",
    "database_sql._ptr_Row.Scan.deferwrap1": "void __golang database_sql__ptr_Row_Scan_deferwrap1()",
    "database_sql._ptr_Row.Err": "error_0 __golang database_sql__ptr_Row_Err(_ptr_sql_Row)",
    "database_sql.driverResult.LastInsertId.deferwrap1": "void __golang database_sql_driverResult_LastInsertId_deferwrap1()",
    "database_sql.driverResult.RowsAffected.deferwrap1": "void __golang database_sql_driverResult_RowsAffected_deferwrap1()",
    "database_sql.withLock": "void __golang database_sql_withLock(sync_Locker lk, func fn)",
    "database_sql.withLock.deferwrap1": "void __golang database_sql_withLock_deferwrap1()",
    "reflect.TypeFor_go.shape.interface__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__()",
    "sync_atomic._ptr_Pointer_error_.CompareAndSwap": "bool __golang sync_atomic__ptr_Pointer_error__CompareAndSwap(_ptr_atomic_Pointer_error_, _ptr_error, _ptr_error)",
    "sync_atomic._ptr_Pointer_error_.Swap": "_ptr_error __golang sync_atomic__ptr_Pointer_error__Swap(_ptr_atomic_Pointer_error_, _ptr_error)",
    "sync_atomic._ptr_Pointer_error_.Store": "void __golang sync_atomic__ptr_Pointer_error__Store(_ptr_atomic_Pointer_error_, _ptr_error)",
    "sync_atomic._ptr_Pointer_error_.Load": "_ptr_error __golang sync_atomic__ptr_Pointer_error__Load(_ptr_atomic_Pointer_error_)",
    "database_sql._ptr_IsolationLevel.String": "string_0 __golang database_sql__ptr_IsolationLevel_String(_ptr_sql_IsolationLevel)",
    "database_sql._ptr_driverConn.Lock": "void __golang database_sql__ptr_driverConn_Lock(_ptr_sql_driverConn)",
    "database_sql._ptr_driverConn.TryLock": "bool __golang database_sql__ptr_driverConn_TryLock(_ptr_sql_driverConn)",
    "database_sql._ptr_driverConn.Unlock": "void __golang database_sql__ptr_driverConn_Unlock(_ptr_sql_driverConn)",
    "database_sql.driverStmt.Lock": "void __golang database_sql_driverStmt_Lock(sql_driverStmt)",
    "database_sql._ptr_driverStmt.Lock": "void __golang database_sql__ptr_driverStmt_Lock(_ptr_sql_driverStmt)",
    "database_sql.driverStmt.Unlock": "void __golang database_sql_driverStmt_Unlock(sql_driverStmt)",
    "database_sql._ptr_driverStmt.Unlock": "void __golang database_sql__ptr_driverStmt_Unlock(_ptr_sql_driverStmt)",
    "database_sql.driverResult.Lock": "void __golang database_sql_driverResult_Lock(sql_driverResult)",
    "database_sql._ptr_driverResult.Lock": "void __golang database_sql__ptr_driverResult_Lock(_ptr_sql_driverResult)",
    "database_sql.driverResult.Unlock": "void __golang database_sql_driverResult_Unlock(sql_driverResult)",
    "database_sql._ptr_driverResult.Unlock": "void __golang database_sql__ptr_driverResult_Unlock(_ptr_sql_driverResult)",
    "database_sql.ccChecker.CheckNamedValue_fm": "error __golang database_sql_ccChecker_CheckNamedValue_fm(database_sql_driver_NamedValue *nv)",
    "database_sql._ptr_Conn.closemuRUnlockCondReleaseConn_fm": "void __golang database_sql__ptr_Conn_closemuRUnlockCondReleaseConn_fm(error err)",
    "database_sql._ptr_driverConn.releaseConn_fm": "void __golang database_sql__ptr_driverConn_releaseConn_fm(error err)",
    "database_sql._ptr_Tx.closemuRUnlockRelease_fm": "error __golang database_sql__ptr_Tx_closemuRUnlockRelease_fm()",
    "database_sql.finalCloser.finalClose_fm": "error __golang database_sql_finalCloser_finalClose_fm()",
    "encoding_base32.Encoding.WithPadding": "_ptr_base32_Encoding __golang encoding_base32_Encoding_WithPadding(base32_Encoding, int32_0)",
    "encoding_base32._ptr_Encoding.Encode": "void __golang encoding_base32__ptr_Encoding_Encode(_ptr_base32_Encoding, _slice_uint8_0, _slice_uint8_0)",
    "encoding_base32._ptr_Encoding.EncodeToString": "string_0 __golang encoding_base32__ptr_Encoding_EncodeToString(_ptr_base32_Encoding, _slice_uint8_0)",
    "encoding_base32._ptr_encoder.Close": "error_0 __golang encoding_base32__ptr_encoder_Close(_ptr_base32_encoder)",
    "encoding_base32._ptr_Encoding.EncodedLen": "int_0 __golang encoding_base32__ptr_Encoding_EncodedLen(_ptr_base32_Encoding, int_0)",
    "encoding_base32.CorruptInputError.Error": "string_0 __golang encoding_base32_CorruptInputError_Error(base32_CorruptInputError)",
    "encoding_base32._ptr_Encoding.DecodedLen": "int_0 __golang encoding_base32__ptr_Encoding_DecodedLen(_ptr_base32_Encoding, int_0)",
    "encoding_base32._ptr_Encoding.WithPadding": "_ptr_base32_Encoding __golang encoding_base32__ptr_Encoding_WithPadding(_ptr_base32_Encoding, int32_0)",
    "encoding_base32._ptr_CorruptInputError.Error": "string_0 __golang encoding_base32__ptr_CorruptInputError_Error(_ptr_base32_CorruptInputError)",
    "encoding_csv._ptr_ParseError.Error": "string_0 __golang encoding_csv__ptr_ParseError_Error(_ptr_csv_ParseError)",
    "encoding_csv._ptr_ParseError.Unwrap": "error_0 __golang encoding_csv__ptr_ParseError_Unwrap(_ptr_csv_ParseError)",
    "encoding_csv._ptr_Writer.Write": "error __golang encoding_csv__ptr_Writer_Write(encoding_csv_Writer *w, _slice_string record)",
    "encoding_csv._ptr_Writer.WriteAll": "error __golang encoding_csv__ptr_Writer_WriteAll(encoding_csv_Writer *w, _slice__slice_string records)",
    "encoding_csv._ptr_Writer.fieldNeedsQuotes": "bool __golang encoding_csv__ptr_Writer_fieldNeedsQuotes(encoding_csv_Writer *w, string field)",
    "encoding_gob.decBoolArray": "bool __golang encoding_gob_decBoolArray(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decBoolSlice": "bool __golang encoding_gob_decBoolSlice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decComplex64Array": "bool __golang encoding_gob_decComplex64Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decComplex64Slice": "bool __golang encoding_gob_decComplex64Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decComplex128Array": "bool __golang encoding_gob_decComplex128Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decComplex128Slice": "bool __golang encoding_gob_decComplex128Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decFloat32Array": "bool __golang encoding_gob_decFloat32Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decFloat32Slice": "bool __golang encoding_gob_decFloat32Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decFloat64Array": "bool __golang encoding_gob_decFloat64Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decFloat64Slice": "bool __golang encoding_gob_decFloat64Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decIntArray": "bool __golang encoding_gob_decIntArray(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decIntSlice": "bool __golang encoding_gob_decIntSlice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decInt16Array": "bool __golang encoding_gob_decInt16Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decInt16Slice": "bool __golang encoding_gob_decInt16Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decInt32Array": "bool __golang encoding_gob_decInt32Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decInt32Slice": "bool __golang encoding_gob_decInt32Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decInt64Array": "bool __golang encoding_gob_decInt64Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decInt64Slice": "bool __golang encoding_gob_decInt64Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decInt8Array": "bool __golang encoding_gob_decInt8Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decInt8Slice": "bool __golang encoding_gob_decInt8Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decStringArray": "bool __golang encoding_gob_decStringArray(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decStringSlice": "bool __golang encoding_gob_decStringSlice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUintArray": "bool __golang encoding_gob_decUintArray(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUintSlice": "bool __golang encoding_gob_decUintSlice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUint16Array": "bool __golang encoding_gob_decUint16Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUint16Slice": "bool __golang encoding_gob_decUint16Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUint32Array": "bool __golang encoding_gob_decUint32Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUint32Slice": "bool __golang encoding_gob_decUint32Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUint64Array": "bool __golang encoding_gob_decUint64Array(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUint64Slice": "bool __golang encoding_gob_decUint64Slice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUintptrArray": "bool __golang encoding_gob_decUintptrArray(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob.decUintptrSlice": "bool __golang encoding_gob_decUintptrSlice(encoding_gob_decoderState *state, reflect_Value v, int length, error ovfl)",
    "encoding_gob._ptr_decBuffer.Drop": "void __golang encoding_gob__ptr_decBuffer_Drop(_ptr_gob_decBuffer, int_0)",
    "encoding_gob._ptr_decBuffer.Bytes": "_slice_uint8_0 __golang encoding_gob__ptr_decBuffer_Bytes(_ptr_gob_decBuffer)",
    "encoding_gob._ptr_decBuffer.Reset": "void __golang encoding_gob__ptr_decBuffer_Reset(_ptr_gob_decBuffer)",
    "encoding_gob._ptr_Decoder.freeDecoderState": "void __golang encoding_gob__ptr_Decoder_freeDecoderState(encoding_gob_Decoder *dec, encoding_gob_decoderState *d)",
    "encoding_gob._ptr_decoderState.decodeUint": "uint64_0 __golang encoding_gob__ptr_decoderState_decodeUint(_ptr_gob_decoderState)",
    "encoding_gob.ignoreUint": "void __golang encoding_gob_ignoreUint(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value v)",
    "encoding_gob.ignoreTwoUints": "void __golang encoding_gob_ignoreTwoUints(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value v)",
    "encoding_gob.decAlloc": "reflect_Value __golang encoding_gob_decAlloc(reflect_Value v)",
    "encoding_gob.decBool": "void __golang encoding_gob_decBool(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decInt8": "void __golang encoding_gob_decInt8(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decUint8": "void __golang encoding_gob_decUint8(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decInt16": "void __golang encoding_gob_decInt16(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decUint16": "void __golang encoding_gob_decUint16(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decInt32": "void __golang encoding_gob_decInt32(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decUint32": "void __golang encoding_gob_decUint32(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decInt64": "void __golang encoding_gob_decInt64(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decUint64": "void __golang encoding_gob_decUint64(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decFloat32": "void __golang encoding_gob_decFloat32(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decFloat64": "void __golang encoding_gob_decFloat64(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decComplex64": "void __golang encoding_gob_decComplex64(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decComplex128": "void __golang encoding_gob_decComplex128(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decUint8Slice": "void __golang encoding_gob_decUint8Slice(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.decString": "void __golang encoding_gob_decString(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob.ignoreUint8Array": "void __golang encoding_gob_ignoreUint8Array(encoding_gob_decInstr *i, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob._ptr_Decoder.decodeSingle": "void __golang encoding_gob__ptr_Decoder_decodeSingle(encoding_gob_Decoder *dec, encoding_gob_decEngine *engine, reflect_Value value)",
    "encoding_gob._ptr_Decoder.decodeSingle.deferwrap1": "void __golang encoding_gob__ptr_Decoder_decodeSingle_deferwrap1()",
    "encoding_gob._ptr_Decoder.decodeStruct": "void __golang encoding_gob__ptr_Decoder_decodeStruct(encoding_gob_Decoder *dec, encoding_gob_decEngine *engine, reflect_Value value)",
    "encoding_gob._ptr_Decoder.decodeStruct.deferwrap1": "void __golang encoding_gob__ptr_Decoder_decodeStruct_deferwrap1()",
    "encoding_gob._ptr_Decoder.ignoreStruct": "void __golang encoding_gob__ptr_Decoder_ignoreStruct(encoding_gob_Decoder *dec, encoding_gob_decEngine *engine)",
    "encoding_gob._ptr_Decoder.ignoreStruct.deferwrap1": "void __golang encoding_gob__ptr_Decoder_ignoreStruct_deferwrap1()",
    "encoding_gob._ptr_Decoder.ignoreSingle": "void __golang encoding_gob__ptr_Decoder_ignoreSingle(encoding_gob_Decoder *dec, encoding_gob_decEngine *engine)",
    "encoding_gob._ptr_Decoder.ignoreSingle.deferwrap1": "void __golang encoding_gob__ptr_Decoder_ignoreSingle_deferwrap1()",
    "encoding_gob.decodeIntoValue": "reflect_Value __golang encoding_gob_decodeIntoValue(encoding_gob_decoderState *state, encoding_gob_decOp op, bool isPtr, reflect_Value value, encoding_gob_decInstr *instr)",
    "encoding_gob._ptr_Decoder.ignoreArrayHelper": "void __golang encoding_gob__ptr_Decoder_ignoreArrayHelper(encoding_gob_Decoder *dec, encoding_gob_decoderState *state, encoding_gob_decOp elemOp, int length)",
    "encoding_gob._ptr_Decoder.ignoreArray": "void __golang encoding_gob__ptr_Decoder_ignoreArray(encoding_gob_Decoder *dec, encoding_gob_decoderState *state, encoding_gob_decOp elemOp, int length)",
    "encoding_gob._ptr_Decoder.ignoreMap": "void __golang encoding_gob__ptr_Decoder_ignoreMap(encoding_gob_Decoder *dec, encoding_gob_decoderState *state, encoding_gob_decOp keyOp, encoding_gob_decOp elemOp)",
    "encoding_gob._ptr_Decoder.decodeSlice": "void __golang encoding_gob__ptr_Decoder_decodeSlice(encoding_gob_Decoder *dec, encoding_gob_decoderState *state, reflect_Value value, encoding_gob_decOp elemOp, error ovfl, encoding_gob_decHelper helper)",
    "encoding_gob._ptr_Decoder.ignoreSlice": "void __golang encoding_gob__ptr_Decoder_ignoreSlice(encoding_gob_Decoder *dec, encoding_gob_decoderState *state, encoding_gob_decOp elemOp)",
    "encoding_gob._ptr_Decoder.decodeInterface": "void __golang encoding_gob__ptr_Decoder_decodeInterface(encoding_gob_Decoder *dec, reflect_Type ityp, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob._ptr_Decoder.ignoreInterface": "void __golang encoding_gob__ptr_Decoder_ignoreInterface(encoding_gob_Decoder *dec, encoding_gob_decoderState *state)",
    "encoding_gob._ptr_Decoder.decodeGobDecoder": "void __golang encoding_gob__ptr_Decoder_decodeGobDecoder(encoding_gob_Decoder *dec, encoding_gob_userTypeInfo *ut, encoding_gob_decoderState *state, reflect_Value value)",
    "encoding_gob._ptr_Decoder.ignoreGobDecoder": "void __golang encoding_gob__ptr_Decoder_ignoreGobDecoder(encoding_gob_Decoder *dec, encoding_gob_decoderState *state)",
    "encoding_gob._ptr_Decoder.decOpFor": "encoding_gob_decOp *__golang encoding_gob__ptr_Decoder_decOpFor(encoding_gob_Decoder *dec, int wireId, reflect_Type rt, string name, map_reflect_Type__ptr_encoding_gob_decOp inProgress)",
    "encoding_gob._ptr_Decoder.decIgnoreOpFor": "encoding_gob_decOp *__golang encoding_gob__ptr_Decoder_decIgnoreOpFor(encoding_gob_Decoder *dec, int wireId, map_encoding_gob_typeId__ptr_encoding_gob_decOp inProgress, int depth)",
    "encoding_gob._ptr_Decoder.gobDecodeOpFor": "encoding_gob_decOp *__golang encoding_gob__ptr_Decoder_gobDecodeOpFor(encoding_gob_Decoder *dec, encoding_gob_userTypeInfo *ut)",
    "encoding_gob._ptr_Decoder.compatibleType": "bool __golang encoding_gob__ptr_Decoder_compatibleType(encoding_gob_Decoder *dec, reflect_Type fr, int fw, map_reflect_Type_encoding_gob_typeId inProgress)",
    "encoding_gob._ptr_Decoder.typeString.deferwrap1": "void __golang encoding_gob__ptr_Decoder_typeString_deferwrap1()",
    "encoding_gob._ptr_Decoder.compileIgnoreSingle": "encoding_gob_decEngine *__golang encoding_gob__ptr_Decoder_compileIgnoreSingle(encoding_gob_Decoder *dec, int remoteId)",
    "encoding_gob._ptr_Decoder.compileDec": "void __golang encoding_gob__ptr_Decoder_compileDec(error err, encoding_gob_decEngine *engine, encoding_gob_Decoder *dec, int remoteId, encoding_gob_userTypeInfo *ut)",
    "encoding_gob._ptr_Decoder.compileDec.deferwrap1": "void __golang encoding_gob__ptr_Decoder_compileDec_deferwrap1()",
    "encoding_gob._ptr_Decoder.decodeValue": "void __golang encoding_gob__ptr_Decoder_decodeValue(encoding_gob_Decoder *dec, int wireId, reflect_Value value)",
    "encoding_gob._ptr_Decoder.decodeValue.deferwrap1": "void __golang encoding_gob__ptr_Decoder_decodeValue_deferwrap1()",
    "encoding_gob._ptr_Decoder.decodeIgnoredValue": "void __golang encoding_gob__ptr_Decoder_decodeIgnoredValue(_ptr_gob_Decoder, gob_typeId)",
    "encoding_gob.allocValue": "reflect_Value __golang encoding_gob_allocValue(reflect_Type t)",
    "encoding_gob.NewDecoder": "encoding_gob_Decoder *__golang encoding_gob_NewDecoder(io_Reader r)",
    "encoding_gob._ptr_Decoder.recvType": "void __golang encoding_gob__ptr_Decoder_recvType(_ptr_gob_Decoder, gob_typeId)",
    "encoding_gob._ptr_Decoder.recvMessage": "bool __golang encoding_gob__ptr_Decoder_recvMessage(_ptr_gob_Decoder)",
    "encoding_gob._ptr_Decoder.readMessage": "void __golang encoding_gob__ptr_Decoder_readMessage(_ptr_gob_Decoder, int_0)",
    "encoding_gob._ptr_Decoder.nextInt": "int64_0 __golang encoding_gob__ptr_Decoder_nextInt(_ptr_gob_Decoder)",
    "encoding_gob._ptr_Decoder.nextUint": "uint64_0 __golang encoding_gob__ptr_Decoder_nextUint(_ptr_gob_Decoder)",
    "encoding_gob._ptr_Decoder.decodeTypeSequence": "int __golang encoding_gob__ptr_Decoder_decodeTypeSequence(encoding_gob_Decoder *dec, bool isInterface)",
    "encoding_gob._ptr_Decoder.Decode": "error_0 __golang encoding_gob__ptr_Decoder_Decode(_ptr_gob_Decoder, interface__0)",
    "encoding_gob._ptr_Decoder.DecodeValue": "error_0 __golang encoding_gob__ptr_Decoder_DecodeValue(_ptr_gob_Decoder, reflect_Value_0)",
    "encoding_gob._ptr_Decoder.DecodeValue.deferwrap1": "void __golang encoding_gob__ptr_Decoder_DecodeValue_deferwrap1()",
    "encoding_gob.encBoolArray": "bool __golang encoding_gob_encBoolArray(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encBoolSlice": "bool __golang encoding_gob_encBoolSlice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encComplex64Array": "bool __golang encoding_gob_encComplex64Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encComplex64Slice": "bool __golang encoding_gob_encComplex64Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encComplex128Array": "bool __golang encoding_gob_encComplex128Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encComplex128Slice": "bool __golang encoding_gob_encComplex128Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encFloat32Array": "bool __golang encoding_gob_encFloat32Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encFloat32Slice": "bool __golang encoding_gob_encFloat32Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encFloat64Array": "bool __golang encoding_gob_encFloat64Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encFloat64Slice": "bool __golang encoding_gob_encFloat64Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encIntArray": "bool __golang encoding_gob_encIntArray(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encIntSlice": "bool __golang encoding_gob_encIntSlice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt16Array": "bool __golang encoding_gob_encInt16Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt16Slice": "bool __golang encoding_gob_encInt16Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt32Array": "bool __golang encoding_gob_encInt32Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt32Slice": "bool __golang encoding_gob_encInt32Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt64Array": "bool __golang encoding_gob_encInt64Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt64Slice": "bool __golang encoding_gob_encInt64Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt8Array": "bool __golang encoding_gob_encInt8Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt8Slice": "bool __golang encoding_gob_encInt8Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encStringArray": "bool __golang encoding_gob_encStringArray(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encStringSlice": "bool __golang encoding_gob_encStringSlice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUintArray": "bool __golang encoding_gob_encUintArray(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUintSlice": "bool __golang encoding_gob_encUintSlice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUint16Array": "bool __golang encoding_gob_encUint16Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUint16Slice": "bool __golang encoding_gob_encUint16Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUint32Array": "bool __golang encoding_gob_encUint32Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUint32Slice": "bool __golang encoding_gob_encUint32Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUint64Array": "bool __golang encoding_gob_encUint64Array(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUint64Slice": "bool __golang encoding_gob_encUint64Slice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUintptrArray": "bool __golang encoding_gob_encUintptrArray(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUintptrSlice": "bool __golang encoding_gob_encUintptrSlice(encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob._ptr_encBuffer.WriteString": "void __golang encoding_gob__ptr_encBuffer_WriteString(_ptr_gob_encBuffer, string_0)",
    "encoding_gob._ptr_encBuffer.Len": "int_0 __golang encoding_gob__ptr_encBuffer_Len(_ptr_gob_encBuffer)",
    "encoding_gob._ptr_encBuffer.Bytes": "_slice_uint8_0 __golang encoding_gob__ptr_encBuffer_Bytes(_ptr_gob_encBuffer)",
    "encoding_gob._ptr_encBuffer.Reset": "void __golang encoding_gob__ptr_encBuffer_Reset(_ptr_gob_encBuffer)",
    "encoding_gob._ptr_Encoder.freeEncoderState": "void __golang encoding_gob__ptr_Encoder_freeEncoderState(encoding_gob_Encoder *enc, encoding_gob_encoderState *e)",
    "encoding_gob._ptr_encoderState.encodeInt": "void __golang encoding_gob__ptr_encoderState_encodeInt(_ptr_gob_encoderState, int64_0)",
    "encoding_gob._ptr_encoderState.update": "void __golang encoding_gob__ptr_encoderState_update(encoding_gob_encoderState *state, encoding_gob_encInstr *instr)",
    "encoding_gob.encIndirect": "reflect_Value __golang encoding_gob_encIndirect(reflect_Value pv, int indir)",
    "encoding_gob.encBool": "void __golang encoding_gob_encBool(encoding_gob_encInstr *i, encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encInt": "void __golang encoding_gob_encInt(encoding_gob_encInstr *i, encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUint": "void __golang encoding_gob_encUint(encoding_gob_encInstr *i, encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encFloat": "void __golang encoding_gob_encFloat(encoding_gob_encInstr *i, encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encComplex": "void __golang encoding_gob_encComplex(encoding_gob_encInstr *i, encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encUint8Array": "void __golang encoding_gob_encUint8Array(encoding_gob_encInstr *i, encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encString": "void __golang encoding_gob_encString(encoding_gob_encInstr *i, encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.encStructTerminator": "void __golang encoding_gob_encStructTerminator(encoding_gob_encInstr *i, encoding_gob_encoderState *state, reflect_Value v)",
    "encoding_gob.valid": "bool __golang encoding_gob_valid(reflect_Value v)",
    "encoding_gob._ptr_Encoder.encodeSingle": "void __golang encoding_gob__ptr_Encoder_encodeSingle(encoding_gob_Encoder *enc, encoding_gob_encBuffer *b, encoding_gob_encEngine *engine, reflect_Value value)",
    "encoding_gob._ptr_Encoder.encodeSingle.deferwrap1": "void __golang encoding_gob__ptr_Encoder_encodeSingle_deferwrap1()",
    "encoding_gob._ptr_Encoder.encodeStruct": "void __golang encoding_gob__ptr_Encoder_encodeStruct(encoding_gob_Encoder *enc, encoding_gob_encBuffer *b, encoding_gob_encEngine *engine, reflect_Value value)",
    "encoding_gob._ptr_Encoder.encodeStruct.deferwrap1": "void __golang encoding_gob__ptr_Encoder_encodeStruct_deferwrap1()",
    "encoding_gob._ptr_Encoder.encodeArray": "void __golang encoding_gob__ptr_Encoder_encodeArray(encoding_gob_Encoder *enc, encoding_gob_encBuffer *b, reflect_Value value, encoding_gob_encOp op, int elemIndir, int length, encoding_gob_encHelper helper)",
    "encoding_gob._ptr_Encoder.encodeArray.deferwrap1": "void __golang encoding_gob__ptr_Encoder_encodeArray_deferwrap1()",
    "encoding_gob.encodeReflectValue": "void __golang encoding_gob_encodeReflectValue(encoding_gob_encoderState *state, reflect_Value v, encoding_gob_encOp op, int indir)",
    "encoding_gob._ptr_Encoder.encodeMap": "void __golang encoding_gob__ptr_Encoder_encodeMap(encoding_gob_Encoder *enc, encoding_gob_encBuffer *b, reflect_Value mv, encoding_gob_encOp keyOp, encoding_gob_encOp elemOp, int keyIndir, int elemIndir)",
    "encoding_gob._ptr_Encoder.encodeInterface": "void __golang encoding_gob__ptr_Encoder_encodeInterface(encoding_gob_Encoder *enc, encoding_gob_encBuffer *b, reflect_Value iv)",
    "encoding_gob._ptr_Encoder.encodeGobEncoder": "void __golang encoding_gob__ptr_Encoder_encodeGobEncoder(encoding_gob_Encoder *enc, encoding_gob_encBuffer *b, encoding_gob_userTypeInfo *ut, reflect_Value v)",
    "encoding_gob.compileEnc": "encoding_gob_encEngine *__golang encoding_gob_compileEnc(encoding_gob_userTypeInfo *ut, map__ptr_encoding_gob_typeInfo_bool building)",
    "encoding_gob.getEncEngine": "encoding_gob_encEngine *__golang encoding_gob_getEncEngine(encoding_gob_userTypeInfo *ut, map__ptr_encoding_gob_typeInfo_bool building)",
    "encoding_gob.buildEncEngine.deferwrap1": "void __golang encoding_gob_buildEncEngine_deferwrap1()",
    "encoding_gob._ptr_Encoder.encode": "void __golang encoding_gob__ptr_Encoder_encode(encoding_gob_Encoder *enc, encoding_gob_encBuffer *b, reflect_Value value, encoding_gob_userTypeInfo *ut)",
    "encoding_gob._ptr_Encoder.encode.deferwrap1": "void __golang encoding_gob__ptr_Encoder_encode_deferwrap1()",
    "encoding_gob._ptr_Encoder.writeMessage": "void __golang encoding_gob__ptr_Encoder_writeMessage(encoding_gob_Encoder *enc, io_Writer w, encoding_gob_encBuffer *b)",
    "encoding_gob._ptr_Encoder.sendActualType": "bool __golang encoding_gob__ptr_Encoder_sendActualType(encoding_gob_Encoder *enc, io_Writer w, encoding_gob_encoderState *state, encoding_gob_userTypeInfo *ut, reflect_Type actual)",
    "encoding_gob._ptr_Encoder.sendType": "bool __golang encoding_gob__ptr_Encoder_sendType(encoding_gob_Encoder *enc, io_Writer w, encoding_gob_encoderState *state, reflect_Type origt)",
    "encoding_gob._ptr_Encoder.Encode": "error_0 __golang encoding_gob__ptr_Encoder_Encode(_ptr_gob_Encoder, interface__0)",
    "encoding_gob._ptr_Encoder.sendTypeDescriptor": "void __golang encoding_gob__ptr_Encoder_sendTypeDescriptor(encoding_gob_Encoder *enc, io_Writer w, encoding_gob_encoderState *state, encoding_gob_userTypeInfo *ut)",
    "encoding_gob._ptr_Encoder.EncodeValue": "error_0 __golang encoding_gob__ptr_Encoder_EncodeValue(_ptr_gob_Encoder, reflect_Value_0)",
    "encoding_gob._ptr_Encoder.EncodeValue.deferwrap1": "void __golang encoding_gob__ptr_Encoder_EncodeValue_deferwrap1()",
    "encoding_gob.catchError": "void __golang encoding_gob_catchError(error *err)",
    "encoding_gob.userType": "encoding_gob_userTypeInfo *__golang encoding_gob_userType(reflect_Type rt)",
    "encoding_gob.setTypeId": "void __golang encoding_gob_setTypeId(encoding_gob_gobType typ)",
    "encoding_gob.typeId.string": "string_0 __golang encoding_gob_typeId_string(gob_typeId)",
    "encoding_gob.typeId.name": "string_0 __golang encoding_gob_typeId_name(gob_typeId)",
    "encoding_gob._ptr_CommonType.id": "gob_typeId __golang encoding_gob__ptr_CommonType_id(_ptr_gob_CommonType)",
    "encoding_gob._ptr_CommonType.setId": "void __golang encoding_gob__ptr_CommonType_setId(_ptr_gob_CommonType, gob_typeId)",
    "encoding_gob._ptr_CommonType.string": "string_0 __golang encoding_gob__ptr_CommonType_string(_ptr_gob_CommonType)",
    "encoding_gob._ptr_CommonType.safeString": "string_0 __golang encoding_gob__ptr_CommonType_safeString(_ptr_gob_CommonType, map_gob_typeId_bool)",
    "encoding_gob._ptr_CommonType.name": "string_0 __golang encoding_gob__ptr_CommonType_name(_ptr_gob_CommonType)",
    "encoding_gob._ptr_arrayType.safeString": "string_0 __golang encoding_gob__ptr_arrayType_safeString(_ptr_gob_arrayType, map_gob_typeId_bool)",
    "encoding_gob._ptr_arrayType.string": "string_0 __golang encoding_gob__ptr_arrayType_string(_ptr_gob_arrayType)",
    "encoding_gob._ptr_gobEncoderType.safeString": "string_0 __golang encoding_gob__ptr_gobEncoderType_safeString(_ptr_gob_gobEncoderType, map_gob_typeId_bool)",
    "encoding_gob._ptr_gobEncoderType.string": "string_0 __golang encoding_gob__ptr_gobEncoderType_string(_ptr_gob_gobEncoderType)",
    "encoding_gob._ptr_mapType.safeString": "string_0 __golang encoding_gob__ptr_mapType_safeString(_ptr_gob_mapType, map_gob_typeId_bool)",
    "encoding_gob._ptr_mapType.string": "string_0 __golang encoding_gob__ptr_mapType_string(_ptr_gob_mapType)",
    "encoding_gob._ptr_sliceType.safeString": "string_0 __golang encoding_gob__ptr_sliceType_safeString(_ptr_gob_sliceType, map_gob_typeId_bool)",
    "encoding_gob._ptr_sliceType.string": "string_0 __golang encoding_gob__ptr_sliceType_string(_ptr_gob_sliceType)",
    "encoding_gob._ptr_structType.safeString": "string_0 __golang encoding_gob__ptr_structType_safeString(_ptr_gob_structType, map_gob_typeId_bool)",
    "encoding_gob._ptr_structType.string": "string_0 __golang encoding_gob__ptr_structType_string(_ptr_gob_structType)",
    "encoding_gob.isExported": "bool __golang encoding_gob_isExported(string name)",
    "encoding_gob.isSent": "bool __golang encoding_gob_isSent(reflect_StructField *field)",
    "encoding_gob.checkId": "void __golang encoding_gob_checkId(int want, int got)",
    "encoding_gob.bootstrapType": "int __golang encoding_gob_bootstrapType(string name, interface_ e)",
    "encoding_gob._ptr_wireType.string": "string_0 __golang encoding_gob__ptr_wireType_string(_ptr_gob_wireType)",
    "encoding_gob.buildTypeInfo.deferwrap1": "void __golang encoding_gob_buildTypeInfo_deferwrap1()",
    "encoding_gob.mustGetTypeInfo": "encoding_gob_typeInfo *__golang encoding_gob_mustGetTypeInfo(reflect_Type rt)",
    "encoding_gob.RegisterName": "void __golang encoding_gob_RegisterName(string name, interface_ value)",
    "encoding_gob.Register": "void __golang encoding_gob_Register(interface_ value)",
    "encoding_gob.registerBasics": "void __golang encoding_gob_registerBasics()",
    "reflect.TypeFor_go.shape.struct__encoding_gob.CommonType_Key_encoding_gob.typeId_Elem_encoding_gob.typeId__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__encoding_gob_CommonType_Key_encoding_gob_typeId_Elem_encoding_gob_typeId__()",
    "reflect.TypeFor_go.shape.struct__encoding_gob.CommonType_Field__slice_encoding_gob.fieldType__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__encoding_gob_CommonType_Field__slice_encoding_gob_fieldType__()",
    "reflect.TypeFor_go.shape.struct__encoding_gob.CommonType_Elem_encoding_gob.typeId__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__encoding_gob_CommonType_Elem_encoding_gob_typeId__()",
    "reflect.TypeFor_go.shape.struct__Name_string_Id_encoding_gob.typeId__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__Name_string_Id_encoding_gob_typeId__()",
    "reflect.TypeFor_go.shape.struct__encoding_gob.CommonType_Elem_encoding_gob.typeId_Len_int__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__encoding_gob_CommonType_Elem_encoding_gob_typeId_Len_int__()",
    "sync_atomic._ptr_Pointer_encoding_gob.encEngine_.CompareAndSwap": "bool __golang sync_atomic__ptr_Pointer_encoding_gob_encEngine__CompareAndSwap(_ptr_atomic_Pointer_encoding_gob_encEngine_, _ptr_gob_encEngine, _ptr_gob_encEngine)",
    "sync_atomic._ptr_Pointer_encoding_gob.encEngine_.Swap": "_ptr_gob_encEngine __golang sync_atomic__ptr_Pointer_encoding_gob_encEngine__Swap(_ptr_atomic_Pointer_encoding_gob_encEngine_, _ptr_gob_encEngine)",
    "sync_atomic._ptr_Pointer_encoding_gob.encEngine_.Store": "void __golang sync_atomic__ptr_Pointer_encoding_gob_encEngine__Store(_ptr_atomic_Pointer_encoding_gob_encEngine_, _ptr_gob_encEngine)",
    "sync_atomic._ptr_Pointer_encoding_gob.encEngine_.Load": "_ptr_gob_encEngine __golang sync_atomic__ptr_Pointer_encoding_gob_encEngine__Load(_ptr_atomic_Pointer_encoding_gob_encEngine_)",
    "reflect.TypeFor_go.shape.struct__ArrayT__ptr_encoding_gob.arrayType_SliceT__ptr_encoding_gob.sliceType_StructT__ptr_encoding_gob.structType_MapT__ptr_encoding_gob.mapType_GobEncoderT__ptr_encoding_gob.gobEncoderType_BinaryMarshalerT__ptr_encoding_gob.gobEncoderType_TextMarshalerT__ptr_encoding_gob.gobEncoderType__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__ArrayT__ptr_encoding_gob_arrayType_SliceT__ptr_encoding_gob_sliceType_StructT__ptr_encoding_gob_structType_MapT__ptr_encoding_gob_mapType_GobEncoderT__ptr_encoding_gob_gobEncoderType_BinaryMarshalerT__ptr_encoding_gob_gobEncoderType_TextMarshalerT__ptr_encoding_gob_gobEncoderType__()",
    "reflect.TypeFor_go.shape.interface__UnmarshalText_slice_uint8_error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__UnmarshalText_slice_uint8_error__()",
    "reflect.TypeFor_go.shape.interface__MarshalText__slice_uint8_comma__error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__MarshalText__slice_uint8_comma__error__()",
    "reflect.TypeFor_go.shape.interface__UnmarshalBinary_slice_uint8_error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__UnmarshalBinary_slice_uint8_error__()",
    "reflect.TypeFor_go.shape.interface__MarshalBinary__slice_uint8_comma__error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__MarshalBinary__slice_uint8_comma__error__()",
    "reflect.TypeFor_go.shape.interface__GobDecode_slice_uint8_error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__GobDecode_slice_uint8_error__()",
    "reflect.TypeFor_go.shape.interface__GobEncode__slice_uint8_comma__error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__GobEncode__slice_uint8_comma__error__()",
    "encoding_gob.growSlice_go.shape.uintptr_": "void __golang encoding_gob_growSlice_go_shape_uintptr_(reflect_Value v, encoding_gob_growSlice_go_shape_uintptr_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.uint64_": "void __golang encoding_gob_growSlice_go_shape_uint64_(reflect_Value v, encoding_gob_growSlice_go_shape_uint64_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.uint32_": "void __golang encoding_gob_growSlice_go_shape_uint32_(reflect_Value v, encoding_gob_growSlice_go_shape_uint32_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.uint16_": "void __golang encoding_gob_growSlice_go_shape_uint16_(reflect_Value v, encoding_gob_growSlice_go_shape_uint16_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.uint_": "void __golang encoding_gob_growSlice_go_shape_uint_(reflect_Value v, encoding_gob_growSlice_go_shape_uint_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.string_": "void __golang encoding_gob_growSlice_go_shape_string_(reflect_Value v, encoding_gob_growSlice_go_shape_string_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.int8_": "void __golang encoding_gob_growSlice_go_shape_int8_(reflect_Value v, encoding_gob_growSlice_go_shape_int8_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.int64_": "void __golang encoding_gob_growSlice_go_shape_int64_(reflect_Value v, encoding_gob_growSlice_go_shape_int64_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.int32_": "void __golang encoding_gob_growSlice_go_shape_int32_(reflect_Value v, encoding_gob_growSlice_go_shape_int32_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.int16_": "void __golang encoding_gob_growSlice_go_shape_int16_(reflect_Value v, encoding_gob_growSlice_go_shape_int16_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.int_": "void __golang encoding_gob_growSlice_go_shape_int_(reflect_Value v, encoding_gob_growSlice_go_shape_int_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.float64_": "void __golang encoding_gob_growSlice_go_shape_float64_(reflect_Value v, encoding_gob_growSlice_go_shape_float64_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.float32_": "void __golang encoding_gob_growSlice_go_shape_float32_(reflect_Value v, encoding_gob_growSlice_go_shape_float32_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.complex128_": "void __golang encoding_gob_growSlice_go_shape_complex128_(reflect_Value v, encoding_gob_growSlice_go_shape_complex128_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.complex64_": "void __golang encoding_gob_growSlice_go_shape_complex64_(reflect_Value v, encoding_gob_growSlice_go_shape_complex64_::_param0 ps, int length)",
    "encoding_gob.growSlice_go.shape.bool_": "void __golang encoding_gob_growSlice_go_shape_bool_(reflect_Value v, encoding_gob_growSlice_go_shape_bool_::_param0 ps, int length)",
    "reflect.TypeFor_go.shape.struct__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__()",
    "encoding_gob._ptr_typeId.name": "string_0 __golang encoding_gob__ptr_typeId_name(_ptr_gob_typeId)",
    "encoding_gob._ptr_typeId.string": "string_0 __golang encoding_gob__ptr_typeId_string(_ptr_gob_typeId)",
    "encoding_gob._ptr_arrayType.id": "gob_typeId __golang encoding_gob__ptr_arrayType_id(_ptr_gob_arrayType)",
    "encoding_gob._ptr_arrayType.name": "string_0 __golang encoding_gob__ptr_arrayType_name(_ptr_gob_arrayType)",
    "encoding_gob._ptr_arrayType.setId": "void __golang encoding_gob__ptr_arrayType_setId(_ptr_gob_arrayType, gob_typeId)",
    "encoding_gob._ptr_sliceType.id": "gob_typeId __golang encoding_gob__ptr_sliceType_id(_ptr_gob_sliceType)",
    "encoding_gob._ptr_sliceType.name": "string_0 __golang encoding_gob__ptr_sliceType_name(_ptr_gob_sliceType)",
    "encoding_gob._ptr_sliceType.setId": "void __golang encoding_gob__ptr_sliceType_setId(_ptr_gob_sliceType, gob_typeId)",
    "encoding_gob._ptr_structType.id": "gob_typeId __golang encoding_gob__ptr_structType_id(_ptr_gob_structType)",
    "encoding_gob._ptr_structType.name": "string_0 __golang encoding_gob__ptr_structType_name(_ptr_gob_structType)",
    "encoding_gob._ptr_structType.setId": "void __golang encoding_gob__ptr_structType_setId(_ptr_gob_structType, gob_typeId)",
    "encoding_gob._ptr_mapType.id": "gob_typeId __golang encoding_gob__ptr_mapType_id(_ptr_gob_mapType)",
    "encoding_gob._ptr_mapType.name": "string_0 __golang encoding_gob__ptr_mapType_name(_ptr_gob_mapType)",
    "encoding_gob._ptr_mapType.setId": "void __golang encoding_gob__ptr_mapType_setId(_ptr_gob_mapType, gob_typeId)",
    "encoding_gob._ptr_gobEncoderType.id": "gob_typeId __golang encoding_gob__ptr_gobEncoderType_id(_ptr_gob_gobEncoderType)",
    "encoding_gob._ptr_gobEncoderType.name": "string_0 __golang encoding_gob__ptr_gobEncoderType_name(_ptr_gob_gobEncoderType)",
    "encoding_gob._ptr_gobEncoderType.setId": "void __golang encoding_gob__ptr_gobEncoderType_setId(_ptr_gob_gobEncoderType, gob_typeId)",
    "encoding_json.Unmarshal": "error __golang encoding_json_Unmarshal(_slice_uint8 data, interface_ v)",
    "encoding_json._ptr_UnmarshalTypeError.Error": "string_0 __golang encoding_json__ptr_UnmarshalTypeError_Error(_ptr_json_UnmarshalTypeError)",
    "encoding_json._ptr_InvalidUnmarshalError.Error": "string_0 __golang encoding_json__ptr_InvalidUnmarshalError_Error(_ptr_json_InvalidUnmarshalError)",
    "encoding_json._ptr_decodeState.unmarshal": "error_0 __golang encoding_json__ptr_decodeState_unmarshal(_ptr_json_decodeState, interface__0)",
    "encoding_json.Number.String": "string_0 __golang encoding_json_Number_String(json_Number)",
    "encoding_json._ptr_decodeState.addErrorContext": "error_0 __golang encoding_json__ptr_decodeState_addErrorContext(_ptr_json_decodeState, error_0)",
    "encoding_json._ptr_decodeState.skip": "void __golang encoding_json__ptr_decodeState_skip(_ptr_json_decodeState)",
    "encoding_json._ptr_decodeState.scanNext": "void __golang encoding_json__ptr_decodeState_scanNext(_ptr_json_decodeState)",
    "encoding_json._ptr_decodeState.scanWhile": "void __golang encoding_json__ptr_decodeState_scanWhile(_ptr_json_decodeState, int_0)",
    "encoding_json._ptr_decodeState.rescanLiteral": "void __golang encoding_json__ptr_decodeState_rescanLiteral(_ptr_json_decodeState)",
    "encoding_json._ptr_decodeState.value": "error_0 __golang encoding_json__ptr_decodeState_value(_ptr_json_decodeState, reflect_Value_0)",
    "encoding_json._ptr_decodeState.valueQuoted": "interface__0 __golang encoding_json__ptr_decodeState_valueQuoted(_ptr_json_decodeState)",
    "encoding_json._ptr_decodeState.array": "error_0 __golang encoding_json__ptr_decodeState_array(_ptr_json_decodeState, reflect_Value_0)",
    "encoding_json._ptr_decodeState.object": "error_0 __golang encoding_json__ptr_decodeState_object(_ptr_json_decodeState, reflect_Value_0)",
    "encoding_json._ptr_decodeState.literalStore": "error __golang encoding_json__ptr_decodeState_literalStore(encoding_json_decodeState *d, _slice_uint8 item, reflect_Value v, bool fromQuoted)",
    "encoding_json._ptr_decodeState.valueInterface": "interface__0 __golang encoding_json__ptr_decodeState_valueInterface(_ptr_json_decodeState)",
    "encoding_json._ptr_decodeState.arrayInterface": "_slice_interface_ __golang encoding_json__ptr_decodeState_arrayInterface(encoding_json_decodeState *d)",
    "encoding_json._ptr_decodeState.objectInterface": "map_string_interface_ __golang encoding_json__ptr_decodeState_objectInterface(encoding_json_decodeState *d)",
    "encoding_json._ptr_decodeState.literalInterface": "interface__0 __golang encoding_json__ptr_decodeState_literalInterface(_ptr_json_decodeState)",
    "encoding_json.getu4": "int32 __golang encoding_json_getu4(_slice_uint8 s)",
    "encoding_json.Marshal.deferwrap1": "void __golang encoding_json_Marshal_deferwrap1()",
    "encoding_json._ptr_UnsupportedTypeError.Error": "string_0 __golang encoding_json__ptr_UnsupportedTypeError_Error(_ptr_json_UnsupportedTypeError)",
    "encoding_json._ptr_UnsupportedValueError.Error": "string_0 __golang encoding_json__ptr_UnsupportedValueError_Error(_ptr_json_UnsupportedValueError)",
    "encoding_json._ptr_MarshalerError.Error": "string_0 __golang encoding_json__ptr_MarshalerError_Error(_ptr_json_MarshalerError)",
    "encoding_json._ptr_MarshalerError.Unwrap": "error_0 __golang encoding_json__ptr_MarshalerError_Unwrap(_ptr_json_MarshalerError)",
    "encoding_json.newEncodeState": "encoding_json_encodeState *__golang encoding_json_newEncodeState()",
    "encoding_json._ptr_encodeState.marshal": "void __golang encoding_json__ptr_encodeState_marshal(error err, encoding_json_encodeState *e, interface_ v, encoding_json_encOpts opts)",
    "encoding_json.isEmptyValue": "bool __golang encoding_json_isEmptyValue(reflect_Value v)",
    "encoding_json._ptr_encodeState.reflectValue": "void __golang encoding_json__ptr_encodeState_reflectValue(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.valueEncoder": "encoding_json_encoderFunc __golang encoding_json_valueEncoder(reflect_Value v)",
    "encoding_json.typeEncoder": "encoding_json_encoderFunc __golang encoding_json_typeEncoder(reflect_Type t)",
    "encoding_json.newTypeEncoder": "encoding_json_encoderFunc __golang encoding_json_newTypeEncoder(reflect_Type t, bool allowAddr)",
    "encoding_json.invalidValueEncoder": "encoding_json_encOpts __golang encoding_json_invalidValueEncoder(encoding_json_encodeState *e, reflect_Value v)",
    "encoding_json.marshalerEncoder": "void __golang encoding_json_marshalerEncoder(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.addrMarshalerEncoder": "void __golang encoding_json_addrMarshalerEncoder(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.textMarshalerEncoder": "void __golang encoding_json_textMarshalerEncoder(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.addrTextMarshalerEncoder": "void __golang encoding_json_addrTextMarshalerEncoder(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.boolEncoder": "void __golang encoding_json_boolEncoder(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.intEncoder": "void __golang encoding_json_intEncoder(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.uintEncoder": "void __golang encoding_json_uintEncoder(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.floatEncoder.encode": "void __golang encoding_json_floatEncoder_encode(__int64 bits, encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.stringEncoder": "void __golang encoding_json_stringEncoder(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.isValidNumber": "bool __golang encoding_json_isValidNumber(string s)",
    "encoding_json.unsupportedTypeEncoder": "encoding_json_encOpts __golang __noreturn encoding_json_unsupportedTypeEncoder(encoding_json_encodeState *e, reflect_Value v)",
    "encoding_json.structEncoder.encode": "void __golang encoding_json_structEncoder_encode(encoding_json_structEncoder se, encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.mapEncoder.encode": "void __golang encoding_json_mapEncoder_encode(encoding_json_mapEncoder me, encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.mapEncoder.encode.deferwrap1": "void __golang encoding_json_mapEncoder_encode_deferwrap1()",
    "encoding_json.newMapEncoder": "encoding_json_encoderFunc __golang encoding_json_newMapEncoder(reflect_Type t)",
    "encoding_json.encodeByteSlice": "encoding_json_encOpts __golang encoding_json_encodeByteSlice(encoding_json_encodeState *e, reflect_Value v)",
    "encoding_json.sliceEncoder.encode": "void __golang encoding_json_sliceEncoder_encode(encoding_json_sliceEncoder se, encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.sliceEncoder.encode.deferwrap1": "void __golang encoding_json_sliceEncoder_encode_deferwrap1()",
    "encoding_json.newSliceEncoder": "encoding_json_encoderFunc __golang encoding_json_newSliceEncoder(reflect_Type t)",
    "encoding_json.arrayEncoder.encode": "void __golang encoding_json_arrayEncoder_encode(encoding_json_arrayEncoder ae, encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.newArrayEncoder": "encoding_json_encoderFunc __golang encoding_json_newArrayEncoder(reflect_Type t)",
    "encoding_json.ptrEncoder.encode": "void __golang encoding_json_ptrEncoder_encode(encoding_json_ptrEncoder pe, encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.ptrEncoder.encode.deferwrap1": "void __golang encoding_json_ptrEncoder_encode_deferwrap1()",
    "encoding_json.newPtrEncoder": "encoding_json_encoderFunc __golang encoding_json_newPtrEncoder(reflect_Type t)",
    "encoding_json.condAddrEncoder.encode": "void __golang encoding_json_condAddrEncoder_encode(encoding_json_condAddrEncoder ce, encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.isValidTag": "bool __golang encoding_json_isValidTag(string s)",
    "encoding_json.typeByIndex": "reflect_Type __golang encoding_json_typeByIndex(reflect_Type t, _slice_int index)",
    "encoding_json.byIndex.Len": "int_0 __golang encoding_json_byIndex_Len(json_byIndex)",
    "encoding_json.byIndex.Swap": "void __golang encoding_json_byIndex_Swap(json_byIndex, int_0, int_0)",
    "encoding_json.byIndex.Less": "bool __golang encoding_json_byIndex_Less(json_byIndex, int_0, int_0)",
    "encoding_json.appendFoldedName": "_slice_uint8 __golang encoding_json_appendFoldedName(_slice_uint8 out, _slice_uint8 in)",
    "encoding_json.HTMLEscape": "void __golang encoding_json_HTMLEscape(bytes_Buffer *dst, _slice_uint8 src)",
    "encoding_json.appendHTMLEscape": "_slice_uint8 __golang encoding_json_appendHTMLEscape(_slice_uint8 dst, _slice_uint8 src)",
    "encoding_json.appendCompact.deferwrap1": "void __golang encoding_json_appendCompact_deferwrap1()",
    "encoding_json.Indent": "error __golang encoding_json_Indent(bytes_Buffer *dst, _slice_uint8 src, string prefix, string indent)",
    "encoding_json.appendIndent": "void __golang encoding_json_appendIndent(_slice_uint8 dst, string indent, _slice_uint8 src, _slice_uint8 _r0, _slice_uint8 _r0, error _r1, error _r1, string prefix)",
    "encoding_json.appendIndent.deferwrap1": "void __golang encoding_json_appendIndent_deferwrap1()",
    "encoding_json.Valid.deferwrap1": "void __golang encoding_json_Valid_deferwrap1()",
    "encoding_json.checkValid": "error __golang encoding_json_checkValid(_slice_uint8 data, encoding_json_scanner *scan)",
    "encoding_json._ptr_SyntaxError.Error": "string_0 __golang encoding_json__ptr_SyntaxError_Error(_ptr_json_SyntaxError)",
    "encoding_json.newScanner": "encoding_json_scanner *__golang encoding_json_newScanner()",
    "encoding_json.freeScanner": "void __golang encoding_json_freeScanner(encoding_json_scanner *scan)",
    "encoding_json._ptr_scanner.eof": "int_0 __golang encoding_json__ptr_scanner_eof(_ptr_json_scanner)",
    "encoding_json._ptr_scanner.pushParseState": "int __golang encoding_json__ptr_scanner_pushParseState(encoding_json_scanner *s, uint8 c, int newParseState, int successState)",
    "encoding_json.stateBeginValueOrEmpty": "int __golang encoding_json_stateBeginValueOrEmpty(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateBeginValue": "int __golang encoding_json_stateBeginValue(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateBeginStringOrEmpty": "int __golang encoding_json_stateBeginStringOrEmpty(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateBeginString": "int __golang encoding_json_stateBeginString(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateEndValue": "int __golang encoding_json_stateEndValue(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateEndTop": "int __golang encoding_json_stateEndTop(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateInString": "int __golang encoding_json_stateInString(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateInStringEsc": "int __golang encoding_json_stateInStringEsc(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateInStringEscU": "int __golang encoding_json_stateInStringEscU(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateInStringEscU1": "int __golang encoding_json_stateInStringEscU1(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateInStringEscU12": "int __golang encoding_json_stateInStringEscU12(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateInStringEscU123": "int __golang encoding_json_stateInStringEscU123(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateNeg": "int __golang encoding_json_stateNeg(encoding_json_scanner *s, uint8 c)",
    "encoding_json.state1": "int __golang encoding_json_state1(encoding_json_scanner *s, uint8 c)",
    "encoding_json.state0": "int __golang encoding_json_state0(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateDot": "int __golang encoding_json_stateDot(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateDot0": "int __golang encoding_json_stateDot0(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateE": "int __golang encoding_json_stateE(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateESign": "int __golang encoding_json_stateESign(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateE0": "int __golang encoding_json_stateE0(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateT": "int __golang encoding_json_stateT(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateTr": "int __golang encoding_json_stateTr(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateTru": "int __golang encoding_json_stateTru(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateF": "int __golang encoding_json_stateF(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateFa": "int __golang encoding_json_stateFa(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateFal": "int __golang encoding_json_stateFal(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateFals": "int __golang encoding_json_stateFals(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateN": "int __golang encoding_json_stateN(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateNu": "int __golang encoding_json_stateNu(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateNul": "int __golang encoding_json_stateNul(encoding_json_scanner *s, uint8 c)",
    "encoding_json.stateError": "int __golang encoding_json_stateError(encoding_json_scanner *s, uint8 c)",
    "encoding_json.quoteChar": "string __golang encoding_json_quoteChar(uint8 c)",
    "encoding_json._ptr_Decoder.Decode": "error_0 __golang encoding_json__ptr_Decoder_Decode(_ptr_json_Decoder, interface__0)",
    "encoding_json._ptr_Decoder.refill": "error_0 __golang encoding_json__ptr_Decoder_refill(_ptr_json_Decoder)",
    "encoding_json._ptr_Encoder.Encode.deferwrap1": "void __golang encoding_json__ptr_Encoder_Encode_deferwrap1()",
    "encoding_json._ptr_RawMessage.UnmarshalJSON": "error_0 __golang encoding_json__ptr_RawMessage_UnmarshalJSON(_ptr_json_RawMessage, _slice_uint8_0)",
    "encoding_json._ptr_Decoder.tokenPrepareForDecode": "error_0 __golang encoding_json__ptr_Decoder_tokenPrepareForDecode(_ptr_json_Decoder)",
    "encoding_json.Delim.String": "string_0 __golang encoding_json_Delim_String(json_Delim)",
    "encoding_json.tagOptions.Contains": "bool __golang encoding_json_tagOptions_Contains(encoding_json_tagOptions o, string optionName)",
    "encoding_json.appendString_go.shape.string_": "_slice_uint8 __golang encoding_json_appendString_go_shape_string_(_slice_uint8 dst, encoding_json_appendString_go_shape_string_::_param0 src, bool escapeHTML)",
    "slices.pdqsortCmpFunc_go.shape.struct__encoding_json.v_reflect.Value_encoding_json.ks_string__": "void __golang slices_pdqsortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__(slices_pdqsortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param9 data, int a, int b, int limit, slices_pdqsortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param10 cmp)",
    "slices.partitionEqualCmpFunc_go.shape.struct__encoding_json.v_reflect.Value_encoding_json.ks_string__": "int __golang slices_partitionEqualCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__(slices_partitionEqualCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param0 data, int a, int b, int pivot, slices_partitionEqualCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param1 cmp)",
    "slices.partialInsertionSortCmpFunc_go.shape.struct__encoding_json.v_reflect.Value_encoding_json.ks_string__": "bool __golang slices_partialInsertionSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__(slices_partialInsertionSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param0 data, int a, int b, slices_partialInsertionSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param1 cmp)",
    "slices.medianCmpFunc_go.shape.struct__encoding_json.v_reflect.Value_encoding_json.ks_string__": "int __golang slices_medianCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__(slices_medianCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param1 data, int a, int b, int c, int *swaps, slices_medianCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param2 cmp)",
    "slices.breakPatternsCmpFunc_go.shape.struct__encoding_json.v_reflect.Value_encoding_json.ks_string__": "void __golang slices_breakPatternsCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__(slices_breakPatternsCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param0 data, int a, int b, slices_breakPatternsCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param1 cmp)",
    "slices.heapSortCmpFunc_go.shape.struct__encoding_json.v_reflect.Value_encoding_json.ks_string__": "void __golang slices_heapSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__(slices_heapSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param1 data, int a, int b, slices_heapSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param2 cmp)",
    "slices.siftDownCmpFunc_go.shape.struct__encoding_json.v_reflect.Value_encoding_json.ks_string__": "void __golang slices_siftDownCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__(slices_siftDownCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param0 data, int lo, int hi, int first, slices_siftDownCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param1 cmp)",
    "slices.insertionSortCmpFunc_go.shape.struct__encoding_json.v_reflect.Value_encoding_json.ks_string__": "void __golang slices_insertionSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__(slices_insertionSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param0 data, int a, int b, slices_insertionSortCmpFunc_go_shape_struct__encoding_json_v_reflect_Value_encoding_json_ks_string__::_param1 cmp)",
    "reflect.TypeFor_go.shape.float64_": "reflect_Type __golang reflect_TypeFor_go_shape_float64_()",
    "reflect.TypeFor_go.shape.interface__MarshalJSON__slice_uint8_comma__error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__MarshalJSON__slice_uint8_comma__error__()",
    "reflect.TypeFor_go.shape.string_": "reflect_Type __golang reflect_TypeFor_go_shape_string_()",
    "encoding_json._ptr_Number.String": "string_0 __golang encoding_json__ptr_Number_String(_ptr_json_Number)",
    "encoding_json._ptr_encodeState.Available": "int_0 __golang encoding_json__ptr_encodeState_Available(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.AvailableBuffer": "_slice_uint8_0 __golang encoding_json__ptr_encodeState_AvailableBuffer(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.Bytes": "_slice_uint8_0 __golang encoding_json__ptr_encodeState_Bytes(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.Cap": "int_0 __golang encoding_json__ptr_encodeState_Cap(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.Grow": "void __golang encoding_json__ptr_encodeState_Grow(_ptr_json_encodeState, int_0)",
    "encoding_json._ptr_encodeState.Len": "int_0 __golang encoding_json__ptr_encodeState_Len(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.Next": "_slice_uint8_0 __golang encoding_json__ptr_encodeState_Next(_ptr_json_encodeState, int_0)",
    "encoding_json._ptr_encodeState.Reset": "void __golang encoding_json__ptr_encodeState_Reset(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.String": "string_0 __golang encoding_json__ptr_encodeState_String(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.Truncate": "void __golang encoding_json__ptr_encodeState_Truncate(_ptr_json_encodeState, int_0)",
    "encoding_json._ptr_encodeState.UnreadByte": "error_0 __golang encoding_json__ptr_encodeState_UnreadByte(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.UnreadRune": "error_0 __golang encoding_json__ptr_encodeState_UnreadRune(_ptr_json_encodeState)",
    "encoding_json._ptr_encodeState.WriteByte": "error_0 __golang encoding_json__ptr_encodeState_WriteByte(_ptr_json_encodeState, uint8_0)",
    "encoding_json.jsonError.Error": "string_0 __golang encoding_json_jsonError_Error(json_jsonError)",
    "encoding_json._ptr_jsonError.Error": "string_0 __golang encoding_json__ptr_jsonError_Error(_ptr_json_jsonError)",
    "encoding_json._ptr_byIndex.Len": "int_0 __golang encoding_json__ptr_byIndex_Len(_ptr_json_byIndex)",
    "encoding_json._ptr_byIndex.Less": "bool __golang encoding_json__ptr_byIndex_Less(_ptr_json_byIndex, int_0, int_0)",
    "encoding_json._ptr_byIndex.Swap": "void __golang encoding_json__ptr_byIndex_Swap(_ptr_json_byIndex, int_0, int_0)",
    "encoding_json._ptr_Delim.String": "string_0 __golang encoding_json__ptr_Delim_String(_ptr_json_Delim)",
    "encoding_json.floatEncoder.encode_fm": "void __golang encoding_json_floatEncoder_encode_fm(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.condAddrEncoder.encode_fm": "void __golang encoding_json_condAddrEncoder_encode_fm(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.ptrEncoder.encode_fm": "void __golang encoding_json_ptrEncoder_encode_fm(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.arrayEncoder.encode_fm": "void __golang encoding_json_arrayEncoder_encode_fm(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.sliceEncoder.encode_fm": "void __golang encoding_json_sliceEncoder_encode_fm(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.mapEncoder.encode_fm": "void __golang encoding_json_mapEncoder_encode_fm(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_json.structEncoder.encode_fm": "void __golang encoding_json_structEncoder_encode_fm(encoding_json_encodeState *e, reflect_Value v, encoding_json_encOpts opts)",
    "encoding_xml._ptr_Encoder.Indent": "void __golang encoding_xml__ptr_Encoder_Indent(_ptr_xml_Encoder, string_0, string_0)",
    "encoding_xml._ptr_Encoder.Encode": "error_0 __golang encoding_xml__ptr_Encoder_Encode(_ptr_xml_Encoder, interface__0)",
    "encoding_xml._ptr_Encoder.EncodeElement": "error_0 __golang encoding_xml__ptr_Encoder_EncodeElement(_ptr_xml_Encoder, interface__0, xml_StartElement)",
    "encoding_xml._ptr_Encoder.EncodeToken": "error_0 __golang encoding_xml__ptr_Encoder_EncodeToken(_ptr_xml_Encoder, xml_Token)",
    "encoding_xml.isValidDirective": "bool __golang encoding_xml_isValidDirective(encoding_xml_Directive dir)",
    "encoding_xml._ptr_Encoder.Flush": "error_0 __golang encoding_xml__ptr_Encoder_Flush(_ptr_xml_Encoder)",
    "encoding_xml._ptr_Encoder.Close": "error_0 __golang encoding_xml__ptr_Encoder_Close(_ptr_xml_Encoder)",
    "encoding_xml._ptr_printer.createAttrPrefix": "string_0 __golang encoding_xml__ptr_printer_createAttrPrefix(_ptr_xml_printer, string_0)",
    "encoding_xml._ptr_printer.marshalValue": "error __golang encoding_xml__ptr_printer_marshalValue(encoding_xml_printer *p, reflect_Value val, encoding_xml_fieldInfo *finfo, encoding_xml_StartElement *startTemplate)",
    "encoding_xml._ptr_printer.marshalAttr": "error __golang encoding_xml__ptr_printer_marshalAttr(encoding_xml_printer *p, encoding_xml_StartElement *start, encoding_xml_Name name, reflect_Value val)",
    "encoding_xml._ptr_printer.marshalInterface": "void __golang encoding_xml__ptr_printer_marshalInterface(encoding_xml_printer *p, encoding_xml_StartElement start, error _r0, encoding_xml_Marshaler val)",
    "encoding_xml._ptr_printer.marshalTextInterface": "void __golang encoding_xml__ptr_printer_marshalTextInterface(encoding_xml_printer *p, encoding_xml_StartElement start, error _r0, encoding_TextMarshaler val)",
    "encoding_xml._ptr_printer.writeStart": "error __golang encoding_xml__ptr_printer_writeStart(encoding_xml_printer *p, encoding_xml_StartElement *start)",
    "encoding_xml._ptr_printer.writeEnd": "error __golang encoding_xml__ptr_printer_writeEnd(encoding_xml_printer *p, encoding_xml_Name name)",
    "encoding_xml.indirect": "reflect_Value __golang encoding_xml_indirect(reflect_Value vf)",
    "encoding_xml._ptr_printer.marshalStruct": "error __golang encoding_xml__ptr_printer_marshalStruct(encoding_xml_printer *p, encoding_xml_typeInfo *tinfo, reflect_Value val)",
    "encoding_xml._ptr_printer.WriteByte": "error_0 __golang encoding_xml__ptr_printer_WriteByte(_ptr_xml_printer, uint8_0)",
    "encoding_xml._ptr_printer.Close": "error_0 __golang encoding_xml__ptr_printer_Close(_ptr_xml_printer)",
    "encoding_xml._ptr_printer.writeIndent": "void __golang encoding_xml__ptr_printer_writeIndent(_ptr_xml_printer, int_0)",
    "encoding_xml._ptr_parentStack.trim": "error __golang encoding_xml__ptr_parentStack_trim(encoding_xml_parentStack *s, _slice_string parents)",
    "encoding_xml._ptr_parentStack.push": "error __golang encoding_xml__ptr_parentStack_push(encoding_xml_parentStack *s, _slice_string parents)",
    "encoding_xml._ptr_UnsupportedTypeError.Error": "string_0 __golang encoding_xml__ptr_UnsupportedTypeError_Error(_ptr_xml_UnsupportedTypeError)",
    "encoding_xml.isEmptyValue": "bool __golang encoding_xml_isEmptyValue(reflect_Value v)",
    "encoding_xml.Unmarshal": "error __golang encoding_xml_Unmarshal(_slice_uint8 data, interface_ v)",
    "encoding_xml._ptr_Decoder.Decode": "error_0 __golang encoding_xml__ptr_Decoder_Decode(_ptr_xml_Decoder, interface__0)",
    "encoding_xml._ptr_Decoder.DecodeElement": "error_0 __golang encoding_xml__ptr_Decoder_DecodeElement(_ptr_xml_Decoder, interface__0, _ptr_xml_StartElement)",
    "encoding_xml.UnmarshalError.Error": "string_0 __golang encoding_xml_UnmarshalError_Error(xml_UnmarshalError)",
    "encoding_xml.receiverType": "string __golang encoding_xml_receiverType(interface_ val)",
    "encoding_xml._ptr_Decoder.unmarshalInterface": "error __golang encoding_xml__ptr_Decoder_unmarshalInterface(encoding_xml_Decoder *d, encoding_xml_Unmarshaler val, encoding_xml_StartElement *start)",
    "encoding_xml._ptr_Decoder.unmarshalTextInterface": "error __golang encoding_xml__ptr_Decoder_unmarshalTextInterface(encoding_xml_Decoder *d, encoding_TextUnmarshaler val)",
    "encoding_xml._ptr_Decoder.unmarshalAttr": "void __golang encoding_xml__ptr_Decoder_unmarshalAttr(encoding_xml_Decoder *d, encoding_xml_Attr attr, error _r0, reflect_Value val)",
    "encoding_xml._ptr_Decoder.unmarshal": "error __golang encoding_xml__ptr_Decoder_unmarshal(encoding_xml_Decoder *d, reflect_Value val, encoding_xml_StartElement *start, int depth)",
    "encoding_xml.copyValue": "error __golang encoding_xml_copyValue(reflect_Value dst, _slice_uint8 src)",
    "encoding_xml._ptr_Decoder.unmarshalPath": "void __golang encoding_xml__ptr_Decoder_unmarshalPath(encoding_xml_Decoder *d, encoding_xml_typeInfo *tinfo, int depth, reflect_Value sv, bool consumed, error err, _slice_string parents, encoding_xml_StartElement *start)",
    "encoding_xml._ptr_Decoder.Skip": "error_0 __golang encoding_xml__ptr_Decoder_Skip(_ptr_xml_Decoder)",
    "encoding_xml.lookupXMLName": "encoding_xml_fieldInfo *__golang encoding_xml_lookupXMLName(reflect_Type typ)",
    "encoding_xml.addFieldInfo": "error __golang encoding_xml_addFieldInfo(reflect_Type typ, encoding_xml_typeInfo *tinfo, encoding_xml_fieldInfo *newf)",
    "encoding_xml._ptr_TagPathError.Error": "string_0 __golang encoding_xml__ptr_TagPathError_Error(_ptr_xml_TagPathError)",
    "encoding_xml._ptr_fieldInfo.value": "reflect_Value __golang encoding_xml__ptr_fieldInfo_value(encoding_xml_fieldInfo *finfo, reflect_Value v, bool shouldInitNilPointers)",
    "encoding_xml._ptr_SyntaxError.Error": "string_0 __golang encoding_xml__ptr_SyntaxError_Error(_ptr_xml_SyntaxError)",
    "encoding_xml.StartElement.Copy": "xml_StartElement __golang encoding_xml_StartElement_Copy(xml_StartElement)",
    "encoding_xml.StartElement.End": "xml_EndElement __golang encoding_xml_StartElement_End(xml_StartElement)",
    "encoding_xml.CharData.Copy": "xml_CharData __golang encoding_xml_CharData_Copy(xml_CharData)",
    "encoding_xml.Comment.Copy": "xml_Comment __golang encoding_xml_Comment_Copy(xml_Comment)",
    "encoding_xml.ProcInst.Copy": "xml_ProcInst __golang encoding_xml_ProcInst_Copy(xml_ProcInst)",
    "encoding_xml.Directive.Copy": "xml_Directive __golang encoding_xml_Directive_Copy(xml_Directive)",
    "encoding_xml.NewDecoder": "encoding_xml_Decoder *__golang encoding_xml_NewDecoder(io_Reader r)",
    "encoding_xml._ptr_Decoder.popElement": "bool __golang encoding_xml__ptr_Decoder_popElement(encoding_xml_Decoder *d, encoding_xml_EndElement *t)",
    "encoding_xml._ptr_Decoder.attrval": "_slice_uint8_0 __golang encoding_xml__ptr_Decoder_attrval(_ptr_xml_Decoder)",
    "encoding_xml._ptr_Decoder.space": "void __golang encoding_xml__ptr_Decoder_space(_ptr_xml_Decoder)",
    "encoding_xml._ptr_Decoder.InputOffset": "int64_0 __golang encoding_xml__ptr_Decoder_InputOffset(_ptr_xml_Decoder)",
    "encoding_xml._ptr_Decoder.text": "_slice_uint8 __golang encoding_xml__ptr_Decoder_text(encoding_xml_Decoder *d, int quote, bool cdata)",
    "encoding_xml._ptr_Decoder.readName": "bool __golang encoding_xml__ptr_Decoder_readName(_ptr_xml_Decoder)",
    "encoding_xml.isName": "bool __golang encoding_xml_isName(_slice_uint8 s)",
    "encoding_xml.isNameString": "bool __golang encoding_xml_isNameString(string s)",
    "encoding_xml.EscapeText": "error __golang encoding_xml_EscapeText(io_Writer w, _slice_uint8 s)",
    "encoding_xml.escapeText": "error __golang encoding_xml_escapeText(io_Writer w, _slice_uint8 s, bool escapeNewline)",
    "encoding_xml._ptr_printer.EscapeString": "void __golang encoding_xml__ptr_printer_EscapeString(_ptr_xml_printer, string_0)",
    "encoding_xml.emitCDATA": "error __golang encoding_xml_emitCDATA(io_Writer w, _slice_uint8 s)",
    "encoding_xml.procInst": "string __golang encoding_xml_procInst(string param, string s)",
    "reflect.TypeFor_go.shape.struct__Space_string_Local_string__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__Space_string_Local_string__()",
    "reflect.TypeFor_go.shape.interface__UnmarshalXMLAttrencoding_xml.Attr_error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__UnmarshalXMLAttrencoding_xml_Attr_error__()",
    "reflect.TypeFor_go.shape.interface__UnmarshalXML_ptr_encoding_xml.Decoder_comma__encoding_xml.StartElement_error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__UnmarshalXML_ptr_encoding_xml_Decoder_comma__encoding_xml_StartElement_error__()",
    "reflect.TypeFor_go.shape.struct__Name_encoding_xml.Name_Value_string__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__Name_encoding_xml_Name_Value_string__()",
    "reflect.TypeFor_go.shape.interface__MarshalXMLAttrencoding_xml.Name_encoding_xml.Attr_comma__error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__MarshalXMLAttrencoding_xml_Name_encoding_xml_Attr_comma__error__()",
    "reflect.TypeFor_go.shape.interface__MarshalXML_ptr_encoding_xml.Encoder_comma__encoding_xml.StartElement_error__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__MarshalXML_ptr_encoding_xml_Encoder_comma__encoding_xml_StartElement_error__()",
    "encoding_xml._ptr_StartElement.Copy": "xml_StartElement __golang encoding_xml__ptr_StartElement_Copy(_ptr_xml_StartElement)",
    "encoding_xml._ptr_StartElement.End": "xml_EndElement __golang encoding_xml__ptr_StartElement_End(_ptr_xml_StartElement)",
    "encoding_xml._ptr_Directive.Copy": "xml_Directive __golang encoding_xml__ptr_Directive_Copy(_ptr_xml_Directive)",
    "encoding_xml._ptr_UnmarshalError.Error": "string_0 __golang encoding_xml__ptr_UnmarshalError_Error(_ptr_xml_UnmarshalError)",
    "encoding_xml._ptr_CharData.Copy": "xml_CharData __golang encoding_xml__ptr_CharData_Copy(_ptr_xml_CharData)",
    "encoding_xml._ptr_Comment.Copy": "xml_Comment __golang encoding_xml__ptr_Comment_Copy(_ptr_xml_Comment)",
    "encoding_xml._ptr_ProcInst.Copy": "xml_ProcInst __golang encoding_xml__ptr_ProcInst_Copy(_ptr_xml_ProcInst)",
    "flag._ptr_stringValue.Set": "error_0 __golang flag__ptr_stringValue_Set(_ptr_flag_stringValue, string_0)",
    "flag._ptr_stringValue.Get": "interface__0 __golang flag__ptr_stringValue_Get(_ptr_flag_stringValue)",
    "flag._ptr_stringValue.String": "string_0 __golang flag__ptr_stringValue_String(_ptr_flag_stringValue)",
    "flag.sortFlags": "_slice__ptr_flag_Flag __golang flag_sortFlags(map_string__ptr_flag_Flag flags)",
    "flag._ptr_FlagSet.VisitAll": "void __golang flag__ptr_FlagSet_VisitAll(flag_FlagSet *f, func_ptr_flag_Flag fn)",
    "flag._ptr_FlagSet.PrintDefaults": "void __golang flag__ptr_FlagSet_PrintDefaults(_ptr_flag_FlagSet)",
    "flag._ptr_FlagSet.defaultUsage": "void __golang flag__ptr_FlagSet_defaultUsage(_ptr_flag_FlagSet)",
    "flag._ptr_FlagSet.String": "string *__golang flag__ptr_FlagSet_String(flag_FlagSet *f, string name, string value, string usage)",
    "flag._ptr_FlagSet.Var": "void __golang flag__ptr_FlagSet_Var(flag_FlagSet *f, flag_Value value, string name, string usage)",
    "flag._ptr_FlagSet.sprintf": "string_0 __golang flag__ptr_FlagSet_sprintf(_ptr_flag_FlagSet, string_0, _slice_interface__0)",
    "flag.commandLineUsage": "void __golang flag_commandLineUsage()",
    "flag._ptr_FlagSet.defaultUsage_fm": "void __golang flag__ptr_FlagSet_defaultUsage_fm()",
    "hash_maphash._ptr_Hash.initSeed": "void __golang hash_maphash__ptr_Hash_initSeed(hash_maphash_Hash *h)",
    "hash_maphash._ptr_Hash.flush": "void __golang hash_maphash__ptr_Hash_flush(hash_maphash_Hash *h)",
    "hash_maphash._ptr_Hash.Sum64": "uint64 __golang hash_maphash__ptr_Hash_Sum64(hash_maphash_Hash *h)",
    "hash_maphash.rthashString": "uint64 __golang hash_maphash_rthashString(string s, uint64 state)",
    "image_color._ptr_modelFunc.Convert": "color_Color __golang image_color__ptr_modelFunc_Convert(_ptr_color_modelFunc, color_Color)",
    "image_color.rgbaModel": "image_color_Color __golang image_color_rgbaModel(image_color_Color c)",
    "image_color.rgba64Model": "image_color_Color __golang image_color_rgba64Model(image_color_Color c)",
    "image_color.nrgbaModel": "image_color_Color __golang image_color_nrgbaModel(image_color_Color c)",
    "image_color.nrgba64Model": "image_color_Color __golang image_color_nrgba64Model(image_color_Color c)",
    "image_color.alphaModel": "image_color_Color __golang image_color_alphaModel(image_color_Color c)",
    "image_color.alpha16Model": "image_color_Color __golang image_color_alpha16Model(image_color_Color c)",
    "image_color.grayModel": "image_color_Color __golang image_color_grayModel(image_color_Color c)",
    "image_color.gray16Model": "image_color_Color __golang image_color_gray16Model(image_color_Color c)",
    "image_color.Palette.Convert": "color_Color __golang image_color_Palette_Convert(color_Palette, color_Color)",
    "image_color.Palette.Index": "int_0 __golang image_color_Palette_Index(color_Palette, color_Color)",
    "image_color._ptr_Palette.Convert": "color_Color __golang image_color__ptr_Palette_Convert(_ptr_color_Palette, color_Color)",
    "image_color._ptr_Palette.Index": "int_0 __golang image_color__ptr_Palette_Index(_ptr_color_Palette, color_Color)",
    "image.RegisterFormat": "void __golang image_RegisterFormat(string name, string magic, funcio_Reader_image_Image_comma_error decode, funcio_Reader_image_Config_comma_error decodeConfig)",
    "image.Point.String": "string_0 __golang image_Point_String(image_Point_0)",
    "image.Point.Add": "image_Point_0 __golang image_Point_Add(image_Point_0, image_Point_0)",
    "image.Point.Sub": "image_Point_0 __golang image_Point_Sub(image_Point_0, image_Point_0)",
    "image.Point.Mul": "image_Point_0 __golang image_Point_Mul(image_Point_0, int_0)",
    "image.Point.Div": "image_Point_0 __golang image_Point_Div(image_Point_0, int_0)",
    "image.Point.Mod": "image_Point_0 __golang image_Point_Mod(image_Point_0, image_Rectangle_0)",
    "image.Rectangle.String": "string_0 __golang image_Rectangle_String(image_Rectangle_0)",
    "image.Rectangle.Dx": "int_0 __golang image_Rectangle_Dx(image_Rectangle_0)",
    "image.Rectangle.Dy": "int_0 __golang image_Rectangle_Dy(image_Rectangle_0)",
    "image.Rectangle.Size": "image_Point_0 __golang image_Rectangle_Size(image_Rectangle_0)",
    "image.Rectangle.Add": "image_Rectangle_0 __golang image_Rectangle_Add(image_Rectangle_0, image_Point_0)",
    "image.Rectangle.Sub": "image_Rectangle_0 __golang image_Rectangle_Sub(image_Rectangle_0, image_Point_0)",
    "image.Rectangle.Inset": "image_Rectangle_0 __golang image_Rectangle_Inset(image_Rectangle_0, int_0)",
    "image.Rectangle.Intersect": "image_Rectangle_0 __golang image_Rectangle_Intersect(image_Rectangle_0, image_Rectangle_0)",
    "image.Rectangle.Union": "image_Rectangle_0 __golang image_Rectangle_Union(image_Rectangle_0, image_Rectangle_0)",
    "image.Rectangle.Empty": "bool __golang image_Rectangle_Empty(image_Rectangle_0)",
    "image.Rectangle.Eq": "bool __golang image_Rectangle_Eq(image_Rectangle_0, image_Rectangle_0)",
    "image.Rectangle.Overlaps": "bool __golang image_Rectangle_Overlaps(image_Rectangle_0, image_Rectangle_0)",
    "image.Rectangle.In": "bool __golang image_Rectangle_In(image_Rectangle_0, image_Rectangle_0)",
    "image.Rectangle.Canon": "image_Rectangle __golang image_Rectangle_Canon(image_Rectangle r)",
    "image.Rectangle.At": "color_Color __golang image_Rectangle_At(image_Rectangle_0, int_0, int_0)",
    "image.Rectangle.RGBA64At": "color_RGBA64 __golang image_Rectangle_RGBA64At(image_Rectangle_0, int_0, int_0)",
    "image.Rectangle.Bounds": "image_Rectangle __golang image_Rectangle_Bounds(image_Rectangle r)",
    "image.Rectangle.ColorModel": "color_Model __golang image_Rectangle_ColorModel(image_Rectangle_0)",
    "image.pixelBufferLength": "int __golang image_pixelBufferLength(int bytesPerPixel, image_Rectangle r, string imageTypeName)",
    "image._ptr_RGBA.ColorModel": "color_Model __golang image__ptr_RGBA_ColorModel(_ptr_image_RGBA)",
    "image._ptr_RGBA.Bounds": "image_Rectangle_0 __golang image__ptr_RGBA_Bounds(_ptr_image_RGBA)",
    "image._ptr_RGBA.At": "color_Color __golang image__ptr_RGBA_At(_ptr_image_RGBA, int_0, int_0)",
    "image._ptr_RGBA.RGBA64At": "color_RGBA64 __golang image__ptr_RGBA_RGBA64At(_ptr_image_RGBA, int_0, int_0)",
    "image._ptr_RGBA.PixOffset": "int_0 __golang image__ptr_RGBA_PixOffset(_ptr_image_RGBA, int_0, int_0)",
    "image._ptr_RGBA.Set": "void __golang image__ptr_RGBA_Set(_ptr_image_RGBA, int_0, int_0, color_Color)",
    "image._ptr_RGBA.SetRGBA64": "void __golang image__ptr_RGBA_SetRGBA64(_ptr_image_RGBA, int_0, int_0, color_RGBA64)",
    "image._ptr_RGBA.SubImage": "image_Image_0 __golang image__ptr_RGBA_SubImage(_ptr_image_RGBA, image_Rectangle_0)",
    "image._ptr_RGBA.Opaque": "bool __golang image__ptr_RGBA_Opaque(_ptr_image_RGBA)",
    "image._ptr_RGBA64.ColorModel": "color_Model __golang image__ptr_RGBA64_ColorModel(_ptr_image_RGBA64)",
    "image._ptr_RGBA64.Bounds": "image_Rectangle_0 __golang image__ptr_RGBA64_Bounds(_ptr_image_RGBA64)",
    "image._ptr_RGBA64.At": "color_Color __golang image__ptr_RGBA64_At(_ptr_image_RGBA64, int_0, int_0)",
    "image._ptr_RGBA64.RGBA64At": "color_RGBA64 __golang image__ptr_RGBA64_RGBA64At(_ptr_image_RGBA64, int_0, int_0)",
    "image._ptr_RGBA64.Set": "void __golang image__ptr_RGBA64_Set(_ptr_image_RGBA64, int_0, int_0, color_Color)",
    "image._ptr_RGBA64.SetRGBA64": "void __golang image__ptr_RGBA64_SetRGBA64(_ptr_image_RGBA64, int_0, int_0, color_RGBA64)",
    "image._ptr_RGBA64.Opaque": "bool __golang image__ptr_RGBA64_Opaque(_ptr_image_RGBA64)",
    "image._ptr_NRGBA.ColorModel": "color_Model __golang image__ptr_NRGBA_ColorModel(_ptr_image_NRGBA)",
    "image._ptr_NRGBA.Bounds": "image_Rectangle_0 __golang image__ptr_NRGBA_Bounds(_ptr_image_NRGBA)",
    "image._ptr_NRGBA.At": "color_Color __golang image__ptr_NRGBA_At(_ptr_image_NRGBA, int_0, int_0)",
    "image._ptr_NRGBA.RGBA64At": "color_RGBA64 __golang image__ptr_NRGBA_RGBA64At(_ptr_image_NRGBA, int_0, int_0)",
    "image._ptr_NRGBA.NRGBAAt": "color_NRGBA __golang image__ptr_NRGBA_NRGBAAt(_ptr_image_NRGBA, int_0, int_0)",
    "image._ptr_NRGBA.Set": "void __golang image__ptr_NRGBA_Set(_ptr_image_NRGBA, int_0, int_0, color_Color)",
    "image._ptr_NRGBA.SetRGBA64": "void __golang image__ptr_NRGBA_SetRGBA64(_ptr_image_NRGBA, int_0, int_0, color_RGBA64)",
    "image._ptr_NRGBA.SubImage": "image_Image_0 __golang image__ptr_NRGBA_SubImage(_ptr_image_NRGBA, image_Rectangle_0)",
    "image._ptr_NRGBA.Opaque": "bool __golang image__ptr_NRGBA_Opaque(_ptr_image_NRGBA)",
    "image._ptr_NRGBA64.ColorModel": "color_Model __golang image__ptr_NRGBA64_ColorModel(_ptr_image_NRGBA64)",
    "image._ptr_NRGBA64.Bounds": "image_Rectangle_0 __golang image__ptr_NRGBA64_Bounds(_ptr_image_NRGBA64)",
    "image._ptr_NRGBA64.At": "color_Color __golang image__ptr_NRGBA64_At(_ptr_image_NRGBA64, int_0, int_0)",
    "image._ptr_NRGBA64.RGBA64At": "color_RGBA64 __golang image__ptr_NRGBA64_RGBA64At(_ptr_image_NRGBA64, int_0, int_0)",
    "image._ptr_NRGBA64.NRGBA64At": "color_NRGBA64 __golang image__ptr_NRGBA64_NRGBA64At(_ptr_image_NRGBA64, int_0, int_0)",
    "image._ptr_NRGBA64.Set": "void __golang image__ptr_NRGBA64_Set(_ptr_image_NRGBA64, int_0, int_0, color_Color)",
    "image._ptr_NRGBA64.SetRGBA64": "void __golang image__ptr_NRGBA64_SetRGBA64(_ptr_image_NRGBA64, int_0, int_0, color_RGBA64)",
    "image._ptr_NRGBA64.SubImage": "image_Image_0 __golang image__ptr_NRGBA64_SubImage(_ptr_image_NRGBA64, image_Rectangle_0)",
    "image._ptr_NRGBA64.Opaque": "bool __golang image__ptr_NRGBA64_Opaque(_ptr_image_NRGBA64)",
    "image._ptr_Gray.ColorModel": "color_Model __golang image__ptr_Gray_ColorModel(_ptr_image_Gray)",
    "image._ptr_Gray.Bounds": "image_Rectangle_0 __golang image__ptr_Gray_Bounds(_ptr_image_Gray)",
    "image._ptr_Gray.At": "color_Color __golang image__ptr_Gray_At(_ptr_image_Gray, int_0, int_0)",
    "image._ptr_Gray.GrayAt": "color_Gray __golang image__ptr_Gray_GrayAt(_ptr_image_Gray, int_0, int_0)",
    "image._ptr_Gray.Set": "void __golang image__ptr_Gray_Set(_ptr_image_Gray, int_0, int_0, color_Color)",
    "image._ptr_Gray.SetRGBA64": "void __golang image__ptr_Gray_SetRGBA64(_ptr_image_Gray, int_0, int_0, color_RGBA64)",
    "image._ptr_Gray.SubImage": "image_Image_0 __golang image__ptr_Gray_SubImage(_ptr_image_Gray, image_Rectangle_0)",
    "image._ptr_Gray.Opaque": "bool __golang image__ptr_Gray_Opaque(_ptr_image_Gray)",
    "image.NewGray": "image_Gray *__golang image_NewGray(image_Rectangle r)",
    "image._ptr_Gray16.ColorModel": "color_Model __golang image__ptr_Gray16_ColorModel(_ptr_image_Gray16)",
    "image._ptr_Gray16.Bounds": "image_Rectangle_0 __golang image__ptr_Gray16_Bounds(_ptr_image_Gray16)",
    "image._ptr_Gray16.At": "color_Color __golang image__ptr_Gray16_At(_ptr_image_Gray16, int_0, int_0)",
    "image._ptr_Gray16.RGBA64At": "color_RGBA64 __golang image__ptr_Gray16_RGBA64At(_ptr_image_Gray16, int_0, int_0)",
    "image._ptr_Gray16.Gray16At": "color_Gray16 __golang image__ptr_Gray16_Gray16At(_ptr_image_Gray16, int_0, int_0)",
    "image._ptr_Gray16.Set": "void __golang image__ptr_Gray16_Set(_ptr_image_Gray16, int_0, int_0, color_Color)",
    "image._ptr_Gray16.SetRGBA64": "void __golang image__ptr_Gray16_SetRGBA64(_ptr_image_Gray16, int_0, int_0, color_RGBA64)",
    "image._ptr_Gray16.SubImage": "image_Image_0 __golang image__ptr_Gray16_SubImage(_ptr_image_Gray16, image_Rectangle_0)",
    "image._ptr_Gray16.Opaque": "bool __golang image__ptr_Gray16_Opaque(_ptr_image_Gray16)",
    "image.NewGray16": "image_Gray16 *__golang image_NewGray16(image_Rectangle r)",
    "image._ptr_Paletted.ColorModel": "color_Model __golang image__ptr_Paletted_ColorModel(_ptr_image_Paletted)",
    "image._ptr_Paletted.Bounds": "image_Rectangle_0 __golang image__ptr_Paletted_Bounds(_ptr_image_Paletted)",
    "image._ptr_Paletted.At": "color_Color __golang image__ptr_Paletted_At(_ptr_image_Paletted, int_0, int_0)",
    "image._ptr_Paletted.PixOffset": "int_0 __golang image__ptr_Paletted_PixOffset(_ptr_image_Paletted, int_0, int_0)",
    "image._ptr_Paletted.Set": "void __golang image__ptr_Paletted_Set(_ptr_image_Paletted, int_0, int_0, color_Color)",
    "image._ptr_Paletted.SetRGBA64": "void __golang image__ptr_Paletted_SetRGBA64(_ptr_image_Paletted, int_0, int_0, color_RGBA64)",
    "image._ptr_Paletted.ColorIndexAt": "uint8_0 __golang image__ptr_Paletted_ColorIndexAt(_ptr_image_Paletted, int_0, int_0)",
    "image._ptr_Paletted.SubImage": "image_Image_0 __golang image__ptr_Paletted_SubImage(_ptr_image_Paletted, image_Rectangle_0)",
    "image._ptr_Paletted.Opaque": "bool __golang image__ptr_Paletted_Opaque(_ptr_image_Paletted)",
    "image.NewPaletted": "image_Paletted *__golang image_NewPaletted(image_Rectangle r, image_color_Palette p)",
    "image._ptr_YCbCr.YCbCrAt": "image_color_YCbCr __golang image__ptr_YCbCr_YCbCrAt(image_YCbCr *p, int x, int y)",
    "image._ptr_YCbCr.COffset": "int_0 __golang image__ptr_YCbCr_COffset(_ptr_image_YCbCr, int_0, int_0)",
    "image._ptr_Point.Add": "image_Point_0 __golang image__ptr_Point_Add(_ptr_image_Point, image_Point_0)",
    "image._ptr_Point.Div": "image_Point_0 __golang image__ptr_Point_Div(_ptr_image_Point, int_0)",
    "image._ptr_Point.Eq": "bool __golang image__ptr_Point_Eq(_ptr_image_Point, image_Point_0)",
    "image._ptr_Point.In": "bool __golang image__ptr_Point_In(_ptr_image_Point, image_Rectangle_0)",
    "image._ptr_Point.Mod": "image_Point_0 __golang image__ptr_Point_Mod(_ptr_image_Point, image_Rectangle_0)",
    "image._ptr_Point.Mul": "image_Point_0 __golang image__ptr_Point_Mul(_ptr_image_Point, int_0)",
    "image._ptr_Point.String": "string_0 __golang image__ptr_Point_String(_ptr_image_Point)",
    "image._ptr_Point.Sub": "image_Point_0 __golang image__ptr_Point_Sub(_ptr_image_Point, image_Point_0)",
    "image._ptr_Rectangle.Add": "image_Rectangle_0 __golang image__ptr_Rectangle_Add(_ptr_image_Rectangle, image_Point_0)",
    "image._ptr_Rectangle.At": "color_Color __golang image__ptr_Rectangle_At(_ptr_image_Rectangle, int_0, int_0)",
    "image._ptr_Rectangle.Bounds": "image_Rectangle __golang image__ptr_Rectangle_Bounds(image_Rectangle *r)",
    "image._ptr_Rectangle.Canon": "image_Rectangle __golang image__ptr_Rectangle_Canon(image_Rectangle *r)",
    "image._ptr_Rectangle.ColorModel": "color_Model __golang image__ptr_Rectangle_ColorModel(_ptr_image_Rectangle)",
    "image._ptr_Rectangle.Dx": "int_0 __golang image__ptr_Rectangle_Dx(_ptr_image_Rectangle)",
    "image._ptr_Rectangle.Dy": "int_0 __golang image__ptr_Rectangle_Dy(_ptr_image_Rectangle)",
    "image._ptr_Rectangle.Empty": "bool __golang image__ptr_Rectangle_Empty(_ptr_image_Rectangle)",
    "image._ptr_Rectangle.Eq": "bool __golang image__ptr_Rectangle_Eq(_ptr_image_Rectangle, image_Rectangle_0)",
    "image._ptr_Rectangle.In": "bool __golang image__ptr_Rectangle_In(_ptr_image_Rectangle, image_Rectangle_0)",
    "image._ptr_Rectangle.Inset": "image_Rectangle_0 __golang image__ptr_Rectangle_Inset(_ptr_image_Rectangle, int_0)",
    "image._ptr_Rectangle.Intersect": "image_Rectangle_0 __golang image__ptr_Rectangle_Intersect(_ptr_image_Rectangle, image_Rectangle_0)",
    "image._ptr_Rectangle.Overlaps": "bool __golang image__ptr_Rectangle_Overlaps(_ptr_image_Rectangle, image_Rectangle_0)",
    "image._ptr_Rectangle.RGBA64At": "color_RGBA64 __golang image__ptr_Rectangle_RGBA64At(_ptr_image_Rectangle, int_0, int_0)",
    "image._ptr_Rectangle.Size": "image_Point_0 __golang image__ptr_Rectangle_Size(_ptr_image_Rectangle)",
    "image._ptr_Rectangle.String": "string_0 __golang image__ptr_Rectangle_String(_ptr_image_Rectangle)",
    "image._ptr_Rectangle.Sub": "image_Rectangle_0 __golang image__ptr_Rectangle_Sub(_ptr_image_Rectangle, image_Point_0)",
    "image._ptr_Rectangle.Union": "image_Rectangle_0 __golang image__ptr_Rectangle_Union(_ptr_image_Rectangle, image_Rectangle_0)",
    "image_draw.floydSteinberg.Draw": "void __golang image_draw_floydSteinberg_Draw(draw_floydSteinberg, draw_Image, image_Rectangle_0, image_Image_0, image_Point_0)",
    "image_draw.clip": "void __golang image_draw_clip(image_draw_Image dst, image_Rectangle *r, image_Image src, image_Point *sp_0, image_Image mask, image_Point *mp)",
    "image_draw.drawPaletted": "void __golang image_draw_drawPaletted(image_draw_Image dst, image_Rectangle r, image_Image src, image_Point sp_0, bool floydSteinberg)",
    "image_draw._ptr_floydSteinberg.Draw": "void __golang image_draw__ptr_floydSteinberg_Draw(_ptr_draw_floydSteinberg, draw_Image, image_Rectangle_0, image_Image_0, image_Point_0)",
    "image_png.paeth": "uint8 __golang image_png_paeth(uint8 a, uint8 b, uint8 c)",
    "image_png.filterPaeth": "void __golang image_png_filterPaeth(_slice_uint8 cdat, _slice_uint8 pdat, int bytesPerPixel)",
    "image_png.UnsupportedError.Error": "string_0 __golang image_png_UnsupportedError_Error(png_UnsupportedError)",
    "image_png._ptr_decoder.parseIHDR": "error_0 __golang image_png__ptr_decoder_parseIHDR(_ptr_png_decoder, uint32_0)",
    "image_png._ptr_decoder.parsePLTE": "error_0 __golang image_png__ptr_decoder_parsePLTE(_ptr_png_decoder, uint32_0)",
    "image_png._ptr_decoder.parsetRNS": "error_0 __golang image_png__ptr_decoder_parsetRNS(_ptr_png_decoder, uint32_0)",
    "image_png._ptr_decoder.decode.deferwrap1": "void __golang image_png__ptr_decoder_decode_deferwrap1()",
    "image_png._ptr_decoder.mergePassInto": "void __golang image_png__ptr_decoder_mergePassInto(image_png_decoder *d, image_Image dst, image_Image src, int pass)",
    "image_png._ptr_decoder.parseIDAT": "error_0 __golang image_png__ptr_decoder_parseIDAT(_ptr_png_decoder, uint32_0)",
    "image_png._ptr_decoder.parseChunk": "error_0 __golang image_png__ptr_decoder_parseChunk(_ptr_png_decoder, bool)",
    "image_png._ptr_decoder.verifyChecksum": "error_0 __golang image_png__ptr_decoder_verifyChecksum(_ptr_png_decoder)",
    "image_png._ptr_decoder.checkHeader": "error_0 __golang image_png__ptr_decoder_checkHeader(_ptr_png_decoder)",
    "image_png.opaque": "bool __golang image_png_opaque(image_Image m)",
    "image_png._ptr_encoder.writeChunk": "void __golang image_png__ptr_encoder_writeChunk(image_png_encoder *e, _slice_uint8 b, string name)",
    "image_png._ptr_encoder.writeIHDR": "void __golang image_png__ptr_encoder_writeIHDR(_ptr_png_encoder)",
    "image_png._ptr_encoder.writePLTEAndTRNS": "void __golang image_png__ptr_encoder_writePLTEAndTRNS(image_png_encoder *e, image_color_Palette p)",
    "image_png.filter": "int __golang image_png_filter(_slice_uint8 (*cr)[5], _slice_uint8 pr, int bpp)",
    "image_png._ptr_encoder.writeImage.deferwrap1": "void __golang image_png__ptr_encoder_writeImage_deferwrap1()",
    "image_png._ptr_encoder.writeIDATs": "void __golang image_png__ptr_encoder_writeIDATs(_ptr_png_encoder)",
    "image_png._ptr_Encoder.Encode": "error_0 __golang image_png__ptr_Encoder_Encode(_ptr_png_Encoder, io_Writer_0, image_Image_0)",
    "image_png._ptr_Encoder.Encode.deferwrap1": "void __golang image_png__ptr_Encoder_Encode_deferwrap1()",
    "image_png._ptr_FormatError.Error": "string_0 __golang image_png__ptr_FormatError_Error(_ptr_png_FormatError)",
    "image_png._ptr_UnsupportedError.Error": "string_0 __golang image_png__ptr_UnsupportedError_Error(_ptr_png_UnsupportedError)",
    "regexp_syntax._ptr_compiler.compile": "regexp_syntax_frag __golang regexp_syntax__ptr_compiler_compile(regexp_syntax_compiler *c, regexp_syntax_Regexp *re)",
    "regexp_syntax._ptr_compiler.alt": "regexp_syntax_frag __golang regexp_syntax__ptr_compiler_alt(regexp_syntax_compiler *c, regexp_syntax_frag f1, regexp_syntax_frag f2)",
    "regexp_syntax._ptr_compiler.quest": "regexp_syntax_frag __golang regexp_syntax__ptr_compiler_quest(regexp_syntax_compiler *c, regexp_syntax_frag f1, bool nongreedy)",
    "regexp_syntax._ptr_compiler.loop": "regexp_syntax_frag __golang regexp_syntax__ptr_compiler_loop(regexp_syntax_compiler *c, regexp_syntax_frag f1, bool nongreedy)",
    "regexp_syntax._ptr_compiler.star": "regexp_syntax_frag __golang regexp_syntax__ptr_compiler_star(regexp_syntax_compiler *c, regexp_syntax_frag f1, bool nongreedy)",
    "regexp_syntax._ptr_compiler.rune": "regexp_syntax_frag __golang regexp_syntax__ptr_compiler_rune(regexp_syntax_compiler *c, _slice_int32 r, unsigned __int16 flags)",
    "regexp_syntax._ptr_Error.Error": "string_0 __golang regexp_syntax__ptr_Error_Error(_ptr_syntax_Error)",
    "regexp_syntax.ErrorCode.String": "string_0 __golang regexp_syntax_ErrorCode_String(syntax_ErrorCode)",
    "regexp_syntax._ptr_parser.checkLimits": "void __golang regexp_syntax__ptr_parser_checkLimits(regexp_syntax_parser *p, regexp_syntax_Regexp *re)",
    "regexp_syntax._ptr_parser.checkSize": "void __golang regexp_syntax__ptr_parser_checkSize(regexp_syntax_parser *p, regexp_syntax_Regexp *re)",
    "regexp_syntax._ptr_parser.calcSize": "int64 __golang regexp_syntax__ptr_parser_calcSize(regexp_syntax_parser *p, regexp_syntax_Regexp *re, bool force)",
    "regexp_syntax._ptr_parser.checkHeight": "void __golang regexp_syntax__ptr_parser_checkHeight(regexp_syntax_parser *p, regexp_syntax_Regexp *re)",
    "regexp_syntax._ptr_parser.calcHeight": "int __golang regexp_syntax__ptr_parser_calcHeight(regexp_syntax_parser *p, regexp_syntax_Regexp *re, bool force)",
    "regexp_syntax._ptr_parser.push": "regexp_syntax_Regexp *__golang regexp_syntax__ptr_parser_push(regexp_syntax_parser *p, regexp_syntax_Regexp *re)",
    "regexp_syntax._ptr_parser.maybeConcat": "bool __golang regexp_syntax__ptr_parser_maybeConcat(regexp_syntax_parser *p, int32 r, unsigned __int16 flags)",
    "regexp_syntax._ptr_parser.literal": "void __golang regexp_syntax__ptr_parser_literal(_ptr_syntax_parser, int32_0)",
    "regexp_syntax.minFoldRune": "int32 __golang regexp_syntax_minFoldRune(int32 r)",
    "regexp_syntax._ptr_parser.op": "regexp_syntax_Regexp *__golang regexp_syntax__ptr_parser_op(regexp_syntax_parser *p, unsigned __int8 op)",
    "regexp_syntax._ptr_parser.repeat": "void __golang regexp_syntax__ptr_parser_repeat(regexp_syntax_parser *p, unsigned __int8 op, string lastRepeat, int min, int max, string _r0, string before, error _r1, string after)",
    "regexp_syntax.repeatIsValid": "bool __golang regexp_syntax_repeatIsValid(regexp_syntax_Regexp *re, int n)",
    "regexp_syntax._ptr_parser.concat": "regexp_syntax_Regexp *__golang regexp_syntax__ptr_parser_concat(regexp_syntax_parser *p)",
    "regexp_syntax._ptr_parser.alternate": "regexp_syntax_Regexp *__golang regexp_syntax__ptr_parser_alternate(regexp_syntax_parser *p)",
    "regexp_syntax.cleanAlt": "void __golang regexp_syntax_cleanAlt(regexp_syntax_Regexp *re)",
    "regexp_syntax._ptr_parser.collapse": "regexp_syntax_Regexp *__golang regexp_syntax__ptr_parser_collapse(regexp_syntax_parser *p, _slice__ptr_regexp_syntax_Regexp subs, unsigned __int8 op)",
    "regexp_syntax._ptr_parser.factor": "_slice__ptr_regexp_syntax_Regexp __golang regexp_syntax__ptr_parser_factor(regexp_syntax_parser *p, _slice__ptr_regexp_syntax_Regexp sub)",
    "regexp_syntax._ptr_parser.removeLeadingString": "regexp_syntax_Regexp *__golang regexp_syntax__ptr_parser_removeLeadingString(regexp_syntax_parser *p, regexp_syntax_Regexp *re, int n)",
    "regexp_syntax._ptr_parser.removeLeadingRegexp": "regexp_syntax_Regexp *__golang regexp_syntax__ptr_parser_removeLeadingRegexp(regexp_syntax_parser *p, regexp_syntax_Regexp *re, bool reuse)",
    "regexp_syntax.mergeCharClass": "void __golang regexp_syntax_mergeCharClass(regexp_syntax_Regexp *dst, regexp_syntax_Regexp *src)",
    "regexp_syntax._ptr_parser.swapVerticalBar": "bool __golang regexp_syntax__ptr_parser_swapVerticalBar(_ptr_syntax_parser)",
    "regexp_syntax._ptr_parser.parseRightParen": "error_0 __golang regexp_syntax__ptr_parser_parseRightParen(_ptr_syntax_parser)",
    "regexp_syntax._ptr_parser.appendGroup": "_slice_int32 __golang regexp_syntax__ptr_parser_appendGroup(regexp_syntax_parser *p, _slice_int32 r, regexp_syntax_charGroup g)",
    "regexp_syntax.cleanClass": "_slice_int32 __golang regexp_syntax_cleanClass(_slice_int32 *rp)",
    "regexp_syntax.appendLiteral": "_slice_int32 __golang regexp_syntax_appendLiteral(_slice_int32 r, int32 x, unsigned __int16 flags)",
    "regexp_syntax.appendRange": "_slice_int32 __golang regexp_syntax_appendRange(_slice_int32 r, int32 lo, int32 hi)",
    "regexp_syntax.appendFoldedRange": "_slice_int32 __golang regexp_syntax_appendFoldedRange(_slice_int32 r, int32 lo, int32 hi)",
    "regexp_syntax.appendClass": "_slice_int32 __golang regexp_syntax_appendClass(_slice_int32 r, _slice_int32 x)",
    "regexp_syntax.appendFoldedClass": "_slice_int32 __golang regexp_syntax_appendFoldedClass(_slice_int32 r, _slice_int32 x)",
    "regexp_syntax.appendNegatedClass": "_slice_int32 __golang regexp_syntax_appendNegatedClass(_slice_int32 r, _slice_int32 x)",
    "regexp_syntax.appendTable": "_slice_int32 __golang regexp_syntax_appendTable(_slice_int32 r, unicode_RangeTable *x)",
    "regexp_syntax.appendNegatedTable": "_slice_int32 __golang regexp_syntax_appendNegatedTable(_slice_int32 r, unicode_RangeTable *x)",
    "regexp_syntax.negateClass": "_slice_int32 __golang regexp_syntax_negateClass(_slice_int32 r)",
    "regexp_syntax.ranges.Less": "bool __golang regexp_syntax_ranges_Less(syntax_ranges, int_0, int_0)",
    "regexp_syntax.ranges.Swap": "void __golang regexp_syntax_ranges_Swap(syntax_ranges, int_0, int_0)",
    "regexp_syntax.InstOp.String": "string_0 __golang regexp_syntax_InstOp_String(syntax_InstOp)",
    "regexp_syntax._ptr_Prog.String": "string_0 __golang regexp_syntax__ptr_Prog_String(_ptr_syntax_Prog)",
    "regexp_syntax._ptr_Prog.StartCond": "syntax_EmptyOp __golang regexp_syntax__ptr_Prog_StartCond(_ptr_syntax_Prog)",
    "regexp_syntax._ptr_Inst.MatchRunePos": "int_0 __golang regexp_syntax__ptr_Inst_MatchRunePos(_ptr_syntax_Inst, int32_0)",
    "regexp_syntax._ptr_Inst.MatchEmptyWidth": "bool __golang regexp_syntax__ptr_Inst_MatchEmptyWidth(_ptr_syntax_Inst, int32_0, int32_0)",
    "regexp_syntax._ptr_Inst.String": "string_0 __golang regexp_syntax__ptr_Inst_String(_ptr_syntax_Inst)",
    "regexp_syntax.dumpProg": "void __golang regexp_syntax_dumpProg(strings_Builder *b, regexp_syntax_Prog *p)",
    "regexp_syntax.dumpInst": "void __golang regexp_syntax_dumpInst(strings_Builder *b, regexp_syntax_Inst *i)",
    "regexp_syntax._ptr_Regexp.Equal": "bool __golang regexp_syntax__ptr_Regexp_Equal(regexp_syntax_Regexp *x, regexp_syntax_Regexp *y)",
    "regexp_syntax._ptr_Regexp.MaxCap": "int_0 __golang regexp_syntax__ptr_Regexp_MaxCap(_ptr_syntax_Regexp)",
    "regexp_syntax._ptr_Regexp.CapNames": "_slice_string_0 __golang regexp_syntax__ptr_Regexp_CapNames(_ptr_syntax_Regexp)",
    "regexp_syntax._ptr_Regexp.capNames": "void __golang regexp_syntax__ptr_Regexp_capNames(_ptr_syntax_Regexp, _slice_string_0)",
    "regexp_syntax._ptr_Regexp.Simplify": "regexp_syntax_Regexp *__golang regexp_syntax__ptr_Regexp_Simplify(regexp_syntax_Regexp *re)",
    "regexp_syntax._ptr_InstOp.String": "string_0 __golang regexp_syntax__ptr_InstOp_String(_ptr_syntax_InstOp)",
    "regexp_syntax._ptr_ErrorCode.String": "string_0 __golang regexp_syntax__ptr_ErrorCode_String(_ptr_syntax_ErrorCode)",
    "regexp_syntax._ptr_ranges.Len": "int_0 __golang regexp_syntax__ptr_ranges_Len(_ptr_syntax_ranges)",
    "regexp_syntax._ptr_ranges.Less": "bool __golang regexp_syntax__ptr_ranges_Less(_ptr_syntax_ranges, int_0, int_0)",
    "regexp_syntax._ptr_ranges.Swap": "void __golang regexp_syntax__ptr_ranges_Swap(_ptr_syntax_ranges, int_0, int_0)",
    "regexp.freeBitState": "void __golang regexp_freeBitState(regexp_bitState *b)",
    "regexp._ptr_bitState.reset": "void __golang regexp__ptr_bitState_reset(regexp_bitState *b, regexp_syntax_Prog *prog, int end, int ncap)",
    "regexp._ptr_Regexp.tryBacktrack": "bool __golang regexp__ptr_Regexp_tryBacktrack(regexp_Regexp *re, regexp_bitState *b, regexp_input i, uint32 pc, int pos)",
    "regexp._ptr_Regexp.backtrack": "void __golang regexp__ptr_Regexp_backtrack(regexp_Regexp *re, _slice_uint8 ib, _slice_int dstCap, string is, _slice_int _r0, int pos, int ncap)",
    "regexp.lazyFlag.match": "bool __golang regexp_lazyFlag_match(unsigned __int64 f, unsigned __int8 op)",
    "regexp._ptr_machine.match": "bool __golang regexp__ptr_machine_match(regexp_machine *m, regexp_input i, int pos)",
    "regexp._ptr_machine.step": "void __golang regexp__ptr_machine_step(regexp_machine *m, regexp_queue *runq, regexp_queue *nextq, int pos, int nextPos, int32 c, unsigned __int64 *nextCond)",
    "regexp._ptr_machine.add": "regexp_thread *__golang regexp__ptr_machine_add(regexp_machine *m, regexp_queue *q, uint32 pc, int pos, _slice_int cap, unsigned __int64 *cond, regexp_thread *t)",
    "regexp.freeOnePassMachine": "void __golang regexp_freeOnePassMachine(regexp_onePassMachine *m)",
    "regexp._ptr_Regexp.doOnePass": "void __golang regexp__ptr_Regexp_doOnePass(regexp_Regexp *re, io_RuneReader ir, int ncap, _slice_int dstCap, _slice_uint8 ib, _slice_int _r0, string is, int pos)",
    "regexp._ptr_Regexp.doExecute": "void __golang regexp__ptr_Regexp_doExecute(regexp_Regexp *re, io_RuneReader r, int ncap, _slice_int dstCap, _slice_uint8 b, _slice_int _r0, string s, int pos)",
    "regexp.onePassNext": "uint32 __golang regexp_onePassNext(regexp_onePassInst *i, int32 r)",
    "regexp.onePassCopy": "regexp_onePassProg *__golang regexp_onePassCopy(regexp_syntax_Prog *prog)",
    "regexp.runeSlice.Len": "int_0 __golang regexp_runeSlice_Len(regexp_runeSlice_0)",
    "regexp.runeSlice.Less": "bool __golang regexp_runeSlice_Less(regexp_runeSlice_0, int_0, int_0)",
    "regexp.makeOnePass": "regexp_onePassProg *__golang regexp_makeOnePass(regexp_onePassProg *p)",
    "regexp.compileOnePass": "regexp_onePassProg *__golang regexp_compileOnePass(regexp_syntax_Prog *prog)",
    "regexp._ptr_Regexp.String": "string_0 __golang regexp__ptr_Regexp_String(_ptr_regexp_Regexp)",
    "regexp._ptr_Regexp.Copy": "_ptr_regexp_Regexp __golang regexp__ptr_Regexp_Copy(_ptr_regexp_Regexp)",
    "regexp._ptr_Regexp.Longest": "void __golang regexp__ptr_Regexp_Longest(_ptr_regexp_Regexp)",
    "regexp._ptr_Regexp.get": "regexp_machine *__golang regexp__ptr_Regexp_get(regexp_Regexp *re)",
    "regexp._ptr_Regexp.put": "void __golang regexp__ptr_Regexp_put(regexp_Regexp *re, regexp_machine *m)",
    "regexp.minInputLen": "int __golang regexp_minInputLen(regexp_syntax_Regexp *re)",
    "regexp.MustCompile": "regexp_Regexp *__golang regexp_MustCompile(string str)",
    "regexp.quote": "string __golang regexp_quote(string s)",
    "regexp._ptr_Regexp.NumSubexp": "int_0 __golang regexp__ptr_Regexp_NumSubexp(_ptr_regexp_Regexp)",
    "regexp._ptr_Regexp.SubexpNames": "_slice_string_0 __golang regexp__ptr_Regexp_SubexpNames(_ptr_regexp_Regexp)",
    "regexp._ptr_Regexp.SubexpIndex": "int_0 __golang regexp__ptr_Regexp_SubexpIndex(_ptr_regexp_Regexp, string_0)",
    "regexp._ptr_inputString.canCheckPrefix": "bool __golang regexp__ptr_inputString_canCheckPrefix(_ptr_regexp_inputString)",
    "regexp._ptr_inputString.hasPrefix": "bool __golang regexp__ptr_inputString_hasPrefix(_ptr_regexp_inputString, _ptr_regexp_Regexp)",
    "regexp._ptr_inputString.index": "int_0 __golang regexp__ptr_inputString_index(_ptr_regexp_inputString, _ptr_regexp_Regexp, int_0)",
    "regexp._ptr_inputString.context": "regexp_lazyFlag __golang regexp__ptr_inputString_context(_ptr_regexp_inputString, int_0)",
    "regexp._ptr_inputBytes.canCheckPrefix": "bool __golang regexp__ptr_inputBytes_canCheckPrefix(_ptr_regexp_inputBytes)",
    "regexp._ptr_inputBytes.hasPrefix": "bool __golang regexp__ptr_inputBytes_hasPrefix(_ptr_regexp_inputBytes, _ptr_regexp_Regexp)",
    "regexp._ptr_inputBytes.index": "int_0 __golang regexp__ptr_inputBytes_index(_ptr_regexp_inputBytes, _ptr_regexp_Regexp, int_0)",
    "regexp._ptr_inputBytes.context": "regexp_lazyFlag __golang regexp__ptr_inputBytes_context(_ptr_regexp_inputBytes, int_0)",
    "regexp._ptr_inputReader.canCheckPrefix": "bool __golang regexp__ptr_inputReader_canCheckPrefix(_ptr_regexp_inputReader)",
    "regexp._ptr_inputReader.hasPrefix": "bool __golang regexp__ptr_inputReader_hasPrefix(_ptr_regexp_inputReader, _ptr_regexp_Regexp)",
    "regexp._ptr_inputReader.index": "int_0 __golang regexp__ptr_inputReader_index(_ptr_regexp_inputReader, _ptr_regexp_Regexp, int_0)",
    "regexp._ptr_inputReader.context": "regexp_lazyFlag __golang regexp__ptr_inputReader_context(_ptr_regexp_inputReader, int_0)",
    "regexp._ptr_Regexp.MatchReader": "bool __golang regexp__ptr_Regexp_MatchReader(_ptr_regexp_Regexp, io_RuneReader_0)",
    "regexp._ptr_Regexp.MatchString": "bool __golang regexp__ptr_Regexp_MatchString(_ptr_regexp_Regexp, string_0)",
    "regexp._ptr_Regexp.Match": "bool __golang regexp__ptr_Regexp_Match(_ptr_regexp_Regexp, _slice_uint8_0)",
    "regexp._ptr_Regexp.ReplaceAllString": "string_0 __golang regexp__ptr_Regexp_ReplaceAllString(_ptr_regexp_Regexp, string_0, string_0)",
    "regexp._ptr_Regexp.ReplaceAllLiteralString": "string_0 __golang regexp__ptr_Regexp_ReplaceAllLiteralString(_ptr_regexp_Regexp, string_0, string_0)",
    "regexp._ptr_Regexp.ReplaceAllStringFunc": "string_0 __golang regexp__ptr_Regexp_ReplaceAllStringFunc(_ptr_regexp_Regexp, string_0, PTR_funcstring_string_0)",
    "regexp._ptr_Regexp.replaceAll": "_slice_uint8 __golang regexp__ptr_Regexp_replaceAll(regexp_Regexp *re, _slice_uint8 bsrc, string src, int nmatch, func_slice_uint8_comma__slice_int__slice_uint8 repl)",
    "regexp._ptr_Regexp.ReplaceAll": "_slice_uint8_0 __golang regexp__ptr_Regexp_ReplaceAll(_ptr_regexp_Regexp, _slice_uint8_0, _slice_uint8_0)",
    "regexp._ptr_Regexp.ReplaceAllLiteral": "_slice_uint8_0 __golang regexp__ptr_Regexp_ReplaceAllLiteral(_ptr_regexp_Regexp, _slice_uint8_0, _slice_uint8_0)",
    "regexp._ptr_Regexp.ReplaceAllFunc": "_slice_uint8_0 __golang regexp__ptr_Regexp_ReplaceAllFunc(_ptr_regexp_Regexp, _slice_uint8_0, PTR_func_slice_uint8__slice_uint8_0)",
    "regexp.QuoteMeta": "string __golang regexp_QuoteMeta(string s)",
    "regexp._ptr_Regexp.allMatches": "void __golang regexp__ptr_Regexp_allMatches(regexp_Regexp *re, string s, _slice_uint8 b, int n, func_slice_int deliver)",
    "regexp._ptr_Regexp.Find": "_slice_uint8_0 __golang regexp__ptr_Regexp_Find(_ptr_regexp_Regexp, _slice_uint8_0)",
    "regexp._ptr_Regexp.FindIndex": "_slice_int_0 __golang regexp__ptr_Regexp_FindIndex(_ptr_regexp_Regexp, _slice_uint8_0)",
    "regexp._ptr_Regexp.FindString": "string_0 __golang regexp__ptr_Regexp_FindString(_ptr_regexp_Regexp, string_0)",
    "regexp._ptr_Regexp.FindStringIndex": "_slice_int_0 __golang regexp__ptr_Regexp_FindStringIndex(_ptr_regexp_Regexp, string_0)",
    "regexp._ptr_Regexp.FindReaderIndex": "_slice_int_0 __golang regexp__ptr_Regexp_FindReaderIndex(_ptr_regexp_Regexp, io_RuneReader_0)",
    "regexp._ptr_Regexp.FindSubmatch": "_slice__slice_uint8_0 __golang regexp__ptr_Regexp_FindSubmatch(_ptr_regexp_Regexp, _slice_uint8_0)",
    "regexp._ptr_Regexp.Expand": "_slice_uint8_0 __golang regexp__ptr_Regexp_Expand(_ptr_regexp_Regexp, _slice_uint8_0, _slice_uint8_0, _slice_uint8_0, _slice_int_0)",
    "regexp._ptr_Regexp.ExpandString": "_slice_uint8_0 __golang regexp__ptr_Regexp_ExpandString(_ptr_regexp_Regexp, _slice_uint8_0, string_0, string_0, _slice_int_0)",
    "regexp._ptr_Regexp.expand": "void __golang regexp__ptr_Regexp_expand(regexp_Regexp *re, _slice_uint8 dst, string src, _slice_int match, string template, _slice_uint8 _r0, _slice_uint8 bsrc)",
    "regexp._ptr_Regexp.FindSubmatchIndex": "_slice_int_0 __golang regexp__ptr_Regexp_FindSubmatchIndex(_ptr_regexp_Regexp, _slice_uint8_0)",
    "regexp._ptr_Regexp.FindStringSubmatch": "_slice_string_0 __golang regexp__ptr_Regexp_FindStringSubmatch(_ptr_regexp_Regexp, string_0)",
    "regexp._ptr_Regexp.FindStringSubmatchIndex": "_slice_int_0 __golang regexp__ptr_Regexp_FindStringSubmatchIndex(_ptr_regexp_Regexp, string_0)",
    "regexp._ptr_Regexp.FindReaderSubmatchIndex": "_slice_int_0 __golang regexp__ptr_Regexp_FindReaderSubmatchIndex(_ptr_regexp_Regexp, io_RuneReader_0)",
    "regexp._ptr_Regexp.FindAll": "_slice__slice_uint8_0 __golang regexp__ptr_Regexp_FindAll(_ptr_regexp_Regexp, _slice_uint8_0, int_0)",
    "regexp._ptr_Regexp.FindAllIndex": "_slice__slice_int_0 __golang regexp__ptr_Regexp_FindAllIndex(_ptr_regexp_Regexp, _slice_uint8_0, int_0)",
    "regexp._ptr_Regexp.FindAllString": "_slice_string_0 __golang regexp__ptr_Regexp_FindAllString(_ptr_regexp_Regexp, string_0, int_0)",
    "regexp._ptr_Regexp.FindAllStringIndex": "_slice__slice_int_0 __golang regexp__ptr_Regexp_FindAllStringIndex(_ptr_regexp_Regexp, string_0, int_0)",
    "regexp._ptr_Regexp.FindAllSubmatch": "_slice__slice__slice_uint8_0 __golang regexp__ptr_Regexp_FindAllSubmatch(_ptr_regexp_Regexp, _slice_uint8_0, int_0)",
    "regexp._ptr_Regexp.FindAllSubmatchIndex": "_slice__slice_int_0 __golang regexp__ptr_Regexp_FindAllSubmatchIndex(_ptr_regexp_Regexp, _slice_uint8_0, int_0)",
    "regexp._ptr_Regexp.FindAllStringSubmatch": "_slice__slice_string_0 __golang regexp__ptr_Regexp_FindAllStringSubmatch(_ptr_regexp_Regexp, string_0, int_0)",
    "regexp._ptr_Regexp.FindAllStringSubmatchIndex": "_slice__slice_int_0 __golang regexp__ptr_Regexp_FindAllStringSubmatchIndex(_ptr_regexp_Regexp, string_0, int_0)",
    "regexp._ptr_Regexp.Split": "_slice_string_0 __golang regexp__ptr_Regexp_Split(_ptr_regexp_Regexp, string_0, int_0)",
    "regexp._ptr_Regexp.UnmarshalText": "error_0 __golang regexp__ptr_Regexp_UnmarshalText(_ptr_regexp_Regexp, _slice_uint8_0)",
    "regexp._ptr_onePassInst.MatchEmptyWidth": "bool __golang regexp__ptr_onePassInst_MatchEmptyWidth(_ptr_regexp_onePassInst, int32_0, int32_0)",
    "regexp._ptr_onePassInst.MatchRune": "bool __golang regexp__ptr_onePassInst_MatchRune(_ptr_regexp_onePassInst, int32_0)",
    "regexp._ptr_onePassInst.MatchRunePos": "int_0 __golang regexp__ptr_onePassInst_MatchRunePos(_ptr_regexp_onePassInst, int32_0)",
    "regexp._ptr_onePassInst.String": "string_0 __golang regexp__ptr_onePassInst_String(_ptr_regexp_onePassInst)",
    "regexp._ptr_runeSlice.Len": "int_0 __golang regexp__ptr_runeSlice_Len(_ptr_regexp_runeSlice)",
    "regexp._ptr_runeSlice.Less": "bool __golang regexp__ptr_runeSlice_Less(_ptr_regexp_runeSlice, int_0, int_0)",
    "regexp._ptr_runeSlice.Swap": "void __golang regexp__ptr_runeSlice_Swap(_ptr_regexp_runeSlice, int_0, int_0)",
    "index_suffixarray.text_32": "void __golang index_suffixarray_text_32(_slice_uint8 text, _slice_int32 sa)",
    "index_suffixarray.bucketMin_8_32": "void __golang index_suffixarray_bucketMin_8_32(_slice_uint8 text, _slice_int32 freq, _slice_int32 bucket)",
    "index_suffixarray.placeLMS_8_32": "void __golang index_suffixarray_placeLMS_8_32(_slice_uint8 text, _slice_int32 bucket, _slice_int32 sa, int _r0, _slice_int32 freq)",
    "index_suffixarray.length_8_32": "void __golang index_suffixarray_length_8_32(_slice_uint8 text, _slice_int32 sa, int numLMS)",
    "index_suffixarray.recurse_32": "void __golang index_suffixarray_recurse_32(_slice_int32 sa, _slice_int32 oldTmp, int numLMS, int maxID)",
    "index_suffixarray.unmap_8_32": "void __golang index_suffixarray_unmap_8_32(_slice_uint8 text, _slice_int32 sa, int numLMS)",
    "index_suffixarray.bucketMin_8_64": "void __golang index_suffixarray_bucketMin_8_64(_slice_uint8 text, _slice_int64 freq, _slice_int64 bucket)",
    "index_suffixarray.placeLMS_8_64": "void __golang index_suffixarray_placeLMS_8_64(_slice_uint8 text, _slice_int64 bucket, _slice_int64 sa, int _r0, _slice_int64 freq)",
    "index_suffixarray.placeLMS_32": "void __golang index_suffixarray_placeLMS_32(_slice_int32 text, _slice_int32 bucket, _slice_int32 sa, int _r0, _slice_int32 freq)",
    "index_suffixarray.placeLMS_64": "void __golang index_suffixarray_placeLMS_64(_slice_int64 text, _slice_int64 bucket, _slice_int64 sa, int _r0, _slice_int64 freq)",
    "index_suffixarray.length_8_64": "void __golang index_suffixarray_length_8_64(_slice_uint8 text, _slice_int64 sa, int numLMS)",
    "index_suffixarray.length_64": "void __golang index_suffixarray_length_64(_slice_int64 text, _slice_int64 sa, int numLMS)",
    "index_suffixarray.assignID_32": "int __golang index_suffixarray_assignID_32(_slice_int32 text, _slice_int32 sa, int numLMS)",
    "index_suffixarray.recurse_64": "void __golang index_suffixarray_recurse_64(_slice_int64 sa, _slice_int64 oldTmp, int numLMS, int maxID)",
    "index_suffixarray.unmap_8_64": "void __golang index_suffixarray_unmap_8_64(_slice_uint8 text, _slice_int64 sa, int numLMS)",
    "index_suffixarray.unmap_64": "void __golang index_suffixarray_unmap_64(_slice_int64 text, _slice_int64 sa, int numLMS)",
    "index_suffixarray.New": "index_suffixarray_Index *__golang index_suffixarray_New(_slice_uint8 data)",
    "index_suffixarray._ptr_Index.Lookup": "_slice_int __golang index_suffixarray__ptr_Index_Lookup(index_suffixarray_Index *x, _slice_uint8 s, int n)",
    "log.New": "log_Logger *__golang log_New(io_Writer out, string prefix, int flag)",
    "log._ptr_Logger.SetOutput": "void __golang log__ptr_Logger_SetOutput(_ptr_log_Logger, io_Writer_0)",
    "log._ptr_Logger.SetOutput.deferwrap1": "void __golang log__ptr_Logger_SetOutput_deferwrap1()",
    "log.putBuffer": "void __golang log_putBuffer(_slice_uint8 *p)",
    "log._ptr_Logger.Output": "error_0 __golang log__ptr_Logger_Output(_ptr_log_Logger, int_0, string_0)",
    "log._ptr_Logger.output.deferwrap2": "void __golang log__ptr_Logger_output_deferwrap2()",
    "log._ptr_Logger.output.deferwrap1": "void __golang log__ptr_Logger_output_deferwrap1()",
    "log._ptr_Logger.Print": "void __golang log__ptr_Logger_Print(_ptr_log_Logger, _slice_interface__0)",
    "log._ptr_Logger.Printf": "void __golang log__ptr_Logger_Printf(_ptr_log_Logger, string_0, _slice_interface__0)",
    "log._ptr_Logger.Println": "void __golang log__ptr_Logger_Println(_ptr_log_Logger, _slice_interface__0)",
    "log._ptr_Logger.Fatal": "void __golang log__ptr_Logger_Fatal(_ptr_log_Logger, _slice_interface__0)",
    "log._ptr_Logger.Fatalf": "void __golang log__ptr_Logger_Fatalf(_ptr_log_Logger, string_0, _slice_interface__0)",
    "log._ptr_Logger.Fatalln": "void __golang log__ptr_Logger_Fatalln(_ptr_log_Logger, _slice_interface__0)",
    "log._ptr_Logger.Panic": "void __golang log__ptr_Logger_Panic(_ptr_log_Logger, _slice_interface__0)",
    "log._ptr_Logger.Panicf": "void __golang log__ptr_Logger_Panicf(_ptr_log_Logger, string_0, _slice_interface__0)",
    "log._ptr_Logger.Panicln": "void __golang log__ptr_Logger_Panicln(_ptr_log_Logger, _slice_interface__0)",
    "log._ptr_Logger.Flags": "int_0 __golang log__ptr_Logger_Flags(_ptr_log_Logger)",
    "log._ptr_Logger.SetFlags": "void __golang log__ptr_Logger_SetFlags(_ptr_log_Logger, int_0)",
    "log._ptr_Logger.Prefix": "string_0 __golang log__ptr_Logger_Prefix(_ptr_log_Logger)",
    "log._ptr_Logger.SetPrefix": "void __golang log__ptr_Logger_SetPrefix(_ptr_log_Logger, string_0)",
    "log._ptr_Logger.Writer": "io_Writer_0 __golang log__ptr_Logger_Writer(_ptr_log_Logger)",
    "log._ptr_Logger.Writer.deferwrap1": "void __golang log__ptr_Logger_Writer_deferwrap1()",
    "log.Printf": "void __golang log_Printf(string format, _slice_interface_ v)",
    "log.Fatal": "void __golang log_Fatal(_slice_interface_ v)",
    "log.Fatalf": "void __golang log_Fatalf(string format, _slice_interface_ v)",
    "log.Fatalln": "void __golang log_Fatalln(_slice_interface_ v)",
    "sync_atomic._ptr_Pointer_string_.CompareAndSwap": "bool __golang sync_atomic__ptr_Pointer_string__CompareAndSwap(_ptr_atomic_Pointer_string_, _ptr_string, _ptr_string)",
    "sync_atomic._ptr_Pointer_string_.Swap": "_ptr_string __golang sync_atomic__ptr_Pointer_string__Swap(_ptr_atomic_Pointer_string_, _ptr_string)",
    "sync_atomic._ptr_Pointer_string_.Store": "void __golang sync_atomic__ptr_Pointer_string__Store(_ptr_atomic_Pointer_string_, _ptr_string)",
    "sync_atomic._ptr_Pointer_string_.Load": "_ptr_string __golang sync_atomic__ptr_Pointer_string__Load(_ptr_atomic_Pointer_string_)",
    "log_slog_internal_buffer._ptr_Buffer.Free": "void __golang log_slog_internal_buffer__ptr_Buffer_Free(_ptr_buffer_Buffer)",
    "log_slog_internal_buffer._ptr_Buffer.Reset": "void __golang log_slog_internal_buffer__ptr_Buffer_Reset(_ptr_buffer_Buffer)",
    "log_slog_internal_buffer._ptr_Buffer.WriteByte": "error_0 __golang log_slog_internal_buffer__ptr_Buffer_WriteByte(_ptr_buffer_Buffer, uint8_0)",
    "log_slog_internal_buffer._ptr_Buffer.String": "string_0 __golang log_slog_internal_buffer__ptr_Buffer_String(_ptr_buffer_Buffer)",
    "log_slog_internal_buffer._ptr_Buffer.Len": "int_0 __golang log_slog_internal_buffer__ptr_Buffer_Len(_ptr_buffer_Buffer)",
    "log_slog_internal_buffer._ptr_Buffer.SetLen": "void __golang log_slog_internal_buffer__ptr_Buffer_SetLen(_ptr_buffer_Buffer, int_0)",
    "log_slog.argsToAttrSlice": "_slice_log_slog_Attr __golang log_slog_argsToAttrSlice(_slice_interface_ args)",
    "log_slog.Attr.Equal": "bool __golang log_slog_Attr_Equal(slog_Attr, slog_Attr)",
    "log_slog.Attr.String": "string_0 __golang log_slog_Attr_String(slog_Attr)",
    "log_slog._ptr_defaultHandler.Enabled": "bool __golang log_slog__ptr_defaultHandler_Enabled(_ptr_slog_defaultHandler, context_Context_0, slog_Level)",
    "log_slog._ptr_defaultHandler.Handle": "error_0 __golang log_slog__ptr_defaultHandler_Handle(_ptr_slog_defaultHandler, context_Context_0, slog_Record)",
    "log_slog._ptr_defaultHandler.Handle.deferwrap1": "void __golang log_slog__ptr_defaultHandler_Handle_deferwrap1()",
    "log_slog._ptr_defaultHandler.WithAttrs": "slog_Handler __golang log_slog__ptr_defaultHandler_WithAttrs(_ptr_slog_defaultHandler, _slice_slog_Attr)",
    "log_slog._ptr_defaultHandler.WithGroup": "slog_Handler __golang log_slog__ptr_defaultHandler_WithGroup(_ptr_slog_defaultHandler, string_0)",
    "log_slog._ptr_commonHandler.withAttrs.deferwrap1": "void __golang log_slog__ptr_commonHandler_withAttrs_deferwrap1()",
    "log_slog._ptr_commonHandler.handle.deferwrap2": "void __golang log_slog__ptr_commonHandler_handle_deferwrap2()",
    "log_slog._ptr_commonHandler.handle.deferwrap1": "void __golang log_slog__ptr_commonHandler_handle_deferwrap1()",
    "log_slog._ptr_handleState.appendNonBuiltIns": "void __golang log_slog__ptr_handleState_appendNonBuiltIns(log_slog_handleState *s, log_slog_Record r)",
    "log_slog._ptr_handleState.free": "void __golang log_slog__ptr_handleState_free(log_slog_handleState *s)",
    "log_slog._ptr_handleState.openGroup": "void __golang log_slog__ptr_handleState_openGroup(log_slog_handleState *s, string name)",
    "log_slog._ptr_handleState.appendAttr": "bool __golang log_slog__ptr_handleState_appendAttr(log_slog_handleState *s, log_slog_Attr a)",
    "log_slog._ptr_handleState.appendError": "void __golang log_slog__ptr_handleState_appendError(log_slog_handleState *s, error err)",
    "log_slog._ptr_handleState.appendKey": "void __golang log_slog__ptr_handleState_appendKey(log_slog_handleState *s, string key)",
    "log_slog._ptr_handleState.appendString": "void __golang log_slog__ptr_handleState_appendString(log_slog_handleState *s, string str)",
    "log_slog._ptr_handleState.appendValue": "void __golang log_slog__ptr_handleState_appendValue(log_slog_handleState *s, log_slog_Value v)",
    "log_slog._ptr_handleState.appendTime": "void __golang log_slog__ptr_handleState_appendTime(log_slog_handleState *s, time_Time t)",
    "log_slog.appendRFC3339Millis": "_slice_uint8 __golang log_slog_appendRFC3339Millis(_slice_uint8 b, time_Time t)",
    "log_slog._ptr_JSONHandler.Enabled": "bool __golang log_slog__ptr_JSONHandler_Enabled(_ptr_slog_JSONHandler, context_Context_0, slog_Level)",
    "log_slog._ptr_JSONHandler.WithAttrs": "slog_Handler __golang log_slog__ptr_JSONHandler_WithAttrs(_ptr_slog_JSONHandler, _slice_slog_Attr)",
    "log_slog._ptr_JSONHandler.WithGroup": "slog_Handler __golang log_slog__ptr_JSONHandler_WithGroup(_ptr_slog_JSONHandler, string_0)",
    "log_slog._ptr_JSONHandler.Handle": "error_0 __golang log_slog__ptr_JSONHandler_Handle(_ptr_slog_JSONHandler, context_Context_0, slog_Record)",
    "log_slog.appendJSONTime": "void __golang log_slog_appendJSONTime(log_slog_handleState *s, time_Time t)",
    "log_slog.appendJSONValue": "error __golang log_slog_appendJSONValue(log_slog_handleState *s, log_slog_Value v)",
    "log_slog.appendJSONMarshal": "error __golang log_slog_appendJSONMarshal(log_slog_internal_buffer_Buffer *buf, interface_ v)",
    "log_slog.appendEscapedJSONString": "_slice_uint8 __golang log_slog_appendEscapedJSONString(_slice_uint8 buf, string s)",
    "log_slog.Level.String": "string_0 __golang log_slog_Level_String(slog_Level)",
    "log_slog._ptr_Level.UnmarshalJSON": "error_0 __golang log_slog__ptr_Level_UnmarshalJSON(_ptr_slog_Level, _slice_uint8_0)",
    "log_slog._ptr_Level.UnmarshalText": "error_0 __golang log_slog__ptr_Level_UnmarshalText(_ptr_slog_Level, _slice_uint8_0)",
    "log_slog._ptr_Level.parse": "error_0 __golang log_slog__ptr_Level_parse(_ptr_slog_Level, string_0)",
    "log_slog.Level.Level": "slog_Level __golang log_slog_Level_Level(slog_Level)",
    "log_slog._ptr_Logger.With": "log_slog_Logger *__golang log_slog__ptr_Logger_With(log_slog_Logger *l, _slice_interface_ args)",
    "log_slog._ptr_Logger.WithGroup": "log_slog_Logger *__golang log_slog__ptr_Logger_WithGroup(log_slog_Logger *l, string name)",
    "log_slog._ptr_Logger.Enabled": "bool __golang log_slog__ptr_Logger_Enabled(_ptr_slog_Logger, context_Context_0, slog_Level)",
    "log_slog._ptr_Logger.log": "void __golang log_slog__ptr_Logger_log(log_slog_Logger *l, context_Context ctx, __int64 level, string msg, _slice_interface_ args)",
    "log_slog.Record.Clone": "slog_Record __golang log_slog_Record_Clone(slog_Record)",
    "log_slog.Record.NumAttrs": "int_0 __golang log_slog_Record_NumAttrs(slog_Record)",
    "log_slog.Record.Attrs": "void __golang log_slog_Record_Attrs(slog_Record, PTR_funcslog_Attr_bool)",
    "log_slog._ptr_Record.AddAttrs": "void __golang log_slog__ptr_Record_AddAttrs(_ptr_slog_Record, _slice_slog_Attr)",
    "log_slog._ptr_Record.Add": "void __golang log_slog__ptr_Record_Add(_ptr_slog_Record, _slice_interface__0)",
    "log_slog._ptr_Source.group": "slog_Value __golang log_slog__ptr_Source_group(_ptr_slog_Source)",
    "log_slog.Record.source": "log_slog_Source *__golang log_slog_Record_source(log_slog_Record r)",
    "log_slog._ptr_TextHandler.Enabled": "bool __golang log_slog__ptr_TextHandler_Enabled(_ptr_slog_TextHandler, context_Context_0, slog_Level)",
    "log_slog._ptr_TextHandler.WithAttrs": "slog_Handler __golang log_slog__ptr_TextHandler_WithAttrs(_ptr_slog_TextHandler, _slice_slog_Attr)",
    "log_slog._ptr_TextHandler.WithGroup": "slog_Handler __golang log_slog__ptr_TextHandler_WithGroup(_ptr_slog_TextHandler, string_0)",
    "log_slog._ptr_TextHandler.Handle": "error_0 __golang log_slog__ptr_TextHandler_Handle(_ptr_slog_TextHandler, context_Context_0, slog_Record)",
    "log_slog.appendTextValue": "error __golang log_slog_appendTextValue(log_slog_handleState *s, log_slog_Value v)",
    "log_slog.needsQuoting": "bool __golang log_slog_needsQuoting(string s)",
    "log_slog.Kind.String": "string_0 __golang log_slog_Kind_String(slog_Kind)",
    "log_slog.Value.Kind": "slog_Kind __golang log_slog_Value_Kind(slog_Value)",
    "log_slog.TimeValue": "log_slog_Value __golang log_slog_TimeValue(time_Time v)",
    "log_slog.GroupValue": "log_slog_Value __golang log_slog_GroupValue(_slice_log_slog_Attr as)",
    "log_slog.AnyValue": "log_slog_Value __golang log_slog_AnyValue(interface_ v)",
    "log_slog.Value.Any": "interface__0 __golang log_slog_Value_Any(slog_Value)",
    "log_slog.Value.String": "string_0 __golang log_slog_Value_String(slog_Value)",
    "log_slog.Value.Int64": "int64_0 __golang log_slog_Value_Int64(slog_Value)",
    "log_slog.Value.Uint64": "uint64_0 __golang log_slog_Value_Uint64(slog_Value)",
    "log_slog.Value.Bool": "bool __golang log_slog_Value_Bool(slog_Value)",
    "log_slog.Value.Duration": "time_Duration __golang log_slog_Value_Duration(slog_Value)",
    "log_slog.Value.Float64": "float64_0 __golang log_slog_Value_Float64(slog_Value)",
    "log_slog.Value.Time": "time_Time_0 __golang log_slog_Value_Time(slog_Value)",
    "log_slog.Value.time": "time_Time_0 __golang log_slog_Value_time(slog_Value)",
    "log_slog.Value.LogValuer": "slog_LogValuer __golang log_slog_Value_LogValuer(slog_Value)",
    "log_slog.Value.Group": "_slice_slog_Attr __golang log_slog_Value_Group(slog_Value)",
    "log_slog.Value.Equal": "bool __golang log_slog_Value_Equal(slog_Value, slog_Value)",
    "log_slog.Value.append": "_slice_uint8_0 __golang log_slog_Value_append(slog_Value, _slice_uint8_0)",
    "log_slog.Value.Resolve": "slog_Value __golang log_slog_Value_Resolve(slog_Value)",
    "log_slog.stack": "string __golang log_slog_stack(int skip, int nFrames)",
    "slices.EqualFunc_go.shape._slice_log_slog.Attr_comma_go.shape._slice_log_slog.Attr_comma_go.shape.struct__Key_string_Value_log_slog.Value__comma_go.shape.struct__Key_string_Value_log_slog.Value__": "bool __golang slices_EqualFunc_go_shape__slice_log_slog_Attr_comma_go_shape__slice_log_slog_Attr_comma_go_shape_struct__Key_string_Value_log_slog_Value__comma_go_shape_struct__Key_string_Value_log_slog_Value__(slices_EqualFunc_go_shape__slice_log_slog_Attr_comma_go_shape__slice_log_slog_Attr_comma_go_shape_struct__Key_string_Value_log_slog_Value__comma_go_shape_struct__Key_string_Value_log_slog_Value__::_param0 s1, slices_EqualFunc_go_shape__slice_log_slog_Attr_comma_go_shape__slice_log_slog_Attr_comma_go_shape_struct__Key_string_Value_log_slog_Value__comma_go_shape_struct__Key_string_Value_log_slog_Value__::_param1 s2, slices_EqualFunc_go_shape__slice_log_slog_Attr_comma_go_shape__slice_log_slog_Attr_comma_go_shape_struct__Key_string_Value_log_slog_Value__comma_go_shape_struct__Key_string_Value_log_slog_Value__::_param2 eq)",
    "log_slog._ptr_Value.Any": "interface__0 __golang log_slog__ptr_Value_Any(_ptr_slog_Value)",
    "log_slog._ptr_Value.Bool": "bool __golang log_slog__ptr_Value_Bool(_ptr_slog_Value)",
    "log_slog._ptr_Value.Duration": "time_Duration __golang log_slog__ptr_Value_Duration(_ptr_slog_Value)",
    "log_slog._ptr_Value.Equal": "bool __golang log_slog__ptr_Value_Equal(_ptr_slog_Value, slog_Value)",
    "log_slog._ptr_Value.Float64": "float64_0 __golang log_slog__ptr_Value_Float64(_ptr_slog_Value)",
    "log_slog._ptr_Value.Group": "_slice_slog_Attr __golang log_slog__ptr_Value_Group(_ptr_slog_Value)",
    "log_slog._ptr_Value.Int64": "int64_0 __golang log_slog__ptr_Value_Int64(_ptr_slog_Value)",
    "log_slog._ptr_Value.Kind": "slog_Kind __golang log_slog__ptr_Value_Kind(_ptr_slog_Value)",
    "log_slog._ptr_Value.LogValuer": "slog_LogValuer __golang log_slog__ptr_Value_LogValuer(_ptr_slog_Value)",
    "log_slog._ptr_Value.Resolve": "slog_Value __golang log_slog__ptr_Value_Resolve(_ptr_slog_Value)",
    "log_slog._ptr_Value.String": "string_0 __golang log_slog__ptr_Value_String(_ptr_slog_Value)",
    "log_slog._ptr_Value.Time": "time_Time_0 __golang log_slog__ptr_Value_Time(_ptr_slog_Value)",
    "log_slog._ptr_Value.Uint64": "uint64_0 __golang log_slog__ptr_Value_Uint64(_ptr_slog_Value)",
    "log_slog._ptr_Kind.String": "string_0 __golang log_slog__ptr_Kind_String(_ptr_slog_Kind)",
    "log_slog._ptr_Attr.Equal": "bool __golang log_slog__ptr_Attr_Equal(_ptr_slog_Attr, slog_Attr)",
    "log_slog._ptr_Attr.String": "string_0 __golang log_slog__ptr_Attr_String(_ptr_slog_Attr)",
    "log_slog._ptr_Level.Level": "slog_Level __golang log_slog__ptr_Level_Level(_ptr_slog_Level)",
    "log_slog._ptr_Level.String": "string_0 __golang log_slog__ptr_Level_String(_ptr_slog_Level)",
    "log_slog._ptr_Record.Attrs": "void __golang log_slog__ptr_Record_Attrs(_ptr_slog_Record, PTR_funcslog_Attr_bool)",
    "log_slog._ptr_Record.Clone": "slog_Record __golang log_slog__ptr_Record_Clone(_ptr_slog_Record)",
    "log_slog._ptr_Record.NumAttrs": "int_0 __golang log_slog__ptr_Record_NumAttrs(_ptr_slog_Record)",
    "math_cmplx.Exp": "complex128 __golang math_cmplx_Exp(complex128 x)",
    "mime.WordEncoder.Encode": "string __golang mime_WordEncoder_Encode(unsigned __int8 e, string charset, string s)",
    "mime.WordEncoder.encodeWord": "string __golang mime_WordEncoder_encodeWord(unsigned __int8 e, string charset, string s)",
    "mime.WordEncoder.bEncode": "void __golang mime_WordEncoder_bEncode(unsigned __int8 e, strings_Builder *buf, string charset, string s)",
    "mime.WordEncoder.qEncode": "void __golang mime_WordEncoder_qEncode(unsigned __int8 e, strings_Builder *buf, string charset, string s)",
    "mime.writeQString": "void __golang mime_writeQString(strings_Builder *buf, string s)",
    "mime.WordEncoder.openWord": "void __golang mime_WordEncoder_openWord(unsigned __int8 e, strings_Builder *buf, string charset)",
    "mime.WordEncoder.splitWord": "void __golang mime_WordEncoder_splitWord(unsigned __int8 e, strings_Builder *buf, string charset)",
    "mime._ptr_WordDecoder.convert": "error __golang mime__ptr_WordDecoder_convert(mime_WordDecoder *d, strings_Builder *buf, string charset, _slice_uint8 content)",
    "mime.isTokenChar": "bool __golang mime_isTokenChar(int32 r)",
    "mime.FormatMediaType": "string __golang mime_FormatMediaType(string t, map_string_string param)",
    "mime.checkMediaTypeDisposition": "error __golang mime_checkMediaTypeDisposition(string s)",
    "mime.isNotTokenChar": "bool __golang mime_isNotTokenChar(int32 r)",
    "mime.setMimeTypes": "void __golang mime_setMimeTypes(map_string_string lowerExt, map_string_string mixExt)",
    "mime.setMimeTypes.deferwrap1": "void __golang mime_setMimeTypes_deferwrap1()",
    "mime.initMime": "void __golang mime_initMime()",
    "mime.TypeByExtension": "string __golang mime_TypeByExtension(string ext)",
    "mime.setExtensionType.deferwrap1": "void __golang mime_setExtensionType_deferwrap1()",
    "mime.loadMimeGlobsFile.deferwrap1": "void __golang mime_loadMimeGlobsFile_deferwrap1()",
    "mime.loadMimeFile": "void __golang mime_loadMimeFile(string filename)",
    "mime.loadMimeFile.deferwrap1": "void __golang mime_loadMimeFile_deferwrap1()",
    "mime.initMimeUnix": "void __golang mime_initMimeUnix()",
    "net_textproto.MIMEHeader.Add": "void __golang net_textproto_MIMEHeader_Add(textproto_MIMEHeader, string_0, string_0)",
    "net_textproto.MIMEHeader.Set": "void __golang net_textproto_MIMEHeader_Set(textproto_MIMEHeader, string_0, string_0)",
    "net_textproto.MIMEHeader.Get": "string_0 __golang net_textproto_MIMEHeader_Get(textproto_MIMEHeader, string_0)",
    "net_textproto.MIMEHeader.Values": "_slice_string_0 __golang net_textproto_MIMEHeader_Values(textproto_MIMEHeader, string_0)",
    "net_textproto.MIMEHeader.Del": "void __golang net_textproto_MIMEHeader_Del(textproto_MIMEHeader, string_0)",
    "net_textproto._ptr_Pipeline.Next": "uint_0 __golang net_textproto__ptr_Pipeline_Next(_ptr_textproto_Pipeline)",
    "net_textproto._ptr_Pipeline.StartRequest": "void __golang net_textproto__ptr_Pipeline_StartRequest(_ptr_textproto_Pipeline, uint_0)",
    "net_textproto._ptr_Pipeline.EndRequest": "void __golang net_textproto__ptr_Pipeline_EndRequest(_ptr_textproto_Pipeline, uint_0)",
    "net_textproto._ptr_Pipeline.StartResponse": "void __golang net_textproto__ptr_Pipeline_StartResponse(_ptr_textproto_Pipeline, uint_0)",
    "net_textproto._ptr_Pipeline.EndResponse": "void __golang net_textproto__ptr_Pipeline_EndResponse(_ptr_textproto_Pipeline, uint_0)",
    "net_textproto._ptr_sequencer.Start": "void __golang net_textproto__ptr_sequencer_Start(_ptr_textproto_sequencer, uint_0)",
    "net_textproto._ptr_sequencer.End": "void __golang net_textproto__ptr_sequencer_End(_ptr_textproto_sequencer, uint_0)",
    "net_textproto._ptr_Reader.skipSpace": "int_0 __golang net_textproto__ptr_Reader_skipSpace(_ptr_textproto_Reader)",
    "net_textproto._ptr_Reader.DotReader": "io_Reader_0 __golang net_textproto__ptr_Reader_DotReader(_ptr_textproto_Reader)",
    "net_textproto.mustHaveFieldNameColon": "error __golang net_textproto_mustHaveFieldNameColon(_slice_uint8 line)",
    "net_textproto._ptr_Reader.upcomingHeaderKeys": "int_0 __golang net_textproto__ptr_Reader_upcomingHeaderKeys(_ptr_textproto_Reader)",
    "net_textproto.CanonicalMIMEHeaderKey": "string __golang net_textproto_CanonicalMIMEHeaderKey(string s)",
    "net_textproto.initCommonHeader": "void __golang net_textproto_initCommonHeader()",
    "net_textproto._ptr_Error.Error": "string_0 __golang net_textproto__ptr_Error_Error(_ptr_textproto_Error)",
    "net_textproto.ProtocolError.Error": "string_0 __golang net_textproto_ProtocolError_Error(textproto_ProtocolError)",
    "net_textproto.NewConn": "net_textproto_Conn *__golang net_textproto_NewConn(io_ReadWriteCloser conn)",
    "net_textproto._ptr_Conn.Close": "error_0 __golang net_textproto__ptr_Conn_Close(_ptr_textproto_Conn)",
    "net_textproto._ptr_Writer.PrintfLine": "error_0 __golang net_textproto__ptr_Writer_PrintfLine(_ptr_textproto_Writer, string_0, _slice_interface__0)",
    "net_textproto._ptr_Writer.DotWriter": "io_WriteCloser_0 __golang net_textproto__ptr_Writer_DotWriter(_ptr_textproto_Writer)",
    "net_textproto._ptr_dotWriter.Close": "error_0 __golang net_textproto__ptr_dotWriter_Close(_ptr_textproto_dotWriter)",
    "net_textproto._ptr_MIMEHeader.Add": "void __golang net_textproto__ptr_MIMEHeader_Add(_ptr_textproto_MIMEHeader, string_0, string_0)",
    "net_textproto._ptr_MIMEHeader.Del": "void __golang net_textproto__ptr_MIMEHeader_Del(_ptr_textproto_MIMEHeader, string_0)",
    "net_textproto._ptr_MIMEHeader.Get": "string_0 __golang net_textproto__ptr_MIMEHeader_Get(_ptr_textproto_MIMEHeader, string_0)",
    "net_textproto._ptr_MIMEHeader.Set": "void __golang net_textproto__ptr_MIMEHeader_Set(_ptr_textproto_MIMEHeader, string_0, string_0)",
    "net_textproto._ptr_MIMEHeader.Values": "_slice_string_0 __golang net_textproto__ptr_MIMEHeader_Values(_ptr_textproto_MIMEHeader, string_0)",
    "net_textproto._ptr_ProtocolError.Error": "string_0 __golang net_textproto__ptr_ProtocolError_Error(_ptr_textproto_ProtocolError)",
    "net_textproto._ptr_Conn.DotReader": "io_Reader_0 __golang net_textproto__ptr_Conn_DotReader(_ptr_textproto_Conn)",
    "net_textproto._ptr_Conn.DotWriter": "io_WriteCloser_0 __golang net_textproto__ptr_Conn_DotWriter(_ptr_textproto_Conn)",
    "net_textproto._ptr_Conn.EndRequest": "void __golang net_textproto__ptr_Conn_EndRequest(_ptr_textproto_Conn, uint_0)",
    "net_textproto._ptr_Conn.EndResponse": "void __golang net_textproto__ptr_Conn_EndResponse(_ptr_textproto_Conn, uint_0)",
    "net_textproto._ptr_Conn.Next": "uint_0 __golang net_textproto__ptr_Conn_Next(_ptr_textproto_Conn)",
    "net_textproto._ptr_Conn.PrintfLine": "error_0 __golang net_textproto__ptr_Conn_PrintfLine(_ptr_textproto_Conn, string_0, _slice_interface__0)",
    "net_textproto._ptr_Conn.StartRequest": "void __golang net_textproto__ptr_Conn_StartRequest(_ptr_textproto_Conn, uint_0)",
    "net_textproto._ptr_Conn.StartResponse": "void __golang net_textproto__ptr_Conn_StartResponse(_ptr_textproto_Conn, uint_0)",
    "mime_quotedprintable.isQPDiscardWhitespace": "bool __golang mime_quotedprintable_isQPDiscardWhitespace(int32 r)",
    "mime_quotedprintable._ptr_Writer.Close": "error_0 __golang mime_quotedprintable__ptr_Writer_Close(_ptr_quotedprintable_Writer)",
    "mime_quotedprintable._ptr_Writer.write": "error_0 __golang mime_quotedprintable__ptr_Writer_write(_ptr_quotedprintable_Writer, _slice_uint8_0)",
    "mime_quotedprintable._ptr_Writer.encode": "error_0 __golang mime_quotedprintable__ptr_Writer_encode(_ptr_quotedprintable_Writer, uint8_0)",
    "mime_quotedprintable._ptr_Writer.checkLastByte": "error_0 __golang mime_quotedprintable__ptr_Writer_checkLastByte(_ptr_quotedprintable_Writer)",
    "mime_quotedprintable._ptr_Writer.insertSoftLineBreak": "error_0 __golang mime_quotedprintable__ptr_Writer_insertSoftLineBreak(_ptr_quotedprintable_Writer)",
    "mime_quotedprintable._ptr_Writer.flush": "error_0 __golang mime_quotedprintable__ptr_Writer_flush(_ptr_quotedprintable_Writer)",
    "mime_multipart._ptr_Form.RemoveAll": "error_0 __golang mime_multipart__ptr_Form_RemoveAll(_ptr_multipart_Form)",
    "mime_multipart.sectionReadCloser.Close": "error_0 __golang mime_multipart_sectionReadCloser_Close(multipart_sectionReadCloser)",
    "mime_multipart._ptr_Part.FormName": "string_0 __golang mime_multipart__ptr_Part_FormName(_ptr_multipart_Part)",
    "mime_multipart._ptr_Part.FileName": "string_0 __golang mime_multipart__ptr_Part_FileName(_ptr_multipart_Part)",
    "mime_multipart._ptr_Part.parseContentDisposition": "void __golang mime_multipart__ptr_Part_parseContentDisposition(_ptr_multipart_Part)",
    "mime_multipart.NewReader": "mime_multipart_Reader *__golang mime_multipart_NewReader(io_Reader r, string boundary)",
    "mime_multipart._ptr_Part.populateHeaders": "error __golang mime_multipart__ptr_Part_populateHeaders(mime_multipart_Part *p, int64 maxMIMEHeaderSize, int64 maxMIMEHeaders)",
    "mime_multipart.scanUntilBoundary": "void __golang mime_multipart_scanUntilBoundary(_slice_uint8 buf, int64 total, error readErr, _slice_uint8 dashBoundary, int _r0, error _r1, _slice_uint8 nlDashBoundary)",
    "mime_multipart._ptr_Part.Close": "error_0 __golang mime_multipart__ptr_Part_Close(_ptr_multipart_Part)",
    "mime_multipart.maxMIMEHeaders": "int64 __golang mime_multipart_maxMIMEHeaders()",
    "mime_multipart._ptr_Reader.isFinalBoundary": "bool __golang mime_multipart__ptr_Reader_isFinalBoundary(_ptr_multipart_Reader, _slice_uint8_0)",
    "mime_multipart._ptr_Reader.isBoundaryDelimiterLine": "bool __golang mime_multipart__ptr_Reader_isBoundaryDelimiterLine(_ptr_multipart_Reader, _slice_uint8_0)",
    "mime_multipart._ptr_Writer.Boundary": "string_0 __golang mime_multipart__ptr_Writer_Boundary(_ptr_multipart_Writer)",
    "mime_multipart._ptr_Writer.SetBoundary": "error_0 __golang mime_multipart__ptr_Writer_SetBoundary(_ptr_multipart_Writer, string_0)",
    "mime_multipart._ptr_Writer.FormDataContentType": "string_0 __golang mime_multipart__ptr_Writer_FormDataContentType(_ptr_multipart_Writer)",
    "mime_multipart.randomBoundary": "string __golang mime_multipart_randomBoundary()",
    "mime_multipart._ptr_Writer.WriteField": "error_0 __golang mime_multipart__ptr_Writer_WriteField(_ptr_multipart_Writer, string_0, string_0)",
    "mime_multipart._ptr_Writer.Close": "error_0 __golang mime_multipart__ptr_Writer_Close(_ptr_multipart_Writer)",
    "mime_multipart._ptr_sectionReadCloser.Close": "error_0 __golang mime_multipart__ptr_sectionReadCloser_Close(_ptr_multipart_sectionReadCloser)",
    "mime_multipart.sectionReadCloser.Size": "int64_0 __golang mime_multipart_sectionReadCloser_Size(multipart_sectionReadCloser)",
    "mime_multipart._ptr_sectionReadCloser.Size": "int64_0 __golang mime_multipart__ptr_sectionReadCloser_Size(_ptr_multipart_sectionReadCloser)",
    "net_http_httptrace.WithClientTrace": "context_Context __golang net_http_httptrace_WithClientTrace(context_Context ctx, net_http_httptrace_ClientTrace *trace)",
    "net_http_httptrace._ptr_ClientTrace.compose": "void __golang net_http_httptrace__ptr_ClientTrace_compose(net_http_httptrace_ClientTrace *t, net_http_httptrace_ClientTrace *old)",
    "vendor_golang.org_x_text_secure_bidirule.DirectionString": "__int64 __golang vendor_golang_org_x_text_secure_bidirule_DirectionString(string s)",
    "vendor_golang.org_x_text_secure_bidirule.ValidString": "bool __golang vendor_golang_org_x_text_secure_bidirule_ValidString(string s)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.doFlush": "bool __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_doFlush(_ptr_norm_reorderBuffer)",
    "vendor_golang.org_x_text_unicode_norm.appendFlush": "bool __golang vendor_golang_org_x_text_unicode_norm_appendFlush(vendor_golang_org_x_text_unicode_norm_reorderBuffer *rb)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.insertFlush": "void __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_insertFlush(vendor_golang_org_x_text_unicode_norm_reorderBuffer *rb, vendor_golang_org_x_text_unicode_norm_input src, vendor_golang_org_x_text_unicode_norm_Properties info, __int64 _r0, int i)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.insertDecomposed": "__int64 __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_insertDecomposed(vendor_golang_org_x_text_unicode_norm_reorderBuffer *rb, _slice_uint8 dcomp)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.appendRune": "void __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_appendRune(_ptr_norm_reorderBuffer, int32_0)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.assignRune": "void __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_assignRune(vendor_golang_org_x_text_unicode_norm_reorderBuffer *rb, int pos, int32 r)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.runeAt": "int32 __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_runeAt(vendor_golang_org_x_text_unicode_norm_reorderBuffer *rb, int n)",
    "vendor_golang.org_x_text_unicode_norm.decomposeHangul": "int __golang vendor_golang_org_x_text_unicode_norm_decomposeHangul(_slice_uint8 buf, int32 r)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.decomposeHangul": "void __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_decomposeHangul(_ptr_norm_reorderBuffer, int32_0)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.combineHangul": "void __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_combineHangul(vendor_golang_org_x_text_unicode_norm_reorderBuffer *rb, int s, int i, int k)",
    "vendor_golang.org_x_text_unicode_norm._ptr_reorderBuffer.compose": "void __golang vendor_golang_org_x_text_unicode_norm__ptr_reorderBuffer_compose(_ptr_norm_reorderBuffer)",
    "vendor_golang.org_x_text_unicode_norm.buildRecompMap": "void __golang vendor_golang_org_x_text_unicode_norm_buildRecompMap()",
    "vendor_golang.org_x_text_unicode_norm._ptr_input.hangul": "int32 __golang vendor_golang_org_x_text_unicode_norm__ptr_input_hangul(vendor_golang_org_x_text_unicode_norm_input *in, int p)",
    "vendor_golang.org_x_text_unicode_norm.nextHangul": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_nextHangul(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.nextDone": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_nextDone(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.nextMulti": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_nextMulti(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.nextMultiNorm": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_nextMultiNorm(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.nextDecomposed": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_nextDecomposed(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.doNormDecomposed": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_doNormDecomposed(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.nextCGJDecompose": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_nextCGJDecompose(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.nextComposed": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_nextComposed(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.doNormComposed": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_doNormComposed(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.nextCGJCompose": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_nextCGJCompose(vendor_golang_org_x_text_unicode_norm_Iter *i)",
    "vendor_golang.org_x_text_unicode_norm.Form.Bytes": "_slice_uint8_0 __golang vendor_golang_org_x_text_unicode_norm_Form_Bytes(norm_Form, _slice_uint8_0)",
    "vendor_golang.org_x_text_unicode_norm.Form.String": "string_0 __golang vendor_golang_org_x_text_unicode_norm_Form_String(norm_Form, string_0)",
    "vendor_golang.org_x_text_unicode_norm.Form.IsNormalString": "bool __golang vendor_golang_org_x_text_unicode_norm_Form_IsNormalString(norm_Form, string_0)",
    "vendor_golang.org_x_text_unicode_norm.doAppendInner": "_slice_uint8 __golang vendor_golang_org_x_text_unicode_norm_doAppendInner(vendor_golang_org_x_text_unicode_norm_reorderBuffer *rb, int p)",
    "vendor_golang.org_x_text_unicode_norm.decomposeSegment": "int __golang vendor_golang_org_x_text_unicode_norm_decomposeSegment(vendor_golang_org_x_text_unicode_norm_reorderBuffer *rb, int sp_0, bool atEOF)",
    "vendor_golang.org_x_text_unicode_norm._ptr_nfcTrie.lookupValue": "uint16 __golang vendor_golang_org_x_text_unicode_norm__ptr_nfcTrie_lookupValue(vendor_golang_org_x_text_unicode_norm_nfcTrie *t, uint32 n, uint8 b)",
    "vendor_golang.org_x_text_unicode_norm._ptr_nfkcTrie.lookupValue": "uint16 __golang vendor_golang_org_x_text_unicode_norm__ptr_nfkcTrie_lookupValue(vendor_golang_org_x_text_unicode_norm_nfkcTrie *t, uint32 n, uint8 b)",
    "vendor_golang.org_x_text_unicode_norm._ptr_sparseBlocks.lookup": "uint16 __golang vendor_golang_org_x_text_unicode_norm__ptr_sparseBlocks_lookup(vendor_golang_org_x_text_unicode_norm_sparseBlocks *t, uint32 n, uint8 b)",
    "vendor_golang.org_x_net_idna.labelError.Error": "string_0 __golang vendor_golang_org_x_net_idna_labelError_Error(idna_labelError)",
    "vendor_golang.org_x_net_idna.runeError.Error": "string_0 __golang vendor_golang_org_x_net_idna_runeError_Error(idna_runeError)",
    "vendor_golang.org_x_net_idna.info.isBidi": "bool __golang vendor_golang_org_x_net_idna_info_isBidi(unsigned __int16 c, string s)",
    "vendor_golang.org_x_net_idna._ptr_labelIter.label": "string __golang vendor_golang_org_x_net_idna__ptr_labelIter_label(vendor_golang_org_x_net_idna_labelIter *l)",
    "vendor_golang.org_x_net_idna._ptr_labelIter.set": "void __golang vendor_golang_org_x_net_idna__ptr_labelIter_set(vendor_golang_org_x_net_idna_labelIter *l, string s)",
    "vendor_golang.org_x_net_idna.validateFromPunycode": "error __golang vendor_golang_org_x_net_idna_validateFromPunycode(vendor_golang_org_x_net_idna_Profile *p, string s)",
    "vendor_golang.org_x_net_idna._ptr_Profile.validateLabel": "error __golang vendor_golang_org_x_net_idna__ptr_Profile_validateLabel(vendor_golang_org_x_net_idna_Profile *p, string s)",
    "vendor_golang.org_x_net_idna._ptr_idnaTrie.lookupValue": "uint16 __golang vendor_golang_org_x_net_idna__ptr_idnaTrie_lookupValue(vendor_golang_org_x_net_idna_idnaTrie *t, uint32 n, uint8 b)",
    "vendor_golang.org_x_net_idna._ptr_sparseBlocks.lookup": "uint16 __golang vendor_golang_org_x_net_idna__ptr_sparseBlocks_lookup(vendor_golang_org_x_net_idna_sparseBlocks *t, uint32 n, uint8 b)",
    "vendor_golang.org_x_net_idna._ptr_labelError.Error": "string_0 __golang vendor_golang_org_x_net_idna__ptr_labelError_Error(_ptr_idna_labelError)",
    "vendor_golang.org_x_net_idna._ptr_runeError.Error": "string_0 __golang vendor_golang_org_x_net_idna__ptr_runeError_Error(_ptr_idna_runeError)",
    "vendor_golang.org_x_net_http_httpguts.ValidTrailerHeader": "bool __golang vendor_golang_org_x_net_http_httpguts_ValidTrailerHeader(string name)",
    "vendor_golang.org_x_net_http_httpguts.headerValueContainsToken": "bool __golang vendor_golang_org_x_net_http_httpguts_headerValueContainsToken(string v, string token)",
    "vendor_golang.org_x_net_http2_hpack.NewEncoder": "vendor_golang_org_x_net_http2_hpack_Encoder *__golang vendor_golang_org_x_net_http2_hpack_NewEncoder(io_Writer w)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Encoder.WriteField": "error_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_Encoder_WriteField(_ptr_hpack_Encoder, hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Encoder.SetMaxDynamicTableSize": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_Encoder_SetMaxDynamicTableSize(_ptr_hpack_Encoder, uint32_0)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Encoder.MaxDynamicTableSize": "uint32_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_Encoder_MaxDynamicTableSize(_ptr_hpack_Encoder)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Encoder.SetMaxDynamicTableSizeLimit": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_Encoder_SetMaxDynamicTableSizeLimit(_ptr_hpack_Encoder, uint32_0)",
    "vendor_golang.org_x_net_http2_hpack.appendNewName": "_slice_uint8 __golang vendor_golang_org_x_net_http2_hpack_appendNewName(_slice_uint8 dst, vendor_golang_org_x_net_http2_hpack_HeaderField f, bool indexing)",
    "vendor_golang.org_x_net_http2_hpack.appendIndexedName": "void __golang vendor_golang_org_x_net_http2_hpack_appendIndexedName(_slice_uint8 dst, bool indexing, _slice_uint8 _r0, vendor_golang_org_x_net_http2_hpack_HeaderField f, uint64 i)",
    "vendor_golang.org_x_net_http2_hpack.appendHpackString": "_slice_uint8 __golang vendor_golang_org_x_net_http2_hpack_appendHpackString(_slice_uint8 dst, string s)",
    "vendor_golang.org_x_net_http2_hpack.DecodingError.Error": "string_0 __golang vendor_golang_org_x_net_http2_hpack_DecodingError_Error(hpack_DecodingError)",
    "vendor_golang.org_x_net_http2_hpack.InvalidIndexError.Error": "string_0 __golang vendor_golang_org_x_net_http2_hpack_InvalidIndexError_Error(hpack_InvalidIndexError)",
    "vendor_golang.org_x_net_http2_hpack.HeaderField.IsPseudo": "bool __golang vendor_golang_org_x_net_http2_hpack_HeaderField_IsPseudo(hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack.HeaderField.String": "string_0 __golang vendor_golang_org_x_net_http2_hpack_HeaderField_String(hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack.HeaderField.Size": "uint32_0 __golang vendor_golang_org_x_net_http2_hpack_HeaderField_Size(hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack.NewDecoder": "vendor_golang_org_x_net_http2_hpack_Decoder *__golang vendor_golang_org_x_net_http2_hpack_NewDecoder(uint32 maxDynamicTableSize, funcvendor_golang_org_x_net_http2_hpack_HeaderField emitFunc)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.SetMaxStringLength": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_SetMaxStringLength(_ptr_hpack_Decoder, int_0)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.SetEmitFunc": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_SetEmitFunc(_ptr_hpack_Decoder, PTR_funchpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.SetEmitEnabled": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_SetEmitEnabled(_ptr_hpack_Decoder, bool)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.EmitEnabled": "bool __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_EmitEnabled(_ptr_hpack_Decoder)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.SetMaxDynamicTableSize": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_SetMaxDynamicTableSize(_ptr_hpack_Decoder, uint32_0)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.SetAllowedMaxDynamicTableSize": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_SetAllowedMaxDynamicTableSize(_ptr_hpack_Decoder, uint32_0)",
    "vendor_golang.org_x_net_http2_hpack._ptr_dynamicTable.add": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_dynamicTable_add(_ptr_hpack_dynamicTable, hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack._ptr_dynamicTable.evict": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_dynamicTable_evict(_ptr_hpack_dynamicTable)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.Close": "error_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_Close(_ptr_hpack_Decoder)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.parseHeaderFieldRepr": "error_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_parseHeaderFieldRepr(_ptr_hpack_Decoder)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.parseFieldIndexed": "error_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_parseFieldIndexed(_ptr_hpack_Decoder)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.parseFieldLiteral": "error __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_parseFieldLiteral(vendor_golang_org_x_net_http2_hpack_Decoder *d, uint8 n, __int64 it)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.callEmit": "error_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_callEmit(_ptr_hpack_Decoder, hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack._ptr_Decoder.parseDynamicTableSizeUpdate": "error_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_Decoder_parseDynamicTableSizeUpdate(_ptr_hpack_Decoder)",
    "vendor_golang.org_x_net_http2_hpack.huffmanDecode": "error __golang vendor_golang_org_x_net_http2_hpack_huffmanDecode(bytes_Buffer *buf, int maxLen, _slice_uint8 v)",
    "vendor_golang.org_x_net_http2_hpack.buildRootHuffmanNode": "void __golang vendor_golang_org_x_net_http2_hpack_buildRootHuffmanNode()",
    "vendor_golang.org_x_net_http2_hpack.AppendHuffmanString": "_slice_uint8 __golang vendor_golang_org_x_net_http2_hpack_AppendHuffmanString(_slice_uint8 dst, string s)",
    "vendor_golang.org_x_net_http2_hpack._ptr_headerFieldTable.len": "int_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_headerFieldTable_len(_ptr_hpack_headerFieldTable)",
    "vendor_golang.org_x_net_http2_hpack._ptr_headerFieldTable.evictOldest": "void __golang vendor_golang_org_x_net_http2_hpack__ptr_headerFieldTable_evictOldest(_ptr_hpack_headerFieldTable, int_0)",
    "vendor_golang.org_x_net_http2_hpack._ptr_headerFieldTable.idToIndex": "uint64_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_headerFieldTable_idToIndex(_ptr_hpack_headerFieldTable, uint64_0)",
    "vendor_golang.org_x_net_http2_hpack._ptr_DecodingError.Error": "string_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_DecodingError_Error(_ptr_hpack_DecodingError)",
    "vendor_golang.org_x_net_http2_hpack._ptr_HeaderField.IsPseudo": "bool __golang vendor_golang_org_x_net_http2_hpack__ptr_HeaderField_IsPseudo(_ptr_hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack._ptr_HeaderField.Size": "uint32_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_HeaderField_Size(_ptr_hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack._ptr_HeaderField.String": "string_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_HeaderField_String(_ptr_hpack_HeaderField)",
    "vendor_golang.org_x_net_http2_hpack._ptr_InvalidIndexError.Error": "string_0 __golang vendor_golang_org_x_net_http2_hpack__ptr_InvalidIndexError_Error(_ptr_hpack_InvalidIndexError)",
    "net_http_internal.NewChunkedReader": "io_Reader __golang net_http_internal_NewChunkedReader(io_Reader r)",
    "net_http_internal._ptr_chunkedReader.beginChunk": "void __golang net_http_internal__ptr_chunkedReader_beginChunk(_ptr_internal_chunkedReader)",
    "net_http_internal._ptr_chunkedReader.chunkHeaderAvailable": "bool __golang net_http_internal__ptr_chunkedReader_chunkHeaderAvailable(_ptr_internal_chunkedReader)",
    "net_http_internal._ptr_chunkedWriter.Close": "error_0 __golang net_http_internal__ptr_chunkedWriter_Close(_ptr_internal_chunkedWriter)",
    "net_http_internal.FlushAfterChunkWriter.Available": "int_0 __golang net_http_internal_FlushAfterChunkWriter_Available(internal_FlushAfterChunkWriter)",
    "net_http_internal._ptr_FlushAfterChunkWriter.Available": "int_0 __golang net_http_internal__ptr_FlushAfterChunkWriter_Available(_ptr_internal_FlushAfterChunkWriter)",
    "net_http_internal.FlushAfterChunkWriter.AvailableBuffer": "_slice_uint8_0 __golang net_http_internal_FlushAfterChunkWriter_AvailableBuffer(internal_FlushAfterChunkWriter)",
    "net_http_internal._ptr_FlushAfterChunkWriter.AvailableBuffer": "_slice_uint8_0 __golang net_http_internal__ptr_FlushAfterChunkWriter_AvailableBuffer(_ptr_internal_FlushAfterChunkWriter)",
    "net_http_internal.FlushAfterChunkWriter.Buffered": "int_0 __golang net_http_internal_FlushAfterChunkWriter_Buffered(internal_FlushAfterChunkWriter)",
    "net_http_internal._ptr_FlushAfterChunkWriter.Buffered": "int_0 __golang net_http_internal__ptr_FlushAfterChunkWriter_Buffered(_ptr_internal_FlushAfterChunkWriter)",
    "net_http_internal.FlushAfterChunkWriter.Flush": "error_0 __golang net_http_internal_FlushAfterChunkWriter_Flush(internal_FlushAfterChunkWriter)",
    "net_http_internal._ptr_FlushAfterChunkWriter.Flush": "error_0 __golang net_http_internal__ptr_FlushAfterChunkWriter_Flush(_ptr_internal_FlushAfterChunkWriter)",
    "net_http_internal.FlushAfterChunkWriter.Reset": "void __golang net_http_internal_FlushAfterChunkWriter_Reset(internal_FlushAfterChunkWriter, io_Writer_0)",
    "net_http_internal._ptr_FlushAfterChunkWriter.Reset": "void __golang net_http_internal__ptr_FlushAfterChunkWriter_Reset(_ptr_internal_FlushAfterChunkWriter, io_Writer_0)",
    "net_http_internal.FlushAfterChunkWriter.Size": "int_0 __golang net_http_internal_FlushAfterChunkWriter_Size(internal_FlushAfterChunkWriter)",
    "net_http_internal._ptr_FlushAfterChunkWriter.Size": "int_0 __golang net_http_internal__ptr_FlushAfterChunkWriter_Size(_ptr_internal_FlushAfterChunkWriter)",
    "net_http_internal.FlushAfterChunkWriter.WriteByte": "error_0 __golang net_http_internal_FlushAfterChunkWriter_WriteByte(internal_FlushAfterChunkWriter, uint8_0)",
    "net_http_internal._ptr_FlushAfterChunkWriter.WriteByte": "error_0 __golang net_http_internal__ptr_FlushAfterChunkWriter_WriteByte(_ptr_internal_FlushAfterChunkWriter, uint8_0)",
    "vendor_golang.org_x_net_http_httpproxy.FromEnvironment": "vendor_golang_org_x_net_http_httpproxy_Config *__golang vendor_golang_org_x_net_http_httpproxy_FromEnvironment()",
    "vendor_golang.org_x_net_http_httpproxy._ptr_config.useProxy": "bool __golang vendor_golang_org_x_net_http_httpproxy__ptr_config_useProxy(_ptr_httpproxy_config, string_0)",
    "vendor_golang.org_x_net_http_httpproxy.canonicalAddr": "string __golang vendor_golang_org_x_net_http_httpproxy_canonicalAddr(net_url_URL *url)",
    "vendor_golang.org_x_net_http_httpproxy.allMatch.match": "bool __golang vendor_golang_org_x_net_http_httpproxy_allMatch_match(httpproxy_allMatch, string_0, string_0, net_IP_0)",
    "vendor_golang.org_x_net_http_httpproxy.cidrMatch.match": "bool __golang vendor_golang_org_x_net_http_httpproxy_cidrMatch_match(httpproxy_cidrMatch, string_0, string_0, net_IP_0)",
    "vendor_golang.org_x_net_http_httpproxy.ipMatch.match": "bool __golang vendor_golang_org_x_net_http_httpproxy_ipMatch_match(httpproxy_ipMatch, string_0, string_0, net_IP_0)",
    "vendor_golang.org_x_net_http_httpproxy.domainMatch.match": "bool __golang vendor_golang_org_x_net_http_httpproxy_domainMatch_match(httpproxy_domainMatch, string_0, string_0, net_IP_0)",
    "vendor_golang.org_x_net_http_httpproxy._ptr_allMatch.match": "bool __golang vendor_golang_org_x_net_http_httpproxy__ptr_allMatch_match(_ptr_httpproxy_allMatch, string_0, string_0, net_IP_0)",
    "vendor_golang.org_x_net_http_httpproxy._ptr_cidrMatch.match": "bool __golang vendor_golang_org_x_net_http_httpproxy__ptr_cidrMatch_match(_ptr_httpproxy_cidrMatch, string_0, string_0, net_IP_0)",
    "vendor_golang.org_x_net_http_httpproxy._ptr_ipMatch.match": "bool __golang vendor_golang_org_x_net_http_httpproxy__ptr_ipMatch_match(_ptr_httpproxy_ipMatch, string_0, string_0, net_IP_0)",
    "vendor_golang.org_x_net_http_httpproxy._ptr_domainMatch.match": "bool __golang vendor_golang_org_x_net_http_httpproxy__ptr_domainMatch_match(_ptr_httpproxy_domainMatch, string_0, string_0, net_IP_0)",
    "net_http.refererForURL": "string __golang net_http_refererForURL(net_url_URL *lastReq, net_url_URL *newReq, string explicitRef)",
    "net_http._ptr_Client.deadline": "time_Time_0 __golang net_http__ptr_Client_deadline(_ptr_http_Client)",
    "net_http.timeBeforeContextDeadline": "bool __golang net_http_timeBeforeContextDeadline(time_Time t, context_Context ctx)",
    "net_http.knownRoundTripperImpl": "bool __golang net_http_knownRoundTripperImpl(net_http_RoundTripper rt, net_http_Request *req)",
    "net_http.alwaysFalse": "bool __golang net_http_alwaysFalse()",
    "net_http.urlErrorOp": "string __golang net_http_urlErrorOp(string method)",
    "net_http._ptr_Client.makeHeadersCopier": "func_ptr_net_http_Request __golang net_http__ptr_Client_makeHeadersCopier(net_http_Client *c, net_http_Request *ireq)",
    "net_http.defaultCheckRedirect": "error __golang net_http_defaultCheckRedirect(net_http_Request *req, _slice__ptr_net_http_Request via)",
    "net_http._ptr_cancelTimerBody.Close": "error_0 __golang net_http__ptr_cancelTimerBody_Close(_ptr_http_cancelTimerBody)",
    "net_http.shouldCopyHeaderOnRedirect": "bool __golang net_http_shouldCopyHeaderOnRedirect(string headerKey, net_url_URL *initial, net_url_URL *dest)",
    "net_http.isDomainOrSubdomain": "bool __golang net_http_isDomainOrSubdomain(string sub, string parent)",
    "net_http.stripPassword": "string __golang net_http_stripPassword(net_url_URL *u)",
    "net_http.cloneURLValues": "net_url_Values __golang net_http_cloneURLValues(net_url_Values v)",
    "net_http.cloneMultipartForm": "mime_multipart_Form *__golang net_http_cloneMultipartForm(mime_multipart_Form *f)",
    "net_http.cloneMultipartFileHeader": "mime_multipart_FileHeader *__golang net_http_cloneMultipartFileHeader(mime_multipart_FileHeader *fh)",
    "net_http.cloneOrMakeHeader": "net_http_Header __golang net_http_cloneOrMakeHeader(net_http_Header hdr)",
    "net_http.readSetCookies": "_slice__ptr_net_http_Cookie __golang net_http_readSetCookies(net_http_Header h)",
    "net_http._ptr_Cookie.String": "string_0 __golang net_http__ptr_Cookie_String(_ptr_http_Cookie)",
    "net_http._ptr_Cookie.Valid": "error_0 __golang net_http__ptr_Cookie_Valid(_ptr_http_Cookie)",
    "net_http.readCookies": "_slice__ptr_net_http_Cookie __golang net_http_readCookies(net_http_Header h, string filter)",
    "net_http.validCookieDomain": "bool __golang net_http_validCookieDomain(string v)",
    "net_http.isCookieDomainName": "bool __golang net_http_isCookieDomainName(string s)",
    "net_http.sanitizeCookieValue": "string __golang net_http_sanitizeCookieValue(string v)",
    "net_http.validCookieValueByte": "bool __golang net_http_validCookieValueByte(uint8 b)",
    "net_http.validCookiePathByte": "bool __golang net_http_validCookiePathByte(uint8 b)",
    "net_http.sanitizeOrWarn": "string __golang net_http_sanitizeOrWarn(string fieldName, funcuint8_bool valid, string v)",
    "net_http.mapOpenError": "error __golang net_http_mapOpenError(error originalErr, string name, int32 sep, funcstring_io_fs_FileInfo_comma_error stat)",
    "net_http.fileInfoDirs.len": "int_0 __golang net_http_fileInfoDirs_len(http_fileInfoDirs)",
    "net_http.fileInfoDirs.isDir": "bool __golang net_http_fileInfoDirs_isDir(http_fileInfoDirs, int_0)",
    "net_http.fileInfoDirs.name": "string_0 __golang net_http_fileInfoDirs_name(http_fileInfoDirs, int_0)",
    "net_http.dirEntryDirs.len": "int_0 __golang net_http_dirEntryDirs_len(http_dirEntryDirs)",
    "net_http.dirEntryDirs.isDir": "bool __golang net_http_dirEntryDirs_isDir(http_dirEntryDirs, int_0)",
    "net_http.dirEntryDirs.name": "string_0 __golang net_http_dirEntryDirs_name(http_dirEntryDirs, int_0)",
    "net_http.dirList": "void __golang net_http_dirList(net_http_ResponseWriter w, net_http_Request *r, net_http_File f)",
    "net_http.serveContent.deferwrap1": "void __golang net_http_serveContent_deferwrap1()",
    "net_http.checkIfUnmodifiedSince": "__int64 __golang net_http_checkIfUnmodifiedSince(net_http_Request *r, time_Time modtime)",
    "net_http.checkIfNoneMatch": "__int64 __golang net_http_checkIfNoneMatch(net_http_ResponseWriter w, net_http_Request *r)",
    "net_http.checkIfModifiedSince": "__int64 __golang net_http_checkIfModifiedSince(net_http_Request *r, time_Time modtime)",
    "net_http.checkIfRange": "__int64 __golang net_http_checkIfRange(net_http_ResponseWriter w, net_http_Request *r, time_Time modtime)",
    "net_http.isZeroTime": "bool __golang net_http_isZeroTime(time_Time t)",
    "net_http.setLastModified": "void __golang net_http_setLastModified(net_http_ResponseWriter w, time_Time modtime)",
    "net_http.writeNotModified": "void __golang net_http_writeNotModified(net_http_ResponseWriter w)",
    "net_http.serveFile": "void __golang net_http_serveFile(net_http_ResponseWriter w, net_http_Request *r, net_http_FileSystem fs_0, string name, bool redirect)",
    "net_http.serveFile.deferwrap2": "void __golang net_http_serveFile_deferwrap2()",
    "net_http.serveFile.deferwrap1": "void __golang net_http_serveFile_deferwrap1()",
    "net_http.localRedirect": "void __golang net_http_localRedirect(net_http_ResponseWriter w, net_http_Request *r, string newPath)",
    "net_http._ptr_fileHandler.ServeHTTP": "void __golang net_http__ptr_fileHandler_ServeHTTP(_ptr_http_fileHandler, http_ResponseWriter, _ptr_http_Request)",
    "net_http.httpRange.mimeHeader": "net_textproto_MIMEHeader __golang net_http_httpRange_mimeHeader(net_http_httpRange r, string contentType, int64 size)",
    "net_http.rangesMIMESize": "int64 __golang net_http_rangesMIMESize(_slice_net_http_httpRange ranges, string contentType, int64 contentSize)",
    "net_http.http2isBadCipher": "bool __golang net_http_http2isBadCipher(uint16 cipher)",
    "net_http._ptr_http2clientConnPool.getStartDialLocked": "net_http_http2dialCall *__golang net_http__ptr_http2clientConnPool_getStartDialLocked(net_http_http2clientConnPool *p, context_Context ctx, string addr)",
    "net_http._ptr_http2clientConnPool.getStartDialLocked.gowrap1": "void __golang net_http__ptr_http2clientConnPool_getStartDialLocked_gowrap1()",
    "net_http._ptr_http2dialCall.dial": "void __golang net_http__ptr_http2dialCall_dial(net_http_http2dialCall *c, context_Context ctx, string addr)",
    "net_http._ptr_http2clientConnPool.addConnIfNeeded.gowrap1": "void __golang net_http__ptr_http2clientConnPool_addConnIfNeeded_gowrap1()",
    "net_http._ptr_http2addConnCall.run": "void __golang net_http__ptr_http2addConnCall_run(net_http_http2addConnCall *c, net_http_http2Transport *t, string key, crypto_tls_Conn *tc)",
    "net_http._ptr_http2clientConnPool.MarkDead": "void __golang net_http__ptr_http2clientConnPool_MarkDead(_ptr_http_http2clientConnPool, _ptr_http_http2ClientConn)",
    "net_http._ptr_http2clientConnPool.MarkDead.deferwrap1": "void __golang net_http__ptr_http2clientConnPool_MarkDead_deferwrap1()",
    "net_http._ptr_http2clientConnPool.closeIdleConnections": "void __golang net_http__ptr_http2clientConnPool_closeIdleConnections(_ptr_http_http2clientConnPool)",
    "net_http._ptr_http2clientConnPool.closeIdleConnections.deferwrap1": "void __golang net_http__ptr_http2clientConnPool_closeIdleConnections_deferwrap1()",
    "net_http.http2shouldRetryDial": "bool __golang net_http_http2shouldRetryDial(net_http_http2dialCall *call, net_http_Request *req)",
    "net_http.http2getDataBufferChunk": "_slice_uint8 __golang net_http_http2getDataBufferChunk(int64 size)",
    "net_http.http2putDataBufferChunk": "void __golang net_http_http2putDataBufferChunk(_slice_uint8 p)",
    "net_http._ptr_http2dataBuffer.Len": "int_0 __golang net_http__ptr_http2dataBuffer_Len(_ptr_http_http2dataBuffer)",
    "net_http._ptr_http2dataBuffer.lastChunkOrAlloc": "_slice_uint8 __golang net_http__ptr_http2dataBuffer_lastChunkOrAlloc(net_http_http2dataBuffer *b, int64 want)",
    "net_http.http2ErrCode.String": "string_0 __golang net_http_http2ErrCode_String(http_http2ErrCode)",
    "net_http.http2ConnectionError.Error": "string_0 __golang net_http_http2ConnectionError_Error(http_http2ConnectionError)",
    "net_http.http2StreamError.Error": "string_0 __golang net_http_http2StreamError_Error(http_http2StreamError)",
    "net_http.http2goAwayFlowError.Error": "string_0 __golang net_http_http2goAwayFlowError_Error(http_http2goAwayFlowError)",
    "net_http.http2connError.Error": "string_0 __golang net_http_http2connError_Error(http_http2connError)",
    "net_http.http2pseudoHeaderError.Error": "string_0 __golang net_http_http2pseudoHeaderError_Error(http_http2pseudoHeaderError)",
    "net_http.http2duplicatePseudoHeaderError.Error": "string_0 __golang net_http_http2duplicatePseudoHeaderError_Error(http_http2duplicatePseudoHeaderError)",
    "net_http.http2headerFieldNameError.Error": "string_0 __golang net_http_http2headerFieldNameError_Error(http_http2headerFieldNameError)",
    "net_http.http2headerFieldValueError.Error": "string_0 __golang net_http_http2headerFieldValueError_Error(http_http2headerFieldValueError)",
    "net_http.http2FrameType.String": "string_0 __golang net_http_http2FrameType_String(http_http2FrameType)",
    "net_http.http2Flags.Has": "bool __golang net_http_http2Flags_Has(http_http2Flags, http_http2Flags)",
    "net_http.http2FrameHeader.Header": "net_http_http2FrameHeader __golang net_http_http2FrameHeader_Header(net_http_http2FrameHeader h)",
    "net_http.http2FrameHeader.String": "string_0 __golang net_http_http2FrameHeader_String(http_http2FrameHeader)",
    "net_http.http2FrameHeader.writeDebug": "void __golang net_http_http2FrameHeader_writeDebug(net_http_http2FrameHeader h, bytes_Buffer *buf)",
    "net_http._ptr_http2FrameHeader.invalidate": "void __golang net_http__ptr_http2FrameHeader_invalidate(_ptr_http_http2FrameHeader)",
    "net_http._ptr_http2Framer.endWrite": "error_0 __golang net_http__ptr_http2Framer_endWrite(_ptr_http_http2Framer)",
    "net_http._ptr_http2Framer.logWrite": "void __golang net_http__ptr_http2Framer_logWrite(_ptr_http_http2Framer)",
    "net_http._ptr_http2Framer.SetReuseFrames": "void __golang net_http__ptr_http2Framer_SetReuseFrames(_ptr_http_http2Framer)",
    "net_http._ptr_http2Framer.SetMaxReadFrameSize": "void __golang net_http__ptr_http2Framer_SetMaxReadFrameSize(_ptr_http_http2Framer, uint32_0)",
    "net_http._ptr_http2Framer.ErrorDetail": "error_0 __golang net_http__ptr_http2Framer_ErrorDetail(_ptr_http_http2Framer)",
    "net_http._ptr_http2Framer.checkFrameOrder": "error __golang net_http__ptr_http2Framer_checkFrameOrder(net_http_http2Framer *fr, net_http_http2Frame f)",
    "net_http._ptr_http2DataFrame.StreamEnded": "bool __golang net_http__ptr_http2DataFrame_StreamEnded(_ptr_http_http2DataFrame)",
    "net_http._ptr_http2DataFrame.Data": "_slice_uint8_0 __golang net_http__ptr_http2DataFrame_Data(_ptr_http_http2DataFrame)",
    "net_http.http2parseDataFrame": "void __golang net_http_http2parseDataFrame(net_http_http2frameCache *fc, net_http_http2FrameHeader fh, _slice_uint8 payload, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http._ptr_http2Framer.WriteData": "error_0 __golang net_http__ptr_http2Framer_WriteData(_ptr_http_http2Framer, uint32_0, bool, _slice_uint8_0)",
    "net_http._ptr_http2Framer.WriteDataPadded": "error_0 __golang net_http__ptr_http2Framer_WriteDataPadded(_ptr_http_http2Framer, uint32_0, bool, _slice_uint8_0, _slice_uint8_0)",
    "net_http._ptr_http2Framer.startWriteDataPadded": "error_0 __golang net_http__ptr_http2Framer_startWriteDataPadded(_ptr_http_http2Framer, uint32_0, bool, _slice_uint8_0, _slice_uint8_0)",
    "net_http.http2parseSettingsFrame": "void __golang net_http_http2parseSettingsFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 p, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http._ptr_http2SettingsFrame.IsAck": "bool __golang net_http__ptr_http2SettingsFrame_IsAck(_ptr_http_http2SettingsFrame)",
    "net_http._ptr_http2SettingsFrame.Setting": "http_http2Setting __golang net_http__ptr_http2SettingsFrame_Setting(_ptr_http_http2SettingsFrame, int_0)",
    "net_http._ptr_http2SettingsFrame.HasDuplicates": "bool __golang net_http__ptr_http2SettingsFrame_HasDuplicates(_ptr_http_http2SettingsFrame)",
    "net_http._ptr_http2SettingsFrame.ForeachSetting": "error_0 __golang net_http__ptr_http2SettingsFrame_ForeachSetting(_ptr_http_http2SettingsFrame, PTR_funchttp_http2Setting_error)",
    "net_http._ptr_http2Framer.WriteSettings": "error_0 __golang net_http__ptr_http2Framer_WriteSettings(_ptr_http_http2Framer, _slice_http_http2Setting)",
    "net_http._ptr_http2Framer.WriteSettingsAck": "error_0 __golang net_http__ptr_http2Framer_WriteSettingsAck(_ptr_http_http2Framer)",
    "net_http._ptr_http2PingFrame.IsAck": "bool __golang net_http__ptr_http2PingFrame_IsAck(_ptr_http_http2PingFrame)",
    "net_http.http2parsePingFrame": "void __golang net_http_http2parsePingFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 payload, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http._ptr_http2Framer.WritePing": "error_0 __golang net_http__ptr_http2Framer_WritePing(_ptr_http_http2Framer, bool, _8_uint8)",
    "net_http._ptr_http2GoAwayFrame.DebugData": "_slice_uint8_0 __golang net_http__ptr_http2GoAwayFrame_DebugData(_ptr_http_http2GoAwayFrame)",
    "net_http.http2parseGoAwayFrame": "void __golang net_http_http2parseGoAwayFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 p, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http._ptr_http2Framer.WriteGoAway": "error_0 __golang net_http__ptr_http2Framer_WriteGoAway(_ptr_http_http2Framer, uint32_0, http_http2ErrCode, _slice_uint8_0)",
    "net_http._ptr_http2UnknownFrame.Payload": "_slice_uint8_0 __golang net_http__ptr_http2UnknownFrame_Payload(_ptr_http_http2UnknownFrame)",
    "net_http.http2parseUnknownFrame": "void __golang net_http_http2parseUnknownFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 p, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http.http2parseWindowUpdateFrame": "void __golang net_http_http2parseWindowUpdateFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 p, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http._ptr_http2Framer.WriteWindowUpdate": "error_0 __golang net_http__ptr_http2Framer_WriteWindowUpdate(_ptr_http_http2Framer, uint32_0, uint32_0)",
    "net_http._ptr_http2HeadersFrame.HeaderBlockFragment": "_slice_uint8_0 __golang net_http__ptr_http2HeadersFrame_HeaderBlockFragment(_ptr_http_http2HeadersFrame)",
    "net_http._ptr_http2HeadersFrame.HeadersEnded": "bool __golang net_http__ptr_http2HeadersFrame_HeadersEnded(_ptr_http_http2HeadersFrame)",
    "net_http._ptr_http2HeadersFrame.StreamEnded": "bool __golang net_http__ptr_http2HeadersFrame_StreamEnded(_ptr_http_http2HeadersFrame)",
    "net_http._ptr_http2HeadersFrame.HasPriority": "bool __golang net_http__ptr_http2HeadersFrame_HasPriority(_ptr_http_http2HeadersFrame)",
    "net_http.http2parseHeadersFrame": "void __golang net_http_http2parseHeadersFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 p, net_http_http2Frame _r0, error err, funcstring countError)",
    "net_http._ptr_http2Framer.WriteHeaders": "error_0 __golang net_http__ptr_http2Framer_WriteHeaders(_ptr_http_http2Framer, http_http2HeadersFrameParam)",
    "net_http.http2PriorityParam.IsZero": "bool __golang net_http_http2PriorityParam_IsZero(http_http2PriorityParam)",
    "net_http.http2parsePriorityFrame": "void __golang net_http_http2parsePriorityFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 payload, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http._ptr_http2Framer.WritePriority": "error_0 __golang net_http__ptr_http2Framer_WritePriority(_ptr_http_http2Framer, uint32_0, http_http2PriorityParam)",
    "net_http.http2parseRSTStreamFrame": "void __golang net_http_http2parseRSTStreamFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 p, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http._ptr_http2Framer.WriteRSTStream": "error_0 __golang net_http__ptr_http2Framer_WriteRSTStream(_ptr_http_http2Framer, uint32_0, http_http2ErrCode)",
    "net_http.http2parseContinuationFrame": "void __golang net_http_http2parseContinuationFrame(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 p, net_http_http2Frame _r0, error _r1, funcstring countError)",
    "net_http._ptr_http2ContinuationFrame.HeaderBlockFragment": "_slice_uint8_0 __golang net_http__ptr_http2ContinuationFrame_HeaderBlockFragment(_ptr_http_http2ContinuationFrame)",
    "net_http._ptr_http2ContinuationFrame.HeadersEnded": "bool __golang net_http__ptr_http2ContinuationFrame_HeadersEnded(_ptr_http_http2ContinuationFrame)",
    "net_http._ptr_http2Framer.WriteContinuation": "error_0 __golang net_http__ptr_http2Framer_WriteContinuation(_ptr_http_http2Framer, uint32_0, bool, _slice_uint8_0)",
    "net_http._ptr_http2PushPromiseFrame.HeaderBlockFragment": "_slice_uint8_0 __golang net_http__ptr_http2PushPromiseFrame_HeaderBlockFragment(_ptr_http_http2PushPromiseFrame)",
    "net_http._ptr_http2PushPromiseFrame.HeadersEnded": "bool __golang net_http__ptr_http2PushPromiseFrame_HeadersEnded(_ptr_http_http2PushPromiseFrame)",
    "net_http.http2parsePushPromise": "void __golang net_http_http2parsePushPromise(net_http_http2frameCache *_p0, net_http_http2FrameHeader fh, _slice_uint8 p, net_http_http2Frame _r0, error err, funcstring countError)",
    "net_http._ptr_http2Framer.WritePushPromise": "error_0 __golang net_http__ptr_http2Framer_WritePushPromise(_ptr_http_http2Framer, http_http2PushPromiseParam)",
    "net_http._ptr_http2Framer.WriteRawFrame": "error_0 __golang net_http__ptr_http2Framer_WriteRawFrame(_ptr_http_http2Framer, http_http2FrameType, http_http2Flags, uint32_0, _slice_uint8_0)",
    "net_http._ptr_http2MetaHeadersFrame.PseudoValue": "string_0 __golang net_http__ptr_http2MetaHeadersFrame_PseudoValue(_ptr_http_http2MetaHeadersFrame, string_0)",
    "net_http._ptr_http2MetaHeadersFrame.RegularFields": "_slice_hpack_HeaderField __golang net_http__ptr_http2MetaHeadersFrame_RegularFields(_ptr_http_http2MetaHeadersFrame)",
    "net_http._ptr_http2MetaHeadersFrame.checkPseudos": "error_0 __golang net_http__ptr_http2MetaHeadersFrame_checkPseudos(_ptr_http_http2MetaHeadersFrame)",
    "net_http._ptr_http2Framer.readMetaFrame.deferwrap1": "void __golang net_http__ptr_http2Framer_readMetaFrame_deferwrap1()",
    "net_http.http2summarizeFrame": "string __golang net_http_http2summarizeFrame(net_http_http2Frame f)",
    "net_http.http2curGoroutineID.deferwrap1": "void __golang net_http_http2curGoroutineID_deferwrap1()",
    "net_http.http2buildCommonHeaderMaps": "void __golang net_http_http2buildCommonHeaderMaps()",
    "net_http.http2canonicalHeader": "string __golang net_http_http2canonicalHeader(string v)",
    "net_http.http2streamState.String": "string_0 __golang net_http_http2streamState_String(http_http2streamState)",
    "net_http.http2Setting.Valid": "error_0 __golang net_http_http2Setting_Valid(http_http2Setting)",
    "net_http.http2SettingID.String": "string_0 __golang net_http_http2SettingID_String(http_http2SettingID)",
    "net_http._ptr_http2closeWaiter.Init": "void __golang net_http__ptr_http2closeWaiter_Init(_ptr_http_http2closeWaiter)",
    "net_http.http2closeWaiter.Close": "void __golang net_http_http2closeWaiter_Close(http_http2closeWaiter)",
    "net_http.http2closeWaiter.Wait": "void __golang net_http_http2closeWaiter_Wait(http_http2closeWaiter)",
    "net_http._ptr_http2bufferedWriter.Available": "int_0 __golang net_http__ptr_http2bufferedWriter_Available(_ptr_http_http2bufferedWriter)",
    "net_http._ptr_http2bufferedWriter.Flush": "error_0 __golang net_http__ptr_http2bufferedWriter_Flush(_ptr_http_http2bufferedWriter)",
    "net_http._ptr_http2httpError.Error": "string_0 __golang net_http__ptr_http2httpError_Error(_ptr_http_http2httpError)",
    "net_http._ptr_http2httpError.Timeout": "bool __golang net_http__ptr_http2httpError_Timeout(_ptr_http_http2httpError)",
    "net_http._ptr_http2httpError.Temporary": "bool __golang net_http__ptr_http2httpError_Temporary(_ptr_http_http2httpError)",
    "net_http._ptr_http2sorter.Len": "int_0 __golang net_http__ptr_http2sorter_Len(_ptr_http_http2sorter)",
    "net_http._ptr_http2sorter.Swap": "void __golang net_http__ptr_http2sorter_Swap(_ptr_http_http2sorter, int_0, int_0)",
    "net_http._ptr_http2sorter.Less": "bool __golang net_http__ptr_http2sorter_Less(_ptr_http_http2sorter, int_0, int_0)",
    "net_http._ptr_http2sorter.Keys": "_slice_string_0 __golang net_http__ptr_http2sorter_Keys(_ptr_http_http2sorter, http_Header)",
    "net_http._ptr_http2sorter.SortStrings": "void __golang net_http__ptr_http2sorter_SortStrings(_ptr_http_http2sorter, _slice_string_0)",
    "net_http._ptr_http2pipe.setBuffer": "void __golang net_http__ptr_http2pipe_setBuffer(net_http_http2pipe *p, net_http_http2pipeBuffer b)",
    "net_http._ptr_http2pipe.setBuffer.deferwrap1": "void __golang net_http__ptr_http2pipe_setBuffer_deferwrap1()",
    "net_http._ptr_http2pipe.Len": "int_0 __golang net_http__ptr_http2pipe_Len(_ptr_http_http2pipe)",
    "net_http._ptr_http2pipe.Len.deferwrap1": "void __golang net_http__ptr_http2pipe_Len_deferwrap1()",
    "net_http._ptr_http2pipe.Read.deferwrap1": "void __golang net_http__ptr_http2pipe_Read_deferwrap1()",
    "net_http._ptr_http2pipe.Write.deferwrap2": "void __golang net_http__ptr_http2pipe_Write_deferwrap2()",
    "net_http._ptr_http2pipe.Write.deferwrap1": "void __golang net_http__ptr_http2pipe_Write_deferwrap1()",
    "net_http._ptr_http2pipe.CloseWithError": "void __golang net_http__ptr_http2pipe_CloseWithError(_ptr_http_http2pipe, error_0)",
    "net_http._ptr_http2pipe.BreakWithError": "void __golang net_http__ptr_http2pipe_BreakWithError(_ptr_http_http2pipe, error_0)",
    "net_http._ptr_http2pipe.closeWithError": "void __golang net_http__ptr_http2pipe_closeWithError(net_http_http2pipe *p, error *dst, error err, func fn)",
    "net_http._ptr_http2pipe.closeWithError.deferwrap2": "void __golang net_http__ptr_http2pipe_closeWithError_deferwrap2()",
    "net_http._ptr_http2pipe.closeWithError.deferwrap1": "void __golang net_http__ptr_http2pipe_closeWithError_deferwrap1()",
    "net_http._ptr_http2pipe.Err": "error_0 __golang net_http__ptr_http2pipe_Err(_ptr_http_http2pipe)",
    "net_http._ptr_http2pipe.Err.deferwrap1": "void __golang net_http__ptr_http2pipe_Err_deferwrap1()",
    "net_http._ptr_http2pipe.Done": "_chan_left_chan_struct__0 __golang net_http__ptr_http2pipe_Done(_ptr_http_http2pipe)",
    "net_http._ptr_http2pipe.Done.deferwrap1": "void __golang net_http__ptr_http2pipe_Done_deferwrap1()",
    "net_http._ptr_http2serverInternalState.registerConn": "void __golang net_http__ptr_http2serverInternalState_registerConn(_ptr_http_http2serverInternalState, _ptr_http_http2serverConn)",
    "net_http._ptr_http2serverInternalState.unregisterConn": "void __golang net_http__ptr_http2serverInternalState_unregisterConn(_ptr_http_http2serverInternalState, _ptr_http_http2serverConn)",
    "net_http._ptr_http2serverInternalState.startGracefulShutdown": "void __golang net_http__ptr_http2serverInternalState_startGracefulShutdown(_ptr_http_http2serverInternalState)",
    "net_http.http2ConfigureServer": "error __golang net_http_http2ConfigureServer(net_http_Server *s, net_http_http2Server *conf)",
    "net_http._ptr_http2Server.ServeConn": "void __golang net_http__ptr_http2Server_ServeConn(_ptr_http_http2Server, net_Conn_0, _ptr_http_http2ServeConnOpts)",
    "net_http._ptr_http2Server.ServeConn.deferwrap1": "void __golang net_http__ptr_http2Server_ServeConn_deferwrap1()",
    "net_http._ptr_http2serverConn.rejectConn": "void __golang net_http__ptr_http2serverConn_rejectConn(net_http_http2serverConn *sc, unsigned int err, string debug)",
    "net_http._ptr_http2serverConn.Framer": "_ptr_http_http2Framer __golang net_http__ptr_http2serverConn_Framer(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.CloseConn": "error_0 __golang net_http__ptr_http2serverConn_CloseConn(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.Flush": "error_0 __golang net_http__ptr_http2serverConn_Flush(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.logf": "void __golang net_http__ptr_http2serverConn_logf(_ptr_http_http2serverConn, string_0, _slice_interface__0)",
    "net_http.http2isClosedConnError": "bool __golang net_http_http2isClosedConnError(error err)",
    "net_http._ptr_http2serverConn.condlogf": "void __golang net_http__ptr_http2serverConn_condlogf(net_http_http2serverConn *sc, error err, string format, _slice_interface_ args)",
    "net_http._ptr_http2serverConn.canonicalHeader": "string_0 __golang net_http__ptr_http2serverConn_canonicalHeader(_ptr_http_http2serverConn, string_0)",
    "net_http._ptr_http2serverConn.readFrames": "void __golang net_http__ptr_http2serverConn_readFrames(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.writeFrameAsync": "void __golang net_http__ptr_http2serverConn_writeFrameAsync(net_http_http2serverConn *sc, net_http_http2FrameWriteRequest wr, net_http_http2writeData *wd)",
    "net_http._ptr_http2serverConn.closeAllStreamsOnConnClose": "void __golang net_http__ptr_http2serverConn_closeAllStreamsOnConnClose(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.stopShutdownTimer": "void __golang net_http__ptr_http2serverConn_stopShutdownTimer(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.notePanic": "void __golang net_http__ptr_http2serverConn_notePanic(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.notePanic.deferwrap1": "void __golang net_http__ptr_http2serverConn_notePanic_deferwrap1()",
    "net_http._ptr_http2serverConn.serve": "void __golang net_http__ptr_http2serverConn_serve(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.serve.deferwrap8": "void __golang net_http__ptr_http2serverConn_serve_deferwrap8()",
    "net_http._ptr_http2serverConn.serve.gowrap7": "void __golang net_http__ptr_http2serverConn_serve_gowrap7()",
    "net_http._ptr_http2serverConn.serve.deferwrap6": "void __golang net_http__ptr_http2serverConn_serve_deferwrap6()",
    "net_http._ptr_http2serverConn.serve.deferwrap5": "void __golang net_http__ptr_http2serverConn_serve_deferwrap5()",
    "net_http._ptr_http2serverConn.serve.deferwrap4": "void __golang net_http__ptr_http2serverConn_serve_deferwrap4()",
    "net_http._ptr_http2serverConn.serve.deferwrap3": "void __golang net_http__ptr_http2serverConn_serve_deferwrap3()",
    "net_http._ptr_http2serverConn.serve.deferwrap2": "void __golang net_http__ptr_http2serverConn_serve_deferwrap2()",
    "net_http._ptr_http2serverConn.serve.deferwrap1": "void __golang net_http__ptr_http2serverConn_serve_deferwrap1()",
    "net_http._ptr_http2serverConn.sendServeMsg": "void __golang net_http__ptr_http2serverConn_sendServeMsg(_ptr_http_http2serverConn, interface__0)",
    "net_http._ptr_http2serverConn.readPreface": "error_0 __golang net_http__ptr_http2serverConn_readPreface(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.readPreface.deferwrap1": "void __golang net_http__ptr_http2serverConn_readPreface_deferwrap1()",
    "net_http._ptr_http2serverConn.writeDataFromHandler": "error __golang net_http__ptr_http2serverConn_writeDataFromHandler(net_http_http2serverConn *sc, net_http_http2stream *stream, _slice_uint8 data, bool endStream)",
    "net_http._ptr_http2serverConn.writeFrameFromHandler": "error __golang net_http__ptr_http2serverConn_writeFrameFromHandler(net_http_http2serverConn *sc, net_http_http2FrameWriteRequest wr)",
    "net_http._ptr_http2serverConn.writeFrame": "void __golang net_http__ptr_http2serverConn_writeFrame(_ptr_http_http2serverConn, http_http2FrameWriteRequest)",
    "net_http._ptr_http2serverConn.startFrameWrite": "void __golang net_http__ptr_http2serverConn_startFrameWrite(_ptr_http_http2serverConn, http_http2FrameWriteRequest)",
    "net_http._ptr_http2serverConn.startFrameWrite.gowrap2": "void __golang net_http__ptr_http2serverConn_startFrameWrite_gowrap2()",
    "net_http._ptr_http2serverConn.startFrameWrite.gowrap1": "void __golang net_http__ptr_http2serverConn_startFrameWrite_gowrap1()",
    "net_http._ptr_http2serverConn.wroteFrame": "void __golang net_http__ptr_http2serverConn_wroteFrame(net_http_http2serverConn *sc, net_http_http2frameWriteResult res)",
    "net_http._ptr_http2serverConn.scheduleFrameWrite": "void __golang net_http__ptr_http2serverConn_scheduleFrameWrite(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.startGracefulShutdown": "void __golang net_http__ptr_http2serverConn_startGracefulShutdown(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.goAway": "void __golang net_http__ptr_http2serverConn_goAway(net_http_http2serverConn *sc, unsigned int code)",
    "net_http._ptr_http2serverConn.shutDownIn": "void __golang net_http__ptr_http2serverConn_shutDownIn(_ptr_http_http2serverConn, time_Duration)",
    "net_http._ptr_http2serverConn.resetStream": "void __golang net_http__ptr_http2serverConn_resetStream(net_http_http2serverConn *sc, net_http_http2StreamError se)",
    "net_http._ptr_http2serverConn.processFrameFromReader": "bool __golang net_http__ptr_http2serverConn_processFrameFromReader(net_http_http2serverConn *sc, net_http_http2readFrameResult res)",
    "net_http._ptr_http2serverConn.processFrame": "error __golang net_http__ptr_http2serverConn_processFrame(net_http_http2serverConn *sc, net_http_http2Frame f)",
    "net_http._ptr_http2serverConn.processPing": "error __golang net_http__ptr_http2serverConn_processPing(net_http_http2serverConn *sc, net_http_http2PingFrame *f)",
    "net_http._ptr_http2serverConn.processWindowUpdate": "error __golang net_http__ptr_http2serverConn_processWindowUpdate(net_http_http2serverConn *sc, net_http_http2WindowUpdateFrame *f)",
    "net_http._ptr_http2serverConn.processResetStream": "error __golang net_http__ptr_http2serverConn_processResetStream(net_http_http2serverConn *sc, net_http_http2RSTStreamFrame *f)",
    "net_http._ptr_http2serverConn.closeStream": "void __golang net_http__ptr_http2serverConn_closeStream(net_http_http2serverConn *sc, net_http_http2stream *st, error err)",
    "net_http._ptr_http2serverConn.processSettings": "error __golang net_http__ptr_http2serverConn_processSettings(net_http_http2serverConn *sc, net_http_http2SettingsFrame *f)",
    "net_http._ptr_http2serverConn.processSetting": "error_0 __golang net_http__ptr_http2serverConn_processSetting(_ptr_http_http2serverConn, http_http2Setting)",
    "net_http._ptr_http2serverConn.processSettingInitialWindowSize": "error_0 __golang net_http__ptr_http2serverConn_processSettingInitialWindowSize(_ptr_http_http2serverConn, uint32_0)",
    "net_http._ptr_http2serverConn.processData": "error __golang net_http__ptr_http2serverConn_processData(net_http_http2serverConn *sc, net_http_http2DataFrame *f)",
    "net_http._ptr_http2serverConn.processGoAway": "error __golang net_http__ptr_http2serverConn_processGoAway(net_http_http2serverConn *sc, net_http_http2GoAwayFrame *f)",
    "net_http._ptr_http2stream.endStream": "void __golang net_http__ptr_http2stream_endStream(_ptr_http_http2stream)",
    "net_http._ptr_http2stream.onReadTimeout": "void __golang net_http__ptr_http2stream_onReadTimeout(_ptr_http_http2stream)",
    "net_http._ptr_http2serverConn.processHeaders": "error __golang net_http__ptr_http2serverConn_processHeaders(net_http_http2serverConn *sc, net_http_http2MetaHeadersFrame *f)",
    "net_http._ptr_http2serverConn.upgradeRequest": "void __golang net_http__ptr_http2serverConn_upgradeRequest(_ptr_http_http2serverConn, _ptr_http_Request)",
    "net_http._ptr_http2serverConn.upgradeRequest.gowrap1": "void __golang net_http__ptr_http2serverConn_upgradeRequest_gowrap1()",
    "net_http._ptr_http2stream.processTrailerHeaders": "error __golang net_http__ptr_http2stream_processTrailerHeaders(net_http_http2stream *st, net_http_http2MetaHeadersFrame *f)",
    "net_http._ptr_http2serverConn.processPriority": "error __golang net_http__ptr_http2serverConn_processPriority(net_http_http2serverConn *sc, net_http_http2PriorityFrame *f)",
    "net_http._ptr_http2serverConn.newStream": "net_http_http2stream *__golang net_http__ptr_http2serverConn_newStream(net_http_http2serverConn *sc, uint32 id, uint32 pusherID, __int64 state)",
    "net_http._ptr_http2serverConn.newWriterAndRequestNoBody": "void __golang net_http__ptr_http2serverConn_newWriterAndRequestNoBody(net_http_http2serverConn *sc, net_http_http2requestParam rp, net_http_http2responseWriter *_r0, net_http_Request *_r1, error _r2, net_http_http2stream *st)",
    "net_http._ptr_http2serverConn.newResponseWriter": "net_http_http2responseWriter *__golang net_http__ptr_http2serverConn_newResponseWriter(net_http_http2serverConn *sc, net_http_http2stream *st, net_http_Request *req)",
    "net_http._ptr_http2serverConn.scheduleHandler": "error __golang net_http__ptr_http2serverConn_scheduleHandler(net_http_http2serverConn *sc, uint32 streamID, net_http_http2responseWriter *rw, net_http_Request *req, funcnet_http_ResponseWriter_comma__ptr_net_http_Request handler)",
    "net_http._ptr_http2serverConn.scheduleHandler.gowrap1": "void __golang net_http__ptr_http2serverConn_scheduleHandler_gowrap1()",
    "net_http._ptr_http2serverConn.handlerDone": "void __golang net_http__ptr_http2serverConn_handlerDone(_ptr_http_http2serverConn)",
    "net_http._ptr_http2serverConn.handlerDone.gowrap1": "void __golang net_http__ptr_http2serverConn_handlerDone_gowrap1()",
    "net_http._ptr_http2serverConn.runHandler": "void __golang net_http__ptr_http2serverConn_runHandler(net_http_http2serverConn *sc, net_http_http2responseWriter *rw, net_http_Request *req, funcnet_http_ResponseWriter_comma__ptr_net_http_Request handler)",
    "net_http._ptr_http2serverConn.runHandler.deferwrap1": "void __golang net_http__ptr_http2serverConn_runHandler_deferwrap1()",
    "net_http.http2handleHeaderListTooLong": "void __golang net_http_http2handleHeaderListTooLong(net_http_ResponseWriter w, net_http_Request *r)",
    "net_http._ptr_http2serverConn.writeHeaders": "error __golang net_http__ptr_http2serverConn_writeHeaders(net_http_http2serverConn *sc, net_http_http2stream *st, net_http_http2writeResHeaders *headerData)",
    "net_http._ptr_http2serverConn.noteBodyReadFromHandler": "void __golang net_http__ptr_http2serverConn_noteBodyReadFromHandler(net_http_http2serverConn *sc, net_http_http2stream *st, int n, error err)",
    "net_http._ptr_http2serverConn.noteBodyRead": "void __golang net_http__ptr_http2serverConn_noteBodyRead(net_http_http2serverConn *sc, net_http_http2stream *st, int n)",
    "net_http._ptr_http2serverConn.sendWindowUpdate": "void __golang net_http__ptr_http2serverConn_sendWindowUpdate(net_http_http2serverConn *sc, net_http_http2stream *st, int n)",
    "net_http._ptr_http2requestBody.Close": "error_0 __golang net_http__ptr_http2requestBody_Close(_ptr_http_http2requestBody)",
    "net_http._ptr_http2responseWriterState.declareTrailer": "void __golang net_http__ptr_http2responseWriterState_declareTrailer(_ptr_http_http2responseWriterState, string_0)",
    "net_http._ptr_http2responseWriterState.promoteUndeclaredTrailers": "void __golang net_http__ptr_http2responseWriterState_promoteUndeclaredTrailers(_ptr_http_http2responseWriterState)",
    "net_http._ptr_http2responseWriter.SetReadDeadline": "error_0 __golang net_http__ptr_http2responseWriter_SetReadDeadline(_ptr_http_http2responseWriter, time_Time_0)",
    "net_http._ptr_http2responseWriter.SetWriteDeadline": "error_0 __golang net_http__ptr_http2responseWriter_SetWriteDeadline(_ptr_http_http2responseWriter, time_Time_0)",
    "net_http._ptr_http2responseWriter.Flush": "void __golang net_http__ptr_http2responseWriter_Flush(_ptr_http_http2responseWriter)",
    "net_http._ptr_http2responseWriter.FlushError": "error_0 __golang net_http__ptr_http2responseWriter_FlushError(_ptr_http_http2responseWriter)",
    "net_http._ptr_http2responseWriter.CloseNotify": "_chan_left_chan_bool_0 __golang net_http__ptr_http2responseWriter_CloseNotify(_ptr_http_http2responseWriter)",
    "net_http._ptr_http2responseWriter.Header": "http_Header __golang net_http__ptr_http2responseWriter_Header(_ptr_http_http2responseWriter)",
    "net_http._ptr_http2responseWriter.WriteHeader": "void __golang net_http__ptr_http2responseWriter_WriteHeader(_ptr_http_http2responseWriter, int_0)",
    "net_http._ptr_http2responseWriterState.writeHeader": "void __golang net_http__ptr_http2responseWriterState_writeHeader(_ptr_http_http2responseWriterState, int_0)",
    "net_http._ptr_http2responseWriter.handlerDone": "void __golang net_http__ptr_http2responseWriter_handlerDone(_ptr_http_http2responseWriter)",
    "net_http._ptr_http2responseWriter.Push": "error_0 __golang net_http__ptr_http2responseWriter_Push(_ptr_http_http2responseWriter, string_0, _ptr_http_PushOptions)",
    "net_http._ptr_http2serverConn.startPush": "void __golang net_http__ptr_http2serverConn_startPush(net_http_http2serverConn *sc, net_http_http2startPushRequest *msg)",
    "net_http.http2foreachHeaderElement": "void __golang net_http_http2foreachHeaderElement(string v, funcstring fn)",
    "net_http.http2checkValidHTTP2RequestHeaders": "error __golang net_http_http2checkValidHTTP2RequestHeaders(net_http_Header h)",
    "net_http.http2h1ServerKeepAlivesDisabled": "bool __golang net_http_http2h1ServerKeepAlivesDisabled(net_http_Server *hs)",
    "net_http._ptr_http2serverConn.countError": "error __golang net_http__ptr_http2serverConn_countError(net_http_http2serverConn *sc, string name, error err)",
    "net_http._ptr_http2clientStream.abortStream": "void __golang net_http__ptr_http2clientStream_abortStream(_ptr_http_http2clientStream, error_0)",
    "net_http._ptr_http2clientStream.abortStream.deferwrap1": "void __golang net_http__ptr_http2clientStream_abortStream_deferwrap1()",
    "net_http._ptr_http2clientStream.abortStreamLocked": "void __golang net_http__ptr_http2clientStream_abortStreamLocked(_ptr_http_http2clientStream, error_0)",
    "net_http._ptr_http2clientStream.abortRequestBodyWrite": "void __golang net_http__ptr_http2clientStream_abortRequestBodyWrite(_ptr_http_http2clientStream)",
    "net_http._ptr_http2clientStream.abortRequestBodyWrite.deferwrap1": "void __golang net_http__ptr_http2clientStream_abortRequestBodyWrite_deferwrap1()",
    "net_http._ptr_http2clientStream.closeReqBodyLocked": "void __golang net_http__ptr_http2clientStream_closeReqBodyLocked(_ptr_http_http2clientStream)",
    "net_http.http2noCachedConnError.IsHTTP2NoCachedConnError": "void __golang net_http_http2noCachedConnError_IsHTTP2NoCachedConnError(http_http2noCachedConnError)",
    "net_http.http2noCachedConnError.Error": "string_0 __golang net_http_http2noCachedConnError_Error(http_http2noCachedConnError)",
    "net_http.http2authorityAddr": "string __golang net_http_http2authorityAddr(string scheme, string authority)",
    "net_http.http2backoffNewTimer": "time_Timer *__golang net_http_http2backoffNewTimer(__int64 d)",
    "net_http._ptr_http2Transport.CloseIdleConnections": "void __golang net_http__ptr_http2Transport_CloseIdleConnections(_ptr_http_http2Transport)",
    "net_http._ptr_http2Transport.newTLSConfig": "crypto_tls_Config *__golang net_http__ptr_http2Transport_newTLSConfig(net_http_http2Transport *t, string host)",
    "net_http._ptr_http2Transport.newClientConn.gowrap1": "void __golang net_http__ptr_http2Transport_newClientConn_gowrap1()",
    "net_http._ptr_http2ClientConn.healthCheck": "void __golang net_http__ptr_http2ClientConn_healthCheck(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.SetDoNotReuse": "void __golang net_http__ptr_http2ClientConn_SetDoNotReuse(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.SetDoNotReuse.deferwrap1": "void __golang net_http__ptr_http2ClientConn_SetDoNotReuse_deferwrap1()",
    "net_http._ptr_http2ClientConn.setGoAway": "void __golang net_http__ptr_http2ClientConn_setGoAway(net_http_http2ClientConn *cc, net_http_http2GoAwayFrame *f)",
    "net_http._ptr_http2ClientConn.setGoAway.deferwrap1": "void __golang net_http__ptr_http2ClientConn_setGoAway_deferwrap1()",
    "net_http._ptr_http2ClientConn.CanTakeNewRequest": "bool __golang net_http__ptr_http2ClientConn_CanTakeNewRequest(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.CanTakeNewRequest.deferwrap1": "void __golang net_http__ptr_http2ClientConn_CanTakeNewRequest_deferwrap1()",
    "net_http._ptr_http2ClientConn.ReserveNewRequest": "bool __golang net_http__ptr_http2ClientConn_ReserveNewRequest(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.ReserveNewRequest.deferwrap1": "void __golang net_http__ptr_http2ClientConn_ReserveNewRequest_deferwrap1()",
    "net_http._ptr_http2ClientConn.State": "http_http2ClientConnState __golang net_http__ptr_http2ClientConn_State(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.State.deferwrap1": "void __golang net_http__ptr_http2ClientConn_State_deferwrap1()",
    "net_http._ptr_http2ClientConn.idleStateLocked": "net_http_http2clientConnIdleState __golang net_http__ptr_http2ClientConn_idleStateLocked(net_http_http2ClientConn *cc)",
    "net_http._ptr_http2ClientConn.tooIdleLocked": "bool __golang net_http__ptr_http2ClientConn_tooIdleLocked(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.closeConn": "void __golang net_http__ptr_http2ClientConn_closeConn(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.closeConn.deferwrap1": "void __golang net_http__ptr_http2ClientConn_closeConn_deferwrap1()",
    "net_http._ptr_http2ClientConn.forceCloseConn": "void __golang net_http__ptr_http2ClientConn_forceCloseConn(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.closeIfIdle": "void __golang net_http__ptr_http2ClientConn_closeIfIdle(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.Shutdown": "error_0 __golang net_http__ptr_http2ClientConn_Shutdown(_ptr_http_http2ClientConn, context_Context_0)",
    "net_http._ptr_http2ClientConn.sendGoAway": "error_0 __golang net_http__ptr_http2ClientConn_sendGoAway(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.sendGoAway.deferwrap1": "void __golang net_http__ptr_http2ClientConn_sendGoAway_deferwrap1()",
    "net_http._ptr_http2ClientConn.closeForError": "void __golang net_http__ptr_http2ClientConn_closeForError(_ptr_http_http2ClientConn, error_0)",
    "net_http._ptr_http2ClientConn.Close": "error_0 __golang net_http__ptr_http2ClientConn_Close(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.closeForLostPing": "void __golang net_http__ptr_http2ClientConn_closeForLostPing(_ptr_http_http2ClientConn)",
    "net_http.http2checkConnHeaders": "error __golang net_http_http2checkConnHeaders(net_http_Request *req)",
    "net_http._ptr_http2ClientConn.decrStreamReservations": "void __golang net_http__ptr_http2ClientConn_decrStreamReservations(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.decrStreamReservations.deferwrap1": "void __golang net_http__ptr_http2ClientConn_decrStreamReservations_deferwrap1()",
    "net_http._ptr_http2ClientConn.RoundTrip.gowrap1": "void __golang net_http__ptr_http2ClientConn_RoundTrip_gowrap1()",
    "net_http._ptr_http2clientStream.doRequest": "void __golang net_http__ptr_http2clientStream_doRequest(_ptr_http_http2clientStream, _ptr_http_Request)",
    "net_http._ptr_http2clientStream.writeRequest": "void __golang net_http__ptr_http2clientStream_writeRequest(error err, net_http_http2clientStream *cs_0, net_http_Request *req)",
    "net_http._ptr_http2clientStream.writeRequest.deferwrap1": "void __golang net_http__ptr_http2clientStream_writeRequest_deferwrap1()",
    "net_http._ptr_http2clientStream.encodeAndWriteHeaders.deferwrap1": "void __golang net_http__ptr_http2clientStream_encodeAndWriteHeaders_deferwrap1()",
    "net_http._ptr_http2clientStream.cleanupWriteRequest": "void __golang net_http__ptr_http2clientStream_cleanupWriteRequest(_ptr_http_http2clientStream, error_0)",
    "net_http._ptr_http2ClientConn.awaitOpenSlotForStreamLocked": "error __golang net_http__ptr_http2ClientConn_awaitOpenSlotForStreamLocked(net_http_http2ClientConn *cc, net_http_http2clientStream *cs_0)",
    "net_http._ptr_http2ClientConn.writeHeaders": "error __golang net_http__ptr_http2ClientConn_writeHeaders(net_http_http2ClientConn *cc, uint32 streamID, bool endStream, int maxFrameSize, _slice_uint8 hdrs)",
    "net_http._ptr_http2clientStream.writeRequestBody": "void __golang net_http__ptr_http2clientStream_writeRequestBody(error err, net_http_http2clientStream *cs_0, net_http_Request *req)",
    "net_http._ptr_http2clientStream.writeRequestBody.deferwrap3": "void __golang net_http__ptr_http2clientStream_writeRequestBody_deferwrap3()",
    "net_http._ptr_http2clientStream.writeRequestBody.deferwrap2": "void __golang net_http__ptr_http2clientStream_writeRequestBody_deferwrap2()",
    "net_http._ptr_http2clientStream.writeRequestBody.deferwrap1": "void __golang net_http__ptr_http2clientStream_writeRequestBody_deferwrap1()",
    "net_http._ptr_http2clientStream.awaitFlowControl.deferwrap1": "void __golang net_http__ptr_http2clientStream_awaitFlowControl_deferwrap1()",
    "net_http._ptr_http2ClientConn.writeHeader": "void __golang net_http__ptr_http2ClientConn_writeHeader(_ptr_http_http2ClientConn, string_0, string_0)",
    "net_http._ptr_http2ClientConn.forgetStreamID": "void __golang net_http__ptr_http2ClientConn_forgetStreamID(_ptr_http_http2ClientConn, uint32_0)",
    "net_http._ptr_http2ClientConn.forgetStreamID.deferwrap1": "void __golang net_http__ptr_http2ClientConn_forgetStreamID_deferwrap1()",
    "net_http._ptr_http2ClientConn.readLoop": "void __golang net_http__ptr_http2ClientConn_readLoop(_ptr_http_http2ClientConn)",
    "net_http._ptr_http2ClientConn.readLoop.deferwrap1": "void __golang net_http__ptr_http2ClientConn_readLoop_deferwrap1()",
    "net_http.http2GoAwayError.Error": "string_0 __golang net_http_http2GoAwayError_Error(http_http2GoAwayError)",
    "net_http._ptr_http2clientConnReadLoop.cleanup": "void __golang net_http__ptr_http2clientConnReadLoop_cleanup(net_http_http2clientConnReadLoop *rl)",
    "net_http._ptr_http2clientConnReadLoop.cleanup.deferwrap2": "void __golang net_http__ptr_http2clientConnReadLoop_cleanup_deferwrap2()",
    "net_http._ptr_http2clientConnReadLoop.cleanup.deferwrap1": "void __golang net_http__ptr_http2clientConnReadLoop_cleanup_deferwrap1()",
    "net_http._ptr_http2ClientConn.countReadFrameError": "void __golang net_http__ptr_http2ClientConn_countReadFrameError(_ptr_http_http2ClientConn, error_0)",
    "net_http._ptr_http2clientConnReadLoop.run.deferwrap1": "void __golang net_http__ptr_http2clientConnReadLoop_run_deferwrap1()",
    "net_http._ptr_http2clientConnReadLoop.processHeaders": "error __golang net_http__ptr_http2clientConnReadLoop_processHeaders(net_http_http2clientConnReadLoop *rl, net_http_http2MetaHeadersFrame *f)",
    "net_http._ptr_http2clientConnReadLoop.processTrailers": "error __golang net_http__ptr_http2clientConnReadLoop_processTrailers(net_http_http2clientConnReadLoop *rl, net_http_http2clientStream *cs_0, net_http_http2MetaHeadersFrame *f)",
    "net_http.http2transportResponseBody.Read.deferwrap1": "void __golang net_http_http2transportResponseBody_Read_deferwrap1()",
    "net_http.http2transportResponseBody.Close": "error_0 __golang net_http_http2transportResponseBody_Close(http_http2transportResponseBody)",
    "net_http._ptr_http2clientConnReadLoop.processData": "error __golang net_http__ptr_http2clientConnReadLoop_processData(net_http_http2clientConnReadLoop *rl, net_http_http2DataFrame *f)",
    "net_http._ptr_http2clientConnReadLoop.endStream": "void __golang net_http__ptr_http2clientConnReadLoop_endStream(net_http_http2clientConnReadLoop *rl, net_http_http2clientStream *cs_0)",
    "net_http._ptr_http2clientConnReadLoop.endStream.deferwrap1": "void __golang net_http__ptr_http2clientConnReadLoop_endStream_deferwrap1()",
    "net_http._ptr_http2clientConnReadLoop.streamByID.deferwrap1": "void __golang net_http__ptr_http2clientConnReadLoop_streamByID_deferwrap1()",
    "net_http._ptr_http2clientConnReadLoop.processGoAway": "error __golang net_http__ptr_http2clientConnReadLoop_processGoAway(net_http_http2clientConnReadLoop *rl, net_http_http2GoAwayFrame *f)",
    "net_http._ptr_http2clientConnReadLoop.processSettings.deferwrap1": "void __golang net_http__ptr_http2clientConnReadLoop_processSettings_deferwrap1()",
    "net_http._ptr_http2clientConnReadLoop.processSettingsNoWrite.deferwrap1": "void __golang net_http__ptr_http2clientConnReadLoop_processSettingsNoWrite_deferwrap1()",
    "net_http._ptr_http2clientConnReadLoop.processWindowUpdate.deferwrap1": "void __golang net_http__ptr_http2clientConnReadLoop_processWindowUpdate_deferwrap1()",
    "net_http._ptr_http2clientConnReadLoop.processResetStream": "error __golang net_http__ptr_http2clientConnReadLoop_processResetStream(net_http_http2clientConnReadLoop *rl, net_http_http2RSTStreamFrame *f)",
    "net_http._ptr_http2ClientConn.Ping": "error_0 __golang net_http__ptr_http2ClientConn_Ping(_ptr_http_http2ClientConn, context_Context_0)",
    "net_http._ptr_http2clientConnReadLoop.processPing.deferwrap2": "void __golang net_http__ptr_http2clientConnReadLoop_processPing_deferwrap2()",
    "net_http._ptr_http2clientConnReadLoop.processPing.deferwrap1": "void __golang net_http__ptr_http2clientConnReadLoop_processPing_deferwrap1()",
    "net_http._ptr_http2ClientConn.writeStreamReset": "void __golang net_http__ptr_http2ClientConn_writeStreamReset(net_http_http2ClientConn *cc, uint32 streamID, unsigned int code, error err)",
    "net_http._ptr_http2Transport.logf": "void __golang net_http__ptr_http2Transport_logf(_ptr_http_http2Transport, string_0, _slice_interface__0)",
    "net_http.http2noBodyReader.Close": "error_0 __golang net_http_http2noBodyReader_Close(http_http2noBodyReader)",
    "net_http.http2missingBody.Close": "error_0 __golang net_http_http2missingBody_Close(http_http2missingBody)",
    "net_http.http2erringRoundTripper.RoundTripErr": "error_0 __golang net_http_http2erringRoundTripper_RoundTripErr(http_http2erringRoundTripper)",
    "net_http._ptr_http2gzipReader.Close": "error_0 __golang net_http__ptr_http2gzipReader_Close(_ptr_http_http2gzipReader)",
    "net_http.http2isConnectionCloseRequest": "bool __golang net_http_http2isConnectionCloseRequest(net_http_Request *req)",
    "net_http.http2registerHTTPSProtocol": "void __golang net_http_http2registerHTTPSProtocol(error err, net_http_Transport *t, net_http_http2noDialH2RoundTripper rt)",
    "net_http.http2traceGetConn": "void __golang net_http_http2traceGetConn(net_http_Request *req, string hostPort)",
    "net_http.http2traceGotConn": "void __golang net_http_http2traceGotConn(net_http_Request *req, net_http_http2ClientConn *cc, bool reused)",
    "net_http.http2flushFrameWriter.writeFrame": "error_0 __golang net_http_http2flushFrameWriter_writeFrame(http_http2flushFrameWriter, http_http2writeContext)",
    "net_http.http2flushFrameWriter.staysWithinBuffer": "bool __golang net_http_http2flushFrameWriter_staysWithinBuffer(http_http2flushFrameWriter, int_0)",
    "net_http.http2writeSettings.staysWithinBuffer": "bool __golang net_http_http2writeSettings_staysWithinBuffer(http_http2writeSettings, int_0)",
    "net_http.http2writeSettings.writeFrame": "error_0 __golang net_http_http2writeSettings_writeFrame(http_http2writeSettings, http_http2writeContext)",
    "net_http._ptr_http2writeGoAway.writeFrame": "error_0 __golang net_http__ptr_http2writeGoAway_writeFrame(_ptr_http_http2writeGoAway, http_http2writeContext)",
    "net_http._ptr_http2writeGoAway.staysWithinBuffer": "bool __golang net_http__ptr_http2writeGoAway_staysWithinBuffer(_ptr_http_http2writeGoAway, int_0)",
    "net_http._ptr_http2writeData.String": "string_0 __golang net_http__ptr_http2writeData_String(_ptr_http_http2writeData)",
    "net_http._ptr_http2writeData.writeFrame": "error_0 __golang net_http__ptr_http2writeData_writeFrame(_ptr_http_http2writeData, http_http2writeContext)",
    "net_http._ptr_http2writeData.staysWithinBuffer": "bool __golang net_http__ptr_http2writeData_staysWithinBuffer(_ptr_http_http2writeData, int_0)",
    "net_http.http2handlerPanicRST.writeFrame": "error_0 __golang net_http_http2handlerPanicRST_writeFrame(http_http2handlerPanicRST, http_http2writeContext)",
    "net_http.http2handlerPanicRST.staysWithinBuffer": "bool __golang net_http_http2handlerPanicRST_staysWithinBuffer(http_http2handlerPanicRST, int_0)",
    "net_http.http2StreamError.writeFrame": "error_0 __golang net_http_http2StreamError_writeFrame(http_http2StreamError, http_http2writeContext)",
    "net_http.http2StreamError.staysWithinBuffer": "bool __golang net_http_http2StreamError_staysWithinBuffer(http_http2StreamError, int_0)",
    "net_http.http2writePingAck.writeFrame": "error_0 __golang net_http_http2writePingAck_writeFrame(http_http2writePingAck, http_http2writeContext)",
    "net_http.http2writePingAck.staysWithinBuffer": "bool __golang net_http_http2writePingAck_staysWithinBuffer(http_http2writePingAck, int_0)",
    "net_http.http2writeSettingsAck.writeFrame": "error_0 __golang net_http_http2writeSettingsAck_writeFrame(http_http2writeSettingsAck, http_http2writeContext)",
    "net_http.http2writeSettingsAck.staysWithinBuffer": "bool __golang net_http_http2writeSettingsAck_staysWithinBuffer(http_http2writeSettingsAck, int_0)",
    "net_http.http2splitHeaderBlock": "error __golang net_http_http2splitHeaderBlock(net_http_http2writeContext ctx, _slice_uint8 headerBlock, funcnet_http_http2writeContext_comma__slice_uint8_comma_bool_comma_bool_error fn)",
    "net_http.http2encKV": "void __golang net_http_http2encKV(vendor_golang_org_x_net_http2_hpack_Encoder *enc, string k, string v)",
    "net_http._ptr_http2writeResHeaders.staysWithinBuffer": "bool __golang net_http__ptr_http2writeResHeaders_staysWithinBuffer(_ptr_http_http2writeResHeaders, int_0)",
    "net_http._ptr_http2writeResHeaders.writeFrame": "error_0 __golang net_http__ptr_http2writeResHeaders_writeFrame(_ptr_http_http2writeResHeaders, http_http2writeContext)",
    "net_http._ptr_http2writeResHeaders.writeHeaderBlock": "error __golang net_http__ptr_http2writeResHeaders_writeHeaderBlock(net_http_http2writeResHeaders *w, net_http_http2writeContext ctx, _slice_uint8 frag, bool firstFrag, bool lastFrag)",
    "net_http._ptr_http2writePushPromise.staysWithinBuffer": "bool __golang net_http__ptr_http2writePushPromise_staysWithinBuffer(_ptr_http_http2writePushPromise, int_0)",
    "net_http._ptr_http2writePushPromise.writeFrame": "error_0 __golang net_http__ptr_http2writePushPromise_writeFrame(_ptr_http_http2writePushPromise, http_http2writeContext)",
    "net_http._ptr_http2writePushPromise.writeHeaderBlock": "error __golang net_http__ptr_http2writePushPromise_writeHeaderBlock(net_http_http2writePushPromise *w, net_http_http2writeContext ctx, _slice_uint8 frag, bool firstFrag, bool lastFrag)",
    "net_http.http2write100ContinueHeadersFrame.writeFrame": "error_0 __golang net_http_http2write100ContinueHeadersFrame_writeFrame(http_http2write100ContinueHeadersFrame, http_http2writeContext)",
    "net_http.http2write100ContinueHeadersFrame.staysWithinBuffer": "bool __golang net_http_http2write100ContinueHeadersFrame_staysWithinBuffer(http_http2write100ContinueHeadersFrame, int_0)",
    "net_http.http2writeWindowUpdate.staysWithinBuffer": "bool __golang net_http_http2writeWindowUpdate_staysWithinBuffer(http_http2writeWindowUpdate, int_0)",
    "net_http.http2writeWindowUpdate.writeFrame": "error_0 __golang net_http_http2writeWindowUpdate_writeFrame(http_http2writeWindowUpdate, http_http2writeContext)",
    "net_http.http2encodeHeaders": "void __golang net_http_http2encodeHeaders(vendor_golang_org_x_net_http2_hpack_Encoder *enc, net_http_Header h, _slice_string keys)",
    "net_http.http2encodeHeaders.deferwrap1": "void __golang net_http_http2encodeHeaders_deferwrap1()",
    "net_http.http2FrameWriteRequest.StreamID": "uint32_0 __golang net_http_http2FrameWriteRequest_StreamID(http_http2FrameWriteRequest)",
    "net_http.http2FrameWriteRequest.DataSize": "int_0 __golang net_http_http2FrameWriteRequest_DataSize(http_http2FrameWriteRequest)",
    "net_http.http2FrameWriteRequest.String": "string_0 __golang net_http_http2FrameWriteRequest_String(http_http2FrameWriteRequest)",
    "net_http._ptr_http2FrameWriteRequest.replyToWriter": "void __golang net_http__ptr_http2FrameWriteRequest_replyToWriter(_ptr_http_http2FrameWriteRequest, error_0)",
    "net_http._ptr_http2priorityNode.setParent": "void __golang net_http__ptr_http2priorityNode_setParent(net_http_http2priorityNode *n, net_http_http2priorityNode *parent)",
    "net_http._ptr_http2priorityNode.walkReadyInOrder": "bool __golang net_http__ptr_http2priorityNode_walkReadyInOrder(net_http_http2priorityNode *n, bool openParent, _slice__ptr_net_http_http2priorityNode *tmp, func_ptr_net_http_http2priorityNode_comma_bool_bool f)",
    "net_http.http2sortPriorityNodeSiblings.Len": "int_0 __golang net_http_http2sortPriorityNodeSiblings_Len(http_http2sortPriorityNodeSiblings)",
    "net_http.http2sortPriorityNodeSiblings.Swap": "void __golang net_http_http2sortPriorityNodeSiblings_Swap(http_http2sortPriorityNodeSiblings, int_0, int_0)",
    "net_http.http2sortPriorityNodeSiblings.Less": "bool __golang net_http_http2sortPriorityNodeSiblings_Less(http_http2sortPriorityNodeSiblings, int_0, int_0)",
    "net_http._ptr_http2priorityWriteScheduler.CloseStream": "void __golang net_http__ptr_http2priorityWriteScheduler_CloseStream(_ptr_http_http2priorityWriteScheduler, uint32_0)",
    "net_http._ptr_http2priorityWriteScheduler.AdjustStream": "void __golang net_http__ptr_http2priorityWriteScheduler_AdjustStream(_ptr_http_http2priorityWriteScheduler, uint32_0, http_http2PriorityParam)",
    "net_http._ptr_http2priorityWriteScheduler.Push": "void __golang net_http__ptr_http2priorityWriteScheduler_Push(_ptr_http_http2priorityWriteScheduler, http_http2FrameWriteRequest)",
    "net_http._ptr_http2priorityWriteScheduler.addClosedOrIdleNode": "void __golang net_http__ptr_http2priorityWriteScheduler_addClosedOrIdleNode(net_http_http2priorityWriteScheduler *ws, _slice__ptr_net_http_http2priorityNode *list, int maxSize, net_http_http2priorityNode *n)",
    "net_http._ptr_http2priorityWriteScheduler.removeNode": "void __golang net_http__ptr_http2priorityWriteScheduler_removeNode(net_http_http2priorityWriteScheduler *ws, net_http_http2priorityNode *n)",
    "net_http._ptr_http2roundRobinWriteScheduler.OpenStream": "void __golang net_http__ptr_http2roundRobinWriteScheduler_OpenStream(_ptr_http_http2roundRobinWriteScheduler, uint32_0, http_http2OpenStreamOptions)",
    "net_http._ptr_http2roundRobinWriteScheduler.CloseStream": "void __golang net_http__ptr_http2roundRobinWriteScheduler_CloseStream(_ptr_http_http2roundRobinWriteScheduler, uint32_0)",
    "net_http._ptr_http2roundRobinWriteScheduler.AdjustStream": "void __golang net_http__ptr_http2roundRobinWriteScheduler_AdjustStream(_ptr_http_http2roundRobinWriteScheduler, uint32_0, http_http2PriorityParam)",
    "net_http._ptr_http2roundRobinWriteScheduler.Push": "void __golang net_http__ptr_http2roundRobinWriteScheduler_Push(_ptr_http_http2roundRobinWriteScheduler, http_http2FrameWriteRequest)",
    "net_http.http2StreamError.As": "bool __golang net_http_http2StreamError_As(http_http2StreamError, interface__0)",
    "net_http.Header.Add": "void __golang net_http_Header_Add(http_Header, string_0, string_0)",
    "net_http.Header.Set": "void __golang net_http_Header_Set(http_Header, string_0, string_0)",
    "net_http.Header.Get": "string_0 __golang net_http_Header_Get(http_Header, string_0)",
    "net_http.Header.Values": "_slice_string_0 __golang net_http_Header_Values(http_Header, string_0)",
    "net_http.Header.Del": "void __golang net_http_Header_Del(http_Header, string_0)",
    "net_http.Header.Write": "error_0 __golang net_http_Header_Write(http_Header, io_Writer_0)",
    "net_http.Header.Clone": "http_Header __golang net_http_Header_Clone(http_Header)",
    "net_http._ptr_headerSorter.Len": "int_0 __golang net_http__ptr_headerSorter_Len(_ptr_http_headerSorter)",
    "net_http._ptr_headerSorter.Swap": "void __golang net_http__ptr_headerSorter_Swap(_ptr_http_headerSorter, int_0, int_0)",
    "net_http._ptr_headerSorter.Less": "bool __golang net_http__ptr_headerSorter_Less(_ptr_http_headerSorter, int_0, int_0)",
    "net_http.Header.WriteSubset": "error_0 __golang net_http_Header_WriteSubset(http_Header, io_Writer_0, map_string_bool_0)",
    "net_http.Header.writeSubset": "error __golang net_http_Header_writeSubset(net_http_Header h, io_Writer w, map_string_bool exclude, net_http_httptrace_ClientTrace *trace)",
    "net_http.hasToken": "bool __golang net_http_hasToken(string v, string token)",
    "net_http._ptr_contextKey.String": "string_0 __golang net_http__ptr_contextKey_String(_ptr_http_contextKey)",
    "net_http.hasPort": "bool __golang net_http_hasPort(string s)",
    "net_http.removeEmptyPort": "string __golang net_http_removeEmptyPort(string host)",
    "net_http.isNotToken": "bool __golang net_http_isNotToken(int32 r)",
    "net_http.noBody.Close": "error_0 __golang net_http_noBody_Close(http_noBody)",
    "net_http._ptr_pattern.String": "string_0 __golang net_http__ptr_pattern_String(_ptr_http_pattern)",
    "net_http.isValidWildcardName": "bool __golang net_http_isValidWildcardName(string s)",
    "net_http.pathUnescape": "string __golang net_http_pathUnescape(string path)",
    "net_http._ptr_pattern.comparePathsAndMethods": "net_http_relationship __golang net_http__ptr_pattern_comparePathsAndMethods(net_http_pattern *p1, net_http_pattern *p2)",
    "net_http._ptr_pattern.comparePaths": "net_http_relationship __golang net_http__ptr_pattern_comparePaths(net_http_pattern *p1, net_http_pattern *p2)",
    "net_http.combineRelationships": "net_http_relationship __golang net_http_combineRelationships(net_http_relationship r1, net_http_relationship r2)",
    "net_http.describeConflict": "string __golang net_http_describeConflict(net_http_pattern *p1, net_http_pattern *p2)",
    "net_http.writeSegment": "void __golang net_http_writeSegment(strings_Builder *b, net_http_segment s)",
    "net_http.commonPath": "string __golang net_http_commonPath(net_http_pattern *p1, net_http_pattern *p2)",
    "net_http.differencePath": "string __golang net_http_differencePath(net_http_pattern *p1, net_http_pattern *p2)",
    "net_http._ptr_ProtocolError.Error": "string_0 __golang net_http__ptr_ProtocolError_Error(_ptr_http_ProtocolError)",
    "net_http._ptr_ProtocolError.Is": "bool __golang net_http__ptr_ProtocolError_Is(_ptr_http_ProtocolError, error_0)",
    "net_http._ptr_Request.Context": "context_Context_0 __golang net_http__ptr_Request_Context(_ptr_http_Request)",
    "net_http._ptr_Request.WithContext": "_ptr_http_Request __golang net_http__ptr_Request_WithContext(_ptr_http_Request, context_Context_0)",
    "net_http._ptr_Request.Clone": "_ptr_http_Request __golang net_http__ptr_Request_Clone(_ptr_http_Request, context_Context_0)",
    "net_http._ptr_Request.ProtoAtLeast": "bool __golang net_http__ptr_Request_ProtoAtLeast(_ptr_http_Request, int_0, int_0)",
    "net_http._ptr_Request.UserAgent": "string_0 __golang net_http__ptr_Request_UserAgent(_ptr_http_Request)",
    "net_http._ptr_Request.Cookies": "_slice__ptr_http_Cookie __golang net_http__ptr_Request_Cookies(_ptr_http_Request)",
    "net_http._ptr_Request.AddCookie": "void __golang net_http__ptr_Request_AddCookie(_ptr_http_Request, _ptr_http_Cookie)",
    "net_http._ptr_Request.Referer": "string_0 __golang net_http__ptr_Request_Referer(_ptr_http_Request)",
    "net_http._ptr_Request.Write": "error_0 __golang net_http__ptr_Request_Write(_ptr_http_Request, io_Writer_0)",
    "net_http._ptr_Request.WriteProxy": "error_0 __golang net_http__ptr_Request_WriteProxy(_ptr_http_Request, io_Writer_0)",
    "net_http._ptr_Request.write": "void __golang net_http__ptr_Request_write(error err, net_http_Request *r, io_Writer w, bool usingProxy, net_http_Header extraHeaders, func_bool waitForContinue)",
    "net_http.removeZone": "string __golang net_http_removeZone(string host)",
    "net_http._ptr_Request.SetBasicAuth": "void __golang net_http__ptr_Request_SetBasicAuth(_ptr_http_Request, string_0, string_0)",
    "net_http.newTextprotoReader": "net_textproto_Reader *__golang net_http_newTextprotoReader(bufio_Reader *br)",
    "net_http.putTextprotoReader": "void __golang net_http_putTextprotoReader(net_textproto_Reader *r)",
    "net_http.readRequest": "void __golang net_http_readRequest(net_http_Request *req, error err, bufio_Reader *b)",
    "net_http.readRequest.deferwrap1": "void __golang net_http_readRequest_deferwrap1()",
    "net_http._ptr_MaxBytesError.Error": "string_0 __golang net_http__ptr_MaxBytesError_Error(_ptr_http_MaxBytesError)",
    "net_http._ptr_maxBytesReader.Close": "error_0 __golang net_http__ptr_maxBytesReader_Close(_ptr_http_maxBytesReader)",
    "net_http._ptr_Request.ParseForm": "error_0 __golang net_http__ptr_Request_ParseForm(_ptr_http_Request)",
    "net_http._ptr_Request.ParseMultipartForm": "error_0 __golang net_http__ptr_Request_ParseMultipartForm(_ptr_http_Request, int64_0)",
    "net_http._ptr_Request.FormValue": "string_0 __golang net_http__ptr_Request_FormValue(_ptr_http_Request, string_0)",
    "net_http._ptr_Request.PostFormValue": "string_0 __golang net_http__ptr_Request_PostFormValue(_ptr_http_Request, string_0)",
    "net_http._ptr_Request.PathValue": "string_0 __golang net_http__ptr_Request_PathValue(_ptr_http_Request, string_0)",
    "net_http._ptr_Request.SetPathValue": "void __golang net_http__ptr_Request_SetPathValue(_ptr_http_Request, string_0, string_0)",
    "net_http._ptr_Request.expectsContinue": "bool __golang net_http__ptr_Request_expectsContinue(_ptr_http_Request)",
    "net_http._ptr_Request.wantsHttp10KeepAlive": "bool __golang net_http__ptr_Request_wantsHttp10KeepAlive(_ptr_http_Request)",
    "net_http._ptr_Request.wantsClose": "bool __golang net_http__ptr_Request_wantsClose(_ptr_http_Request)",
    "net_http._ptr_Request.requiresHTTP1": "bool __golang net_http__ptr_Request_requiresHTTP1(_ptr_http_Request)",
    "net_http._ptr_Response.Cookies": "_slice__ptr_http_Cookie __golang net_http__ptr_Response_Cookies(_ptr_http_Response)",
    "net_http._ptr_Response.ProtoAtLeast": "bool __golang net_http__ptr_Response_ProtoAtLeast(_ptr_http_Response, int_0, int_0)",
    "net_http._ptr_Response.Write": "error_0 __golang net_http__ptr_Response_Write(_ptr_http_Response, io_Writer_0)",
    "net_http.isProtocolSwitchHeader": "bool __golang net_http_isProtocolSwitchHeader(net_http_Header h)",
    "net_http._ptr_ResponseController.Flush": "error_0 __golang net_http__ptr_ResponseController_Flush(_ptr_http_ResponseController)",
    "net_http._ptr_routingIndex.possiblyConflictingPatterns": "void __golang net_http__ptr_routingIndex_possiblyConflictingPatterns(error err, net_http_routingIndex *idx, net_http_pattern *pat, func_ptr_net_http_pattern_error f)",
    "net_http._ptr_routingNode.addPattern": "void __golang net_http__ptr_routingNode_addPattern(net_http_routingNode *root, net_http_pattern *p, net_http_Handler h)",
    "net_http._ptr_routingNode.addSegments": "void __golang net_http__ptr_routingNode_addSegments(net_http_routingNode *n, _slice_net_http_segment segs, net_http_pattern *p, net_http_Handler h)",
    "net_http._ptr_routingNode.addChild": "net_http_routingNode *__golang net_http__ptr_routingNode_addChild(net_http_routingNode *n, string key)",
    "net_http._ptr_routingNode.matchingMethods": "void __golang net_http__ptr_routingNode_matchingMethods(net_http_routingNode *root, string host, string path, map_string_bool methodSet)",
    "net_http._ptr_routingNode.matchingMethodsPath": "void __golang net_http__ptr_routingNode_matchingMethodsPath(net_http_routingNode *n, string path, map_string_bool set)",
    "net_http._ptr_serveMux121.handle": "void __golang net_http__ptr_serveMux121_handle(_ptr_http_serveMux121, string_0, http_Handler)",
    "net_http._ptr_serveMux121.handle.deferwrap1": "void __golang net_http__ptr_serveMux121_handle_deferwrap1()",
    "net_http.appendSorted": "_slice_net_http_muxEntry __golang net_http_appendSorted(_slice_net_http_muxEntry es_0, net_http_muxEntry e)",
    "net_http._ptr_serveMux121.handler": "void __golang net_http__ptr_serveMux121_handler(string pattern, net_http_Handler h, net_http_serveMux121 *mux, string host, string path)",
    "net_http._ptr_serveMux121.handler.deferwrap1": "void __golang net_http__ptr_serveMux121_handler_deferwrap1()",
    "net_http._ptr_conn.hijacked": "bool __golang net_http__ptr_conn_hijacked(_ptr_http_conn)",
    "net_http._ptr_conn.hijacked.deferwrap1": "void __golang net_http__ptr_conn_hijacked_deferwrap1()",
    "net_http._ptr_chunkWriter.flush": "error_0 __golang net_http__ptr_chunkWriter_flush(_ptr_http_chunkWriter)",
    "net_http._ptr_chunkWriter.close": "void __golang net_http__ptr_chunkWriter_close(_ptr_http_chunkWriter)",
    "net_http._ptr_response.SetReadDeadline": "error_0 __golang net_http__ptr_response_SetReadDeadline(_ptr_http_response, time_Time_0)",
    "net_http._ptr_response.SetWriteDeadline": "error_0 __golang net_http__ptr_response_SetWriteDeadline(_ptr_http_response, time_Time_0)",
    "net_http._ptr_response.EnableFullDuplex": "error_0 __golang net_http__ptr_response_EnableFullDuplex(_ptr_http_response)",
    "net_http._ptr_response.finalTrailers": "http_Header __golang net_http__ptr_response_finalTrailers(_ptr_http_response)",
    "net_http._ptr_response.declareTrailer": "void __golang net_http__ptr_response_declareTrailer(_ptr_http_response, string_0)",
    "net_http._ptr_response.requestTooLarge": "void __golang net_http__ptr_response_requestTooLarge(_ptr_http_response)",
    "net_http._ptr_response.ReadFrom.deferwrap1": "void __golang net_http__ptr_response_ReadFrom_deferwrap1()",
    "net_http._ptr_connReader.lock": "void __golang net_http__ptr_connReader_lock(_ptr_http_connReader)",
    "net_http._ptr_connReader.unlock": "void __golang net_http__ptr_connReader_unlock(_ptr_http_connReader)",
    "net_http._ptr_connReader.startBackgroundRead": "void __golang net_http__ptr_connReader_startBackgroundRead(_ptr_http_connReader)",
    "net_http._ptr_connReader.startBackgroundRead.gowrap2": "void __golang net_http__ptr_connReader_startBackgroundRead_gowrap2()",
    "net_http._ptr_connReader.startBackgroundRead.deferwrap1": "void __golang net_http__ptr_connReader_startBackgroundRead_deferwrap1()",
    "net_http._ptr_connReader.backgroundRead": "void __golang net_http__ptr_connReader_backgroundRead(_ptr_http_connReader)",
    "net_http._ptr_connReader.abortPendingRead": "void __golang net_http__ptr_connReader_abortPendingRead(_ptr_http_connReader)",
    "net_http._ptr_connReader.abortPendingRead.deferwrap1": "void __golang net_http__ptr_connReader_abortPendingRead_deferwrap1()",
    "net_http._ptr_connReader.handleReadError": "void __golang net_http__ptr_connReader_handleReadError(_ptr_http_connReader, error_0)",
    "net_http.putCopyBuf": "void __golang net_http_putCopyBuf(_slice_uint8 b)",
    "net_http.newBufioReader": "bufio_Reader *__golang net_http_newBufioReader(io_Reader r)",
    "net_http.putBufioReader": "void __golang net_http_putBufioReader(bufio_Reader *br)",
    "net_http.newBufioWriterSize": "bufio_Writer *__golang net_http_newBufioWriterSize(io_Writer w, int size)",
    "net_http.putBufioWriter": "void __golang net_http_putBufioWriter(bufio_Writer *bw)",
    "net_http._ptr_expectContinueReader.Close": "error_0 __golang net_http__ptr_expectContinueReader_Close(_ptr_http_expectContinueReader)",
    "net_http.appendTime": "_slice_uint8 __golang net_http_appendTime(_slice_uint8 b, time_Time t)",
    "net_http._ptr_conn.readRequest": "void __golang net_http__ptr_conn_readRequest(net_http_response *w, error err, net_http_conn *c, context_Context ctx)",
    "net_http._ptr_response.Header": "http_Header __golang net_http__ptr_response_Header(_ptr_http_response)",
    "net_http.relevantCaller": "runtime_Frame __golang net_http_relevantCaller()",
    "net_http._ptr_response.WriteHeader": "void __golang net_http__ptr_response_WriteHeader(_ptr_http_response, int_0)",
    "net_http.extraHeader.Write": "void __golang net_http_extraHeader_Write(net_http_extraHeader h, bufio_Writer *w)",
    "net_http._ptr_chunkWriter.writeHeader": "void __golang net_http__ptr_chunkWriter_writeHeader(_ptr_http_chunkWriter, _slice_uint8_0)",
    "net_http.foreachHeaderElement": "void __golang net_http_foreachHeaderElement(string v, funcstring fn)",
    "net_http.writeStatusLine": "void __golang net_http_writeStatusLine(bufio_Writer *bw, bool is11, int code, _slice_uint8 scratch)",
    "net_http._ptr_response.finishRequest": "void __golang net_http__ptr_response_finishRequest(_ptr_http_response)",
    "net_http._ptr_response.shouldReuseConnection": "bool __golang net_http__ptr_response_shouldReuseConnection(_ptr_http_response)",
    "net_http._ptr_response.Flush": "void __golang net_http__ptr_response_Flush(_ptr_http_response)",
    "net_http._ptr_response.FlushError": "error_0 __golang net_http__ptr_response_FlushError(_ptr_http_response)",
    "net_http._ptr_conn.finalFlush": "void __golang net_http__ptr_conn_finalFlush(_ptr_http_conn)",
    "net_http._ptr_conn.close": "void __golang net_http__ptr_conn_close(_ptr_http_conn)",
    "net_http._ptr_conn.closeWriteAndWait": "void __golang net_http__ptr_conn_closeWriteAndWait(_ptr_http_conn)",
    "net_http._ptr_conn.setState": "void __golang net_http__ptr_conn_setState(net_http_conn *c, net_Conn nc, __int64 state, bool runHook)",
    "net_http.statusError.Error": "string_0 __golang net_http_statusError_Error(http_statusError)",
    "net_http.isCommonNetReadError": "bool __golang net_http_isCommonNetReadError(error err)",
    "net_http._ptr_conn.serve": "void __golang net_http__ptr_conn_serve(net_http_conn *c, context_Context ctx)",
    "net_http._ptr_response.sendExpectationFailed": "void __golang net_http__ptr_response_sendExpectationFailed(_ptr_http_response)",
    "net_http._ptr_response.Hijack.deferwrap1": "void __golang net_http__ptr_response_Hijack_deferwrap1()",
    "net_http._ptr_response.CloseNotify": "_chan_left_chan_bool_0 __golang net_http__ptr_response_CloseNotify(_ptr_http_response)",
    "net_http.registerOnHitEOF": "void __golang net_http_registerOnHitEOF(io_ReadCloser rc, func fn)",
    "net_http.requestBodyRemains": "bool __golang net_http_requestBodyRemains(io_ReadCloser rc)",
    "net_http.HandlerFunc.ServeHTTP": "void __golang net_http_HandlerFunc_ServeHTTP(PTR_http_HandlerFunc, http_ResponseWriter, _ptr_http_Request)",
    "net_http.Error": "void __golang net_http_Error(net_http_ResponseWriter w, string error, int code)",
    "net_http.NotFound": "void __golang net_http_NotFound(net_http_ResponseWriter w, net_http_Request *r)",
    "net_http.Redirect": "void __golang net_http_Redirect(net_http_ResponseWriter w, net_http_Request *r, string url, int code)",
    "net_http._ptr_redirectHandler.ServeHTTP": "void __golang net_http__ptr_redirectHandler_ServeHTTP(_ptr_http_redirectHandler, http_ResponseWriter, _ptr_http_Request)",
    "net_http.cleanPath": "string __golang net_http_cleanPath(string p)",
    "net_http.stripHostPort": "string __golang net_http_stripHostPort(string h)",
    "net_http._ptr_ServeMux.matchOrRedirect.deferwrap1": "void __golang net_http__ptr_ServeMux_matchOrRedirect_deferwrap1()",
    "net_http.exactMatch": "bool __golang net_http_exactMatch(net_http_routingNode *n, string path)",
    "net_http._ptr_ServeMux.matchingMethods.deferwrap1": "void __golang net_http__ptr_ServeMux_matchingMethods_deferwrap1()",
    "net_http._ptr_ServeMux.ServeHTTP": "void __golang net_http__ptr_ServeMux_ServeHTTP(_ptr_http_ServeMux, http_ResponseWriter, _ptr_http_Request)",
    "net_http._ptr_ServeMux.Handle": "void __golang net_http__ptr_ServeMux_Handle(_ptr_http_ServeMux, string_0, http_Handler)",
    "net_http._ptr_ServeMux.HandleFunc": "void __golang net_http__ptr_ServeMux_HandleFunc(_ptr_http_ServeMux, string_0, PTR_funchttp_ResponseWriter_comma___ptr_http_Request)",
    "net_http.Handle": "void __golang net_http_Handle(string pattern, net_http_Handler handler)",
    "net_http.HandleFunc": "void __golang net_http_HandleFunc(string pattern, funcnet_http_ResponseWriter_comma__ptr_net_http_Request handler)",
    "net_http._ptr_ServeMux.registerErr.deferwrap1": "void __golang net_http__ptr_ServeMux_registerErr_deferwrap1()",
    "net_http._ptr_Server.Close": "error_0 __golang net_http__ptr_Server_Close(_ptr_http_Server)",
    "net_http._ptr_Server.Close.deferwrap1": "void __golang net_http__ptr_Server_Close_deferwrap1()",
    "net_http._ptr_Server.Shutdown": "error_0 __golang net_http__ptr_Server_Shutdown(_ptr_http_Server, context_Context_0)",
    "net_http._ptr_Server.Shutdown.deferwrap1": "void __golang net_http__ptr_Server_Shutdown_deferwrap1()",
    "net_http._ptr_Server.RegisterOnShutdown": "void __golang net_http__ptr_Server_RegisterOnShutdown(_ptr_http_Server, PTR_func_0)",
    "net_http._ptr_Server.closeIdleConns": "bool __golang net_http__ptr_Server_closeIdleConns(_ptr_http_Server)",
    "net_http._ptr_Server.closeIdleConns.deferwrap1": "void __golang net_http__ptr_Server_closeIdleConns_deferwrap1()",
    "net_http._ptr_Server.closeListenersLocked": "error_0 __golang net_http__ptr_Server_closeListenersLocked(_ptr_http_Server)",
    "net_http.ConnState.String": "string_0 __golang net_http_ConnState_String(http_ConnState)",
    "net_http.serverHandler.ServeHTTP": "void __golang net_http_serverHandler_ServeHTTP(http_serverHandler, http_ResponseWriter, _ptr_http_Request)",
    "net_http._ptr_Server.ListenAndServe": "error_0 __golang net_http__ptr_Server_ListenAndServe(_ptr_http_Server)",
    "net_http._ptr_Server.Serve": "error_0 __golang net_http__ptr_Server_Serve(_ptr_http_Server, net_Listener_0)",
    "net_http._ptr_Server.Serve.gowrap3": "void __golang net_http__ptr_Server_Serve_gowrap3()",
    "net_http._ptr_Server.Serve.deferwrap2": "void __golang net_http__ptr_Server_Serve_deferwrap2()",
    "net_http._ptr_Server.Serve.deferwrap1": "void __golang net_http__ptr_Server_Serve_deferwrap1()",
    "net_http._ptr_Server.ServeTLS": "error_0 __golang net_http__ptr_Server_ServeTLS(_ptr_http_Server, net_Listener_0, string_0, string_0)",
    "net_http._ptr_Server.trackListener.deferwrap1": "void __golang net_http__ptr_Server_trackListener_deferwrap1()",
    "net_http._ptr_Server.trackConn": "void __golang net_http__ptr_Server_trackConn(net_http_Server *s, net_http_conn *c, bool add)",
    "net_http._ptr_Server.trackConn.deferwrap1": "void __golang net_http__ptr_Server_trackConn_deferwrap1()",
    "net_http._ptr_Server.doKeepAlives": "bool __golang net_http__ptr_Server_doKeepAlives(_ptr_http_Server)",
    "net_http._ptr_Server.SetKeepAlivesEnabled": "void __golang net_http__ptr_Server_SetKeepAlivesEnabled(_ptr_http_Server, bool)",
    "net_http._ptr_Server.logf": "void __golang net_http__ptr_Server_logf(_ptr_http_Server, string_0, _slice_interface__0)",
    "net_http.logf": "void __golang net_http_logf(net_http_Request *r, string format, _slice_interface_ args)",
    "net_http._ptr_Server.ListenAndServeTLS": "error_0 __golang net_http__ptr_Server_ListenAndServeTLS(_ptr_http_Server, string_0, string_0)",
    "net_http._ptr_Server.ListenAndServeTLS.deferwrap1": "void __golang net_http__ptr_Server_ListenAndServeTLS_deferwrap1()",
    "net_http._ptr_Server.onceSetNextProtoDefaults_Serve": "void __golang net_http__ptr_Server_onceSetNextProtoDefaults_Serve(_ptr_http_Server)",
    "net_http._ptr_Server.onceSetNextProtoDefaults": "void __golang net_http__ptr_Server_onceSetNextProtoDefaults(_ptr_http_Server)",
    "net_http._ptr_onceCloseListener.Close": "error_0 __golang net_http__ptr_onceCloseListener_Close(_ptr_http_onceCloseListener)",
    "net_http.globalOptionsHandler.ServeHTTP": "void __golang net_http_globalOptionsHandler_ServeHTTP(http_globalOptionsHandler, http_ResponseWriter, _ptr_http_Request)",
    "net_http.initALPNRequest.BaseContext": "context_Context_0 __golang net_http_initALPNRequest_BaseContext(http_initALPNRequest)",
    "net_http.initALPNRequest.ServeHTTP": "void __golang net_http_initALPNRequest_ServeHTTP(http_initALPNRequest, http_ResponseWriter, _ptr_http_Request)",
    "net_http.DetectContentType": "string __golang net_http_DetectContentType(_slice_uint8 data)",
    "net_http._ptr_exactSig.match": "string_0 __golang net_http__ptr_exactSig_match(_ptr_http_exactSig, _slice_uint8_0, int_0)",
    "net_http._ptr_maskedSig.match": "string_0 __golang net_http__ptr_maskedSig_match(_ptr_http_maskedSig, _slice_uint8_0, int_0)",
    "net_http.mp4Sig.match": "string_0 __golang net_http_mp4Sig_match(http_mp4Sig, _slice_uint8_0, int_0)",
    "net_http.textSig.match": "string_0 __golang net_http_textSig_match(http_textSig, _slice_uint8_0, int_0)",
    "net_http._ptr_socksDialer.connect.deferwrap1": "void __golang net_http__ptr_socksDialer_connect_deferwrap1()",
    "net_http.socksReply.String": "string __golang net_http_socksReply_String(__int64 code)",
    "net_http._ptr_socksAddr.Network": "string_0 __golang net_http__ptr_socksAddr_Network(_ptr_http_socksAddr)",
    "net_http._ptr_socksAddr.String": "string_0 __golang net_http__ptr_socksAddr_String(_ptr_http_socksAddr)",
    "net_http._ptr_socksUsernamePassword.Authenticate": "error __golang net_http__ptr_socksUsernamePassword_Authenticate(net_http_socksUsernamePassword *up, context_Context ctx, io_ReadWriter rw, __int64 auth)",
    "net_http.StatusText": "string __golang net_http_StatusText(int code)",
    "net_http._ptr_transferWriter.shouldSendChunkedRequestBody": "bool __golang net_http__ptr_transferWriter_shouldSendChunkedRequestBody(_ptr_http_transferWriter)",
    "net_http._ptr_transferWriter.probeRequestBody": "void __golang net_http__ptr_transferWriter_probeRequestBody(_ptr_http_transferWriter)",
    "net_http._ptr_transferWriter.probeRequestBody.gowrap1": "void __golang net_http__ptr_transferWriter_probeRequestBody_gowrap1()",
    "net_http._ptr_transferWriter.shouldSendContentLength": "bool __golang net_http__ptr_transferWriter_shouldSendContentLength(_ptr_http_transferWriter)",
    "net_http._ptr_transferWriter.writeHeader": "error __golang net_http__ptr_transferWriter_writeHeader(net_http_transferWriter *t, io_Writer w, net_http_httptrace_ClientTrace *trace)",
    "net_http._ptr_transferWriter.writeBody": "error_0 __golang net_http__ptr_transferWriter_writeBody(_ptr_http_transferWriter, io_Writer_0)",
    "net_http._ptr_transferWriter.doBodyCopy.deferwrap1": "void __golang net_http__ptr_transferWriter_doBodyCopy_deferwrap1()",
    "net_http._ptr_transferWriter.unwrapBody": "io_Reader_0 __golang net_http__ptr_transferWriter_unwrapBody(_ptr_http_transferWriter)",
    "net_http.readTransfer": "error __golang net_http_readTransfer(interface_ msg, bufio_Reader *r)",
    "net_http._ptr_unsupportedTEError.Error": "string_0 __golang net_http__ptr_unsupportedTEError_Error(_ptr_http_unsupportedTEError)",
    "net_http._ptr_transferReader.parseTransferEncoding": "error __golang net_http__ptr_transferReader_parseTransferEncoding(net_http_transferReader *t)",
    "net_http.shouldClose": "bool __golang net_http_shouldClose(int major, int minor, net_http_Header header, bool removeCloseHeader)",
    "net_http._ptr_body.Read.deferwrap1": "void __golang net_http__ptr_body_Read_deferwrap1()",
    "net_http.seeUpcomingDoubleCRLF": "bool __golang net_http_seeUpcomingDoubleCRLF(bufio_Reader *r)",
    "net_http._ptr_body.readTrailer": "error_0 __golang net_http__ptr_body_readTrailer(_ptr_http_body)",
    "net_http._ptr_body.Close": "error_0 __golang net_http__ptr_body_Close(_ptr_http_body)",
    "net_http._ptr_body.Close.deferwrap1": "void __golang net_http__ptr_body_Close_deferwrap1()",
    "net_http._ptr_body.didEarlyClose": "bool __golang net_http__ptr_body_didEarlyClose(_ptr_http_body)",
    "net_http._ptr_body.didEarlyClose.deferwrap1": "void __golang net_http__ptr_body_didEarlyClose_deferwrap1()",
    "net_http._ptr_body.bodyRemains": "bool __golang net_http__ptr_body_bodyRemains(_ptr_http_body)",
    "net_http._ptr_body.bodyRemains.deferwrap1": "void __golang net_http__ptr_body_bodyRemains_deferwrap1()",
    "net_http._ptr_body.registerOnHitEOF": "void __golang net_http__ptr_body_registerOnHitEOF(_ptr_http_body, PTR_func_0)",
    "net_http._ptr_body.registerOnHitEOF.deferwrap1": "void __golang net_http__ptr_body_registerOnHitEOF_deferwrap1()",
    "net_http.isKnownInMemoryReader": "bool __golang net_http_isKnownInMemoryReader(io_Reader r)",
    "net_http._ptr_Transport.Clone": "_ptr_http_Transport __golang net_http__ptr_Transport_Clone(_ptr_http_Transport)",
    "net_http._ptr_Transport.onceSetNextProtoDefaults": "void __golang net_http__ptr_Transport_onceSetNextProtoDefaults(_ptr_http_Transport)",
    "net_http._ptr_transportRequest.setError": "void __golang net_http__ptr_transportRequest_setError(_ptr_http_transportRequest, error_0)",
    "net_http._ptr_Transport.alternateRoundTripper": "net_http_RoundTripper __golang net_http__ptr_Transport_alternateRoundTripper(net_http_Transport *t, net_http_Request *req)",
    "net_http._ptr_readTrackingBody.Close": "error_0 __golang net_http__ptr_readTrackingBody_Close(_ptr_http_readTrackingBody)",
    "net_http._ptr_persistConn.shouldRetryRequest": "bool __golang net_http__ptr_persistConn_shouldRetryRequest(net_http_persistConn *pc, net_http_Request *req, error err)",
    "net_http._ptr_Transport.RegisterProtocol": "void __golang net_http__ptr_Transport_RegisterProtocol(_ptr_http_Transport, string_0, http_RoundTripper)",
    "net_http._ptr_Transport.RegisterProtocol.deferwrap1": "void __golang net_http__ptr_Transport_RegisterProtocol_deferwrap1()",
    "net_http._ptr_Transport.CloseIdleConnections": "void __golang net_http__ptr_Transport_CloseIdleConnections(_ptr_http_Transport)",
    "net_http._ptr_Transport.CancelRequest": "void __golang net_http__ptr_Transport_CancelRequest(_ptr_http_Transport, _ptr_http_Request)",
    "net_http._ptr_Transport.cancelRequest.deferwrap1": "void __golang net_http__ptr_Transport_cancelRequest_deferwrap1()",
    "net_http.envProxyFunc": "func_ptr_net_url_URL__ptr_net_url_URL_comma_error __golang net_http_envProxyFunc()",
    "net_http._ptr_Transport.connectMethodForRequest": "void __golang net_http__ptr_Transport_connectMethodForRequest(net_http_connectMethod cm, error err, net_http_Transport *t, net_http_transportRequest *treq)",
    "net_http._ptr_connectMethod.proxyAuth": "string_0 __golang net_http__ptr_connectMethod_proxyAuth(_ptr_http_connectMethod)",
    "net_http.transportReadFromServerError.Unwrap": "error_0 __golang net_http_transportReadFromServerError_Unwrap(http_transportReadFromServerError)",
    "net_http.transportReadFromServerError.Error": "string_0 __golang net_http_transportReadFromServerError_Error(http_transportReadFromServerError)",
    "net_http._ptr_Transport.putOrCloseIdleConn": "void __golang net_http__ptr_Transport_putOrCloseIdleConn(net_http_Transport *t, net_http_persistConn *pconn)",
    "net_http._ptr_Transport.tryPutIdleConn.deferwrap1": "void __golang net_http__ptr_Transport_tryPutIdleConn_deferwrap1()",
    "net_http._ptr_Transport.queueForIdleConn.gowrap2": "void __golang net_http__ptr_Transport_queueForIdleConn_gowrap2()",
    "net_http._ptr_Transport.queueForIdleConn.deferwrap1": "void __golang net_http__ptr_Transport_queueForIdleConn_deferwrap1()",
    "net_http._ptr_Transport.removeIdleConn.deferwrap1": "void __golang net_http__ptr_Transport_removeIdleConn_deferwrap1()",
    "net_http._ptr_Transport.removeIdleConnLocked": "bool __golang net_http__ptr_Transport_removeIdleConnLocked(net_http_Transport *t, net_http_persistConn *pconn)",
    "net_http._ptr_Transport.setReqCanceler": "void __golang net_http__ptr_Transport_setReqCanceler(net_http_Transport *t, net_http_cancelKey key, funcerror fn)",
    "net_http._ptr_Transport.setReqCanceler.deferwrap1": "void __golang net_http__ptr_Transport_setReqCanceler_deferwrap1()",
    "net_http._ptr_Transport.replaceReqCanceler.deferwrap1": "void __golang net_http__ptr_Transport_replaceReqCanceler_deferwrap1()",
    "net_http._ptr_wantConn.getCtxForDial": "context_Context_0 __golang net_http__ptr_wantConn_getCtxForDial(_ptr_http_wantConn)",
    "net_http._ptr_wantConn.getCtxForDial.deferwrap1": "void __golang net_http__ptr_wantConn_getCtxForDial_deferwrap1()",
    "net_http._ptr_wantConn.tryDeliver.deferwrap1": "void __golang net_http__ptr_wantConn_tryDeliver_deferwrap1()",
    "net_http._ptr_wantConn.cancel": "void __golang net_http__ptr_wantConn_cancel(net_http_wantConn *w, net_http_Transport *t, error err)",
    "net_http._ptr_wantConnQueue.len": "int_0 __golang net_http__ptr_wantConnQueue_len(_ptr_http_wantConnQueue)",
    "net_http._ptr_wantConnQueue.cleanFront": "bool __golang net_http__ptr_wantConnQueue_cleanFront(_ptr_http_wantConnQueue)",
    "net_http._ptr_Transport.getConn": "void __golang net_http__ptr_Transport_getConn(net_http_persistConn *pc, error err, net_http_Transport *t, net_http_transportRequest *treq, net_http_connectMethod cm)",
    "net_http._ptr_Transport.queueForDial": "void __golang net_http__ptr_Transport_queueForDial(net_http_Transport *t, net_http_wantConn *w)",
    "net_http._ptr_Transport.queueForDial.gowrap3": "void __golang net_http__ptr_Transport_queueForDial_gowrap3()",
    "net_http._ptr_Transport.queueForDial.deferwrap2": "void __golang net_http__ptr_Transport_queueForDial_deferwrap2()",
    "net_http._ptr_Transport.queueForDial.gowrap1": "void __golang net_http__ptr_Transport_queueForDial_gowrap1()",
    "net_http._ptr_Transport.dialConnFor": "void __golang net_http__ptr_Transport_dialConnFor(net_http_Transport *t, net_http_wantConn *w)",
    "net_http._ptr_Transport.decConnsPerHost": "void __golang net_http__ptr_Transport_decConnsPerHost(net_http_Transport *t, net_http_connectMethodKey key)",
    "net_http._ptr_Transport.decConnsPerHost.gowrap2": "void __golang net_http__ptr_Transport_decConnsPerHost_gowrap2()",
    "net_http._ptr_Transport.decConnsPerHost.deferwrap1": "void __golang net_http__ptr_Transport_decConnsPerHost_deferwrap1()",
    "net_http._ptr_persistConn.addTLS": "error __golang net_http__ptr_persistConn_addTLS(net_http_persistConn *pconn, context_Context ctx, string name, net_http_httptrace_ClientTrace *trace)",
    "net_http._ptr_Transport.dialConn": "void __golang net_http__ptr_Transport_dialConn(net_http_persistConn *pconn, error err, net_http_Transport *t, context_Context ctx, net_http_connectMethod cm)",
    "net_http._ptr_Transport.dialConn.gowrap3": "void __golang net_http__ptr_Transport_dialConn_gowrap3()",
    "net_http._ptr_Transport.dialConn.gowrap2": "void __golang net_http__ptr_Transport_dialConn_gowrap2()",
    "net_http._ptr_Transport.dialConn.gowrap1": "void __golang net_http__ptr_Transport_dialConn_gowrap1()",
    "net_http._ptr_connectMethod.tlsHost": "string_0 __golang net_http__ptr_connectMethod_tlsHost(_ptr_http_connectMethod)",
    "net_http.connectMethodKey.String": "string_0 __golang net_http_connectMethodKey_String(http_connectMethodKey)",
    "net_http._ptr_persistConn.isBroken": "bool __golang net_http__ptr_persistConn_isBroken(_ptr_http_persistConn)",
    "net_http._ptr_persistConn.canceled": "error_0 __golang net_http__ptr_persistConn_canceled(_ptr_http_persistConn)",
    "net_http._ptr_persistConn.canceled.deferwrap1": "void __golang net_http__ptr_persistConn_canceled_deferwrap1()",
    "net_http._ptr_persistConn.isReused": "bool __golang net_http__ptr_persistConn_isReused(_ptr_http_persistConn)",
    "net_http._ptr_persistConn.gotIdleConnTrace": "void __golang net_http__ptr_persistConn_gotIdleConnTrace(net_http_httptrace_GotConnInfo t, net_http_persistConn *pc, time_Time idleAt)",
    "net_http._ptr_persistConn.gotIdleConnTrace.deferwrap1": "void __golang net_http__ptr_persistConn_gotIdleConnTrace_deferwrap1()",
    "net_http._ptr_persistConn.cancelRequest": "void __golang net_http__ptr_persistConn_cancelRequest(_ptr_http_persistConn, error_0)",
    "net_http._ptr_persistConn.cancelRequest.deferwrap1": "void __golang net_http__ptr_persistConn_cancelRequest_deferwrap1()",
    "net_http._ptr_persistConn.closeConnIfStillIdle": "void __golang net_http__ptr_persistConn_closeConnIfStillIdle(_ptr_http_persistConn)",
    "net_http._ptr_persistConn.closeConnIfStillIdle.deferwrap1": "void __golang net_http__ptr_persistConn_closeConnIfStillIdle_deferwrap1()",
    "net_http._ptr_persistConn.mapRoundTripError": "error __golang net_http__ptr_persistConn_mapRoundTripError(net_http_persistConn *pc, net_http_transportRequest *req, int64 startBytesWritten, error err)",
    "net_http._ptr_persistConn.readLoop": "void __golang net_http__ptr_persistConn_readLoop(_ptr_http_persistConn)",
    "net_http._ptr_persistConn.readLoop.deferwrap1": "void __golang net_http__ptr_persistConn_readLoop_deferwrap1()",
    "net_http._ptr_persistConn.readLoopPeekFailLocked": "void __golang net_http__ptr_persistConn_readLoopPeekFailLocked(_ptr_http_persistConn, error_0)",
    "net_http.nothingWrittenError.Unwrap": "error_0 __golang net_http_nothingWrittenError_Unwrap(http_nothingWrittenError)",
    "net_http._ptr_persistConn.writeLoop": "void __golang net_http__ptr_persistConn_writeLoop(_ptr_http_persistConn)",
    "net_http._ptr_persistConn.writeLoop.deferwrap1": "void __golang net_http__ptr_persistConn_writeLoop_deferwrap1()",
    "net_http._ptr_persistConn.wroteRequest": "bool __golang net_http__ptr_persistConn_wroteRequest(_ptr_http_persistConn)",
    "net_http._ptr_persistConn.wroteRequest.deferwrap1": "void __golang net_http__ptr_persistConn_wroteRequest_deferwrap1()",
    "net_http._ptr_httpError.Error": "string_0 __golang net_http__ptr_httpError_Error(_ptr_http_httpError)",
    "net_http._ptr_httpError.Timeout": "bool __golang net_http__ptr_httpError_Timeout(_ptr_http_httpError)",
    "net_http._ptr_httpError.Temporary": "bool __golang net_http__ptr_httpError_Temporary(_ptr_http_httpError)",
    "net_http.nop": "void __golang net_http_nop()",
    "net_http._ptr_persistConn.roundTrip": "void __golang net_http__ptr_persistConn_roundTrip(net_http_Response *resp, error err, net_http_persistConn *pc, net_http_transportRequest *req)",
    "net_http._ptr_persistConn.roundTrip.deferwrap2": "void __golang net_http__ptr_persistConn_roundTrip_deferwrap2()",
    "net_http._ptr_persistConn.roundTrip.deferwrap1": "void __golang net_http__ptr_persistConn_roundTrip_deferwrap1()",
    "net_http._ptr_persistConn.markReused": "void __golang net_http__ptr_persistConn_markReused(_ptr_http_persistConn)",
    "net_http._ptr_persistConn.close": "void __golang net_http__ptr_persistConn_close(_ptr_http_persistConn, error_0)",
    "net_http._ptr_persistConn.close.deferwrap1": "void __golang net_http__ptr_persistConn_close_deferwrap1()",
    "net_http._ptr_persistConn.closeLocked": "void __golang net_http__ptr_persistConn_closeLocked(_ptr_http_persistConn, error_0)",
    "net_http.idnaASCIIFromURL": "string __golang net_http_idnaASCIIFromURL(net_url_URL *url)",
    "net_http.canonicalAddr": "string __golang net_http_canonicalAddr(net_url_URL *url)",
    "net_http._ptr_bodyEOFSignal.Read.deferwrap1": "void __golang net_http__ptr_bodyEOFSignal_Read_deferwrap1()",
    "net_http._ptr_bodyEOFSignal.Close": "error_0 __golang net_http__ptr_bodyEOFSignal_Close(_ptr_http_bodyEOFSignal)",
    "net_http._ptr_bodyEOFSignal.Close.deferwrap1": "void __golang net_http__ptr_bodyEOFSignal_Close_deferwrap1()",
    "net_http._ptr_gzipReader.Close": "error_0 __golang net_http__ptr_gzipReader_Close(_ptr_http_gzipReader)",
    "net_http.tlsHandshakeTimeoutError.Timeout": "bool __golang net_http_tlsHandshakeTimeoutError_Timeout(http_tlsHandshakeTimeoutError)",
    "net_http.tlsHandshakeTimeoutError.Temporary": "bool __golang net_http_tlsHandshakeTimeoutError_Temporary(http_tlsHandshakeTimeoutError)",
    "net_http.tlsHandshakeTimeoutError.Error": "string_0 __golang net_http_tlsHandshakeTimeoutError_Error(http_tlsHandshakeTimeoutError)",
    "net_http.fakeLocker.Lock": "void __golang net_http_fakeLocker_Lock(http_fakeLocker)",
    "net_http.fakeLocker.Unlock": "void __golang net_http_fakeLocker_Unlock(http_fakeLocker)",
    "net_http._ptr_connLRU.add": "void __golang net_http__ptr_connLRU_add(net_http_connLRU *cl_0, net_http_persistConn *pc)",
    "net_http._ptr_connLRU.len": "int_0 __golang net_http__ptr_connLRU_len(_ptr_http_connLRU)",
    "net_http._ptr_mapping_go.shape.string_comma_go.shape._ptr_uint8_.eachPair": "void __golang net_http__ptr_mapping_go_shape_string_comma_go_shape__ptr_uint8__eachPair(net_http__ptr_mapping_go_shape_string_comma_go_shape__ptr_uint8__eachPair::_param11 h, net_http__ptr_mapping_go_shape_string_comma_go_shape__ptr_uint8__eachPair::_param12 f)",
    "sync_atomic._ptr_Pointer_net_http.response_.CompareAndSwap": "bool __golang sync_atomic__ptr_Pointer_net_http_response__CompareAndSwap(_ptr_atomic_Pointer_net_http_response_, _ptr_http_response, _ptr_http_response)",
    "sync_atomic._ptr_Pointer_net_http.response_.Swap": "_ptr_http_response __golang sync_atomic__ptr_Pointer_net_http_response__Swap(_ptr_atomic_Pointer_net_http_response_, _ptr_http_response)",
    "sync_atomic._ptr_Pointer_net_http.response_.Store": "void __golang sync_atomic__ptr_Pointer_net_http_response__Store(_ptr_atomic_Pointer_net_http_response_, _ptr_http_response)",
    "sync_atomic._ptr_Pointer_net_http.response_.Load": "_ptr_http_response __golang sync_atomic__ptr_Pointer_net_http_response__Load(_ptr_atomic_Pointer_net_http_response_)",
    "net_http._ptr_Header.Add": "void __golang net_http__ptr_Header_Add(_ptr_http_Header, string_0, string_0)",
    "net_http._ptr_Header.Clone": "http_Header __golang net_http__ptr_Header_Clone(_ptr_http_Header)",
    "net_http._ptr_Header.Del": "void __golang net_http__ptr_Header_Del(_ptr_http_Header, string_0)",
    "net_http._ptr_Header.Get": "string_0 __golang net_http__ptr_Header_Get(_ptr_http_Header, string_0)",
    "net_http._ptr_Header.Set": "void __golang net_http__ptr_Header_Set(_ptr_http_Header, string_0, string_0)",
    "net_http._ptr_Header.Values": "_slice_string_0 __golang net_http__ptr_Header_Values(_ptr_http_Header, string_0)",
    "net_http._ptr_Header.Write": "error_0 __golang net_http__ptr_Header_Write(_ptr_http_Header, io_Writer_0)",
    "net_http._ptr_Header.WriteSubset": "error_0 __golang net_http__ptr_Header_WriteSubset(_ptr_http_Header, io_Writer_0, map_string_bool_0)",
    "net_http._ptr_connectMethodKey.String": "string_0 __golang net_http__ptr_connectMethodKey_String(_ptr_http_connectMethodKey)",
    "net_http.transportRequest.AddCookie": "void __golang net_http_transportRequest_AddCookie(http_transportRequest, _ptr_http_Cookie)",
    "net_http._ptr_transportRequest.AddCookie": "void __golang net_http__ptr_transportRequest_AddCookie(_ptr_http_transportRequest, _ptr_http_Cookie)",
    "net_http.transportRequest.Clone": "_ptr_http_Request __golang net_http_transportRequest_Clone(http_transportRequest, context_Context_0)",
    "net_http._ptr_transportRequest.Clone": "_ptr_http_Request __golang net_http__ptr_transportRequest_Clone(_ptr_http_transportRequest, context_Context_0)",
    "net_http.transportRequest.Context": "context_Context_0 __golang net_http_transportRequest_Context(http_transportRequest)",
    "net_http._ptr_transportRequest.Context": "context_Context_0 __golang net_http__ptr_transportRequest_Context(_ptr_http_transportRequest)",
    "net_http.transportRequest.Cookies": "_slice__ptr_http_Cookie __golang net_http_transportRequest_Cookies(http_transportRequest)",
    "net_http._ptr_transportRequest.Cookies": "_slice__ptr_http_Cookie __golang net_http__ptr_transportRequest_Cookies(_ptr_http_transportRequest)",
    "net_http.transportRequest.FormValue": "string_0 __golang net_http_transportRequest_FormValue(http_transportRequest, string_0)",
    "net_http._ptr_transportRequest.FormValue": "string_0 __golang net_http__ptr_transportRequest_FormValue(_ptr_http_transportRequest, string_0)",
    "net_http.transportRequest.ParseForm": "error_0 __golang net_http_transportRequest_ParseForm(http_transportRequest)",
    "net_http._ptr_transportRequest.ParseForm": "error_0 __golang net_http__ptr_transportRequest_ParseForm(_ptr_http_transportRequest)",
    "net_http.transportRequest.ParseMultipartForm": "error_0 __golang net_http_transportRequest_ParseMultipartForm(http_transportRequest, int64_0)",
    "net_http._ptr_transportRequest.ParseMultipartForm": "error_0 __golang net_http__ptr_transportRequest_ParseMultipartForm(_ptr_http_transportRequest, int64_0)",
    "net_http.transportRequest.PathValue": "string_0 __golang net_http_transportRequest_PathValue(http_transportRequest, string_0)",
    "net_http._ptr_transportRequest.PathValue": "string_0 __golang net_http__ptr_transportRequest_PathValue(_ptr_http_transportRequest, string_0)",
    "net_http.transportRequest.PostFormValue": "string_0 __golang net_http_transportRequest_PostFormValue(http_transportRequest, string_0)",
    "net_http._ptr_transportRequest.PostFormValue": "string_0 __golang net_http__ptr_transportRequest_PostFormValue(_ptr_http_transportRequest, string_0)",
    "net_http.transportRequest.ProtoAtLeast": "bool __golang net_http_transportRequest_ProtoAtLeast(http_transportRequest, int_0, int_0)",
    "net_http._ptr_transportRequest.ProtoAtLeast": "bool __golang net_http__ptr_transportRequest_ProtoAtLeast(_ptr_http_transportRequest, int_0, int_0)",
    "net_http.transportRequest.Referer": "string_0 __golang net_http_transportRequest_Referer(http_transportRequest)",
    "net_http._ptr_transportRequest.Referer": "string_0 __golang net_http__ptr_transportRequest_Referer(_ptr_http_transportRequest)",
    "net_http.transportRequest.SetBasicAuth": "void __golang net_http_transportRequest_SetBasicAuth(http_transportRequest, string_0, string_0)",
    "net_http._ptr_transportRequest.SetBasicAuth": "void __golang net_http__ptr_transportRequest_SetBasicAuth(_ptr_http_transportRequest, string_0, string_0)",
    "net_http.transportRequest.SetPathValue": "void __golang net_http_transportRequest_SetPathValue(http_transportRequest, string_0, string_0)",
    "net_http._ptr_transportRequest.SetPathValue": "void __golang net_http__ptr_transportRequest_SetPathValue(_ptr_http_transportRequest, string_0, string_0)",
    "net_http.transportRequest.UserAgent": "string_0 __golang net_http_transportRequest_UserAgent(http_transportRequest)",
    "net_http._ptr_transportRequest.UserAgent": "string_0 __golang net_http__ptr_transportRequest_UserAgent(_ptr_http_transportRequest)",
    "net_http.transportRequest.WithContext": "_ptr_http_Request __golang net_http_transportRequest_WithContext(http_transportRequest, context_Context_0)",
    "net_http._ptr_transportRequest.WithContext": "_ptr_http_Request __golang net_http__ptr_transportRequest_WithContext(_ptr_http_transportRequest, context_Context_0)",
    "net_http.transportRequest.Write": "error_0 __golang net_http_transportRequest_Write(http_transportRequest, io_Writer_0)",
    "net_http._ptr_transportRequest.Write": "error_0 __golang net_http__ptr_transportRequest_Write(_ptr_http_transportRequest, io_Writer_0)",
    "net_http.transportRequest.WriteProxy": "error_0 __golang net_http_transportRequest_WriteProxy(http_transportRequest, io_Writer_0)",
    "net_http._ptr_transportRequest.WriteProxy": "error_0 __golang net_http__ptr_transportRequest_WriteProxy(_ptr_http_transportRequest, io_Writer_0)",
    "net_http._ptr_http2FrameType.String": "string_0 __golang net_http__ptr_http2FrameType_String(_ptr_http_http2FrameType)",
    "net_http._ptr_http2Flags.Has": "bool __golang net_http__ptr_http2Flags_Has(_ptr_http_http2Flags, http_http2Flags)",
    "net_http._ptr_http2FrameHeader.String": "string_0 __golang net_http__ptr_http2FrameHeader_String(_ptr_http_http2FrameHeader)",
    "net_http._ptr_http2ErrCode.String": "string_0 __golang net_http__ptr_http2ErrCode_String(_ptr_http_http2ErrCode)",
    "net_http.http2GoAwayFrame.Header": "http_http2FrameHeader __golang net_http_http2GoAwayFrame_Header(http_http2GoAwayFrame)",
    "net_http._ptr_http2GoAwayFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2GoAwayFrame_Header(_ptr_http_http2GoAwayFrame)",
    "net_http.http2GoAwayFrame.String": "string_0 __golang net_http_http2GoAwayFrame_String(http_http2GoAwayFrame)",
    "net_http._ptr_http2GoAwayFrame.String": "string_0 __golang net_http__ptr_http2GoAwayFrame_String(_ptr_http_http2GoAwayFrame)",
    "net_http._ptr_http2GoAwayFrame.invalidate": "void __golang net_http__ptr_http2GoAwayFrame_invalidate(_ptr_http_http2GoAwayFrame)",
    "net_http.http2DataFrame.Header": "http_http2FrameHeader __golang net_http_http2DataFrame_Header(http_http2DataFrame)",
    "net_http._ptr_http2DataFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2DataFrame_Header(_ptr_http_http2DataFrame)",
    "net_http.http2DataFrame.String": "string_0 __golang net_http_http2DataFrame_String(http_http2DataFrame)",
    "net_http._ptr_http2DataFrame.String": "string_0 __golang net_http__ptr_http2DataFrame_String(_ptr_http_http2DataFrame)",
    "net_http._ptr_http2DataFrame.invalidate": "void __golang net_http__ptr_http2DataFrame_invalidate(_ptr_http_http2DataFrame)",
    "net_http._ptr_http2SettingID.String": "string_0 __golang net_http__ptr_http2SettingID_String(_ptr_http_http2SettingID)",
    "net_http._ptr_http2Setting.String": "string_0 __golang net_http__ptr_http2Setting_String(_ptr_http_http2Setting)",
    "net_http._ptr_http2Setting.Valid": "error_0 __golang net_http__ptr_http2Setting_Valid(_ptr_http_http2Setting)",
    "net_http._ptr_http2PriorityParam.IsZero": "bool __golang net_http__ptr_http2PriorityParam_IsZero(_ptr_http_http2PriorityParam)",
    "net_http.http2HeadersFrame.Header": "http_http2FrameHeader __golang net_http_http2HeadersFrame_Header(http_http2HeadersFrame)",
    "net_http._ptr_http2HeadersFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2HeadersFrame_Header(_ptr_http_http2HeadersFrame)",
    "net_http.http2HeadersFrame.String": "string_0 __golang net_http_http2HeadersFrame_String(http_http2HeadersFrame)",
    "net_http._ptr_http2HeadersFrame.String": "string_0 __golang net_http__ptr_http2HeadersFrame_String(_ptr_http_http2HeadersFrame)",
    "net_http._ptr_http2HeadersFrame.invalidate": "void __golang net_http__ptr_http2HeadersFrame_invalidate(_ptr_http_http2HeadersFrame)",
    "net_http.http2MetaHeadersFrame.HasPriority": "bool __golang net_http_http2MetaHeadersFrame_HasPriority(http_http2MetaHeadersFrame)",
    "net_http._ptr_http2MetaHeadersFrame.HasPriority": "bool __golang net_http__ptr_http2MetaHeadersFrame_HasPriority(_ptr_http_http2MetaHeadersFrame)",
    "net_http.http2MetaHeadersFrame.Header": "http_http2FrameHeader __golang net_http_http2MetaHeadersFrame_Header(http_http2MetaHeadersFrame)",
    "net_http._ptr_http2MetaHeadersFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2MetaHeadersFrame_Header(_ptr_http_http2MetaHeadersFrame)",
    "net_http.http2MetaHeadersFrame.HeaderBlockFragment": "_slice_uint8_0 __golang net_http_http2MetaHeadersFrame_HeaderBlockFragment(http_http2MetaHeadersFrame)",
    "net_http._ptr_http2MetaHeadersFrame.HeaderBlockFragment": "_slice_uint8_0 __golang net_http__ptr_http2MetaHeadersFrame_HeaderBlockFragment(_ptr_http_http2MetaHeadersFrame)",
    "net_http.http2MetaHeadersFrame.HeadersEnded": "bool __golang net_http_http2MetaHeadersFrame_HeadersEnded(http_http2MetaHeadersFrame)",
    "net_http._ptr_http2MetaHeadersFrame.HeadersEnded": "bool __golang net_http__ptr_http2MetaHeadersFrame_HeadersEnded(_ptr_http_http2MetaHeadersFrame)",
    "net_http.http2MetaHeadersFrame.StreamEnded": "bool __golang net_http_http2MetaHeadersFrame_StreamEnded(http_http2MetaHeadersFrame)",
    "net_http._ptr_http2MetaHeadersFrame.StreamEnded": "bool __golang net_http__ptr_http2MetaHeadersFrame_StreamEnded(_ptr_http_http2MetaHeadersFrame)",
    "net_http.http2MetaHeadersFrame.String": "string_0 __golang net_http_http2MetaHeadersFrame_String(http_http2MetaHeadersFrame)",
    "net_http._ptr_http2MetaHeadersFrame.String": "string_0 __golang net_http__ptr_http2MetaHeadersFrame_String(_ptr_http_http2MetaHeadersFrame)",
    "net_http.http2MetaHeadersFrame.invalidate": "void __golang net_http_http2MetaHeadersFrame_invalidate(http_http2MetaHeadersFrame)",
    "net_http._ptr_http2MetaHeadersFrame.invalidate": "void __golang net_http__ptr_http2MetaHeadersFrame_invalidate(_ptr_http_http2MetaHeadersFrame)",
    "net_http.http2noDialClientConnPool.MarkDead": "void __golang net_http_http2noDialClientConnPool_MarkDead(http_http2noDialClientConnPool, _ptr_http_http2ClientConn)",
    "net_http._ptr_http2noDialClientConnPool.MarkDead": "void __golang net_http__ptr_http2noDialClientConnPool_MarkDead(_ptr_http_http2noDialClientConnPool, _ptr_http_http2ClientConn)",
    "net_http.http2noDialClientConnPool.closeIdleConnections": "void __golang net_http_http2noDialClientConnPool_closeIdleConnections(http_http2noDialClientConnPool)",
    "net_http._ptr_http2noDialClientConnPool.closeIdleConnections": "void __golang net_http__ptr_http2noDialClientConnPool_closeIdleConnections(_ptr_http_http2noDialClientConnPool)",
    "net_http._ptr_http2streamState.String": "string_0 __golang net_http__ptr_http2streamState_String(_ptr_http_http2streamState)",
    "net_http._ptr_http2FrameWriteRequest.DataSize": "int_0 __golang net_http__ptr_http2FrameWriteRequest_DataSize(_ptr_http_http2FrameWriteRequest)",
    "net_http._ptr_http2FrameWriteRequest.StreamID": "uint32_0 __golang net_http__ptr_http2FrameWriteRequest_StreamID(_ptr_http_http2FrameWriteRequest)",
    "net_http._ptr_http2FrameWriteRequest.String": "string_0 __golang net_http__ptr_http2FrameWriteRequest_String(_ptr_http_http2FrameWriteRequest)",
    "net_http._ptr_ConnState.String": "string_0 __golang net_http__ptr_ConnState_String(_ptr_http_ConnState)",
    "net_http._ptr_http2StreamError.As": "bool __golang net_http__ptr_http2StreamError_As(_ptr_http_http2StreamError, interface__0)",
    "net_http._ptr_http2StreamError.Error": "string_0 __golang net_http__ptr_http2StreamError_Error(_ptr_http_http2StreamError)",
    "net_http._ptr_http2StreamError.staysWithinBuffer": "bool __golang net_http__ptr_http2StreamError_staysWithinBuffer(_ptr_http_http2StreamError, int_0)",
    "net_http._ptr_http2StreamError.writeFrame": "error_0 __golang net_http__ptr_http2StreamError_writeFrame(_ptr_http_http2StreamError, http_http2writeContext)",
    "net_http.http2PingFrame.Header": "http_http2FrameHeader __golang net_http_http2PingFrame_Header(http_http2PingFrame)",
    "net_http._ptr_http2PingFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2PingFrame_Header(_ptr_http_http2PingFrame)",
    "net_http.http2PingFrame.String": "string_0 __golang net_http_http2PingFrame_String(http_http2PingFrame)",
    "net_http._ptr_http2PingFrame.String": "string_0 __golang net_http__ptr_http2PingFrame_String(_ptr_http_http2PingFrame)",
    "net_http._ptr_http2PingFrame.invalidate": "void __golang net_http__ptr_http2PingFrame_invalidate(_ptr_http_http2PingFrame)",
    "net_http.http2WindowUpdateFrame.Header": "http_http2FrameHeader __golang net_http_http2WindowUpdateFrame_Header(http_http2WindowUpdateFrame)",
    "net_http._ptr_http2WindowUpdateFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2WindowUpdateFrame_Header(_ptr_http_http2WindowUpdateFrame)",
    "net_http.http2WindowUpdateFrame.String": "string_0 __golang net_http_http2WindowUpdateFrame_String(http_http2WindowUpdateFrame)",
    "net_http._ptr_http2WindowUpdateFrame.String": "string_0 __golang net_http__ptr_http2WindowUpdateFrame_String(_ptr_http_http2WindowUpdateFrame)",
    "net_http._ptr_http2WindowUpdateFrame.invalidate": "void __golang net_http__ptr_http2WindowUpdateFrame_invalidate(_ptr_http_http2WindowUpdateFrame)",
    "net_http.http2RSTStreamFrame.Header": "http_http2FrameHeader __golang net_http_http2RSTStreamFrame_Header(http_http2RSTStreamFrame)",
    "net_http._ptr_http2RSTStreamFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2RSTStreamFrame_Header(_ptr_http_http2RSTStreamFrame)",
    "net_http.http2RSTStreamFrame.String": "string_0 __golang net_http_http2RSTStreamFrame_String(http_http2RSTStreamFrame)",
    "net_http._ptr_http2RSTStreamFrame.String": "string_0 __golang net_http__ptr_http2RSTStreamFrame_String(_ptr_http_http2RSTStreamFrame)",
    "net_http._ptr_http2RSTStreamFrame.invalidate": "void __golang net_http__ptr_http2RSTStreamFrame_invalidate(_ptr_http_http2RSTStreamFrame)",
    "net_http.http2SettingsFrame.Header": "http_http2FrameHeader __golang net_http_http2SettingsFrame_Header(http_http2SettingsFrame)",
    "net_http._ptr_http2SettingsFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2SettingsFrame_Header(_ptr_http_http2SettingsFrame)",
    "net_http.http2SettingsFrame.String": "string_0 __golang net_http_http2SettingsFrame_String(http_http2SettingsFrame)",
    "net_http._ptr_http2SettingsFrame.String": "string_0 __golang net_http__ptr_http2SettingsFrame_String(_ptr_http_http2SettingsFrame)",
    "net_http._ptr_http2SettingsFrame.invalidate": "void __golang net_http__ptr_http2SettingsFrame_invalidate(_ptr_http_http2SettingsFrame)",
    "net_http.http2PriorityFrame.Header": "http_http2FrameHeader __golang net_http_http2PriorityFrame_Header(http_http2PriorityFrame)",
    "net_http._ptr_http2PriorityFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2PriorityFrame_Header(_ptr_http_http2PriorityFrame)",
    "net_http.http2PriorityFrame.IsZero": "bool __golang net_http_http2PriorityFrame_IsZero(http_http2PriorityFrame)",
    "net_http._ptr_http2PriorityFrame.IsZero": "bool __golang net_http__ptr_http2PriorityFrame_IsZero(_ptr_http_http2PriorityFrame)",
    "net_http.http2PriorityFrame.String": "string_0 __golang net_http_http2PriorityFrame_String(http_http2PriorityFrame)",
    "net_http._ptr_http2PriorityFrame.String": "string_0 __golang net_http__ptr_http2PriorityFrame_String(_ptr_http_http2PriorityFrame)",
    "net_http._ptr_http2PriorityFrame.invalidate": "void __golang net_http__ptr_http2PriorityFrame_invalidate(_ptr_http_http2PriorityFrame)",
    "net_http._ptr_http2closeWaiter.Close": "void __golang net_http__ptr_http2closeWaiter_Close(_ptr_http_http2closeWaiter)",
    "net_http._ptr_http2closeWaiter.Wait": "void __golang net_http__ptr_http2closeWaiter_Wait(_ptr_http_http2closeWaiter)",
    "net_http._ptr_http2noCachedConnError.Error": "string_0 __golang net_http__ptr_http2noCachedConnError_Error(_ptr_http_http2noCachedConnError)",
    "net_http._ptr_http2noCachedConnError.IsHTTP2NoCachedConnError": "void __golang net_http__ptr_http2noCachedConnError_IsHTTP2NoCachedConnError(_ptr_http_http2noCachedConnError)",
    "net_http._ptr_http2noBodyReader.Close": "error_0 __golang net_http__ptr_http2noBodyReader_Close(_ptr_http_http2noBodyReader)",
    "net_http._ptr_noBody.Close": "error_0 __golang net_http__ptr_noBody_Close(_ptr_http_noBody)",
    "net_http._ptr_htmlSig.match": "string_0 __golang net_http__ptr_htmlSig_match(_ptr_http_htmlSig, _slice_uint8_0, int_0)",
    "net_http._ptr_mp4Sig.match": "string_0 __golang net_http__ptr_mp4Sig_match(_ptr_http_mp4Sig, _slice_uint8_0, int_0)",
    "net_http._ptr_textSig.match": "string_0 __golang net_http__ptr_textSig_match(_ptr_http_textSig, _slice_uint8_0, int_0)",
    "net_http._ptr_fakeLocker.Lock": "void __golang net_http__ptr_fakeLocker_Lock(_ptr_http_fakeLocker)",
    "net_http._ptr_fakeLocker.Unlock": "void __golang net_http__ptr_fakeLocker_Unlock(_ptr_http_fakeLocker)",
    "net_http._ptr_fileInfoDirs.isDir": "bool __golang net_http__ptr_fileInfoDirs_isDir(_ptr_http_fileInfoDirs, int_0)",
    "net_http._ptr_fileInfoDirs.len": "int_0 __golang net_http__ptr_fileInfoDirs_len(_ptr_http_fileInfoDirs)",
    "net_http._ptr_fileInfoDirs.name": "string_0 __golang net_http__ptr_fileInfoDirs_name(_ptr_http_fileInfoDirs, int_0)",
    "net_http._ptr_dirEntryDirs.isDir": "bool __golang net_http__ptr_dirEntryDirs_isDir(_ptr_http_dirEntryDirs, int_0)",
    "net_http._ptr_dirEntryDirs.len": "int_0 __golang net_http__ptr_dirEntryDirs_len(_ptr_http_dirEntryDirs)",
    "net_http._ptr_dirEntryDirs.name": "string_0 __golang net_http__ptr_dirEntryDirs_name(_ptr_http_dirEntryDirs, int_0)",
    "net_http._ptr_http2ConnectionError.Error": "string_0 __golang net_http__ptr_http2ConnectionError_Error(_ptr_http_http2ConnectionError)",
    "net_http._ptr_http2goAwayFlowError.Error": "string_0 __golang net_http__ptr_http2goAwayFlowError_Error(_ptr_http_http2goAwayFlowError)",
    "net_http._ptr_http2connError.Error": "string_0 __golang net_http__ptr_http2connError_Error(_ptr_http_http2connError)",
    "net_http._ptr_http2pseudoHeaderError.Error": "string_0 __golang net_http__ptr_http2pseudoHeaderError_Error(_ptr_http_http2pseudoHeaderError)",
    "net_http._ptr_http2duplicatePseudoHeaderError.Error": "string_0 __golang net_http__ptr_http2duplicatePseudoHeaderError_Error(_ptr_http_http2duplicatePseudoHeaderError)",
    "net_http._ptr_http2headerFieldNameError.Error": "string_0 __golang net_http__ptr_http2headerFieldNameError_Error(_ptr_http_http2headerFieldNameError)",
    "net_http._ptr_http2headerFieldValueError.Error": "string_0 __golang net_http__ptr_http2headerFieldValueError_Error(_ptr_http_http2headerFieldValueError)",
    "net_http.http2UnknownFrame.Header": "http_http2FrameHeader __golang net_http_http2UnknownFrame_Header(http_http2UnknownFrame)",
    "net_http._ptr_http2UnknownFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2UnknownFrame_Header(_ptr_http_http2UnknownFrame)",
    "net_http.http2UnknownFrame.String": "string_0 __golang net_http_http2UnknownFrame_String(http_http2UnknownFrame)",
    "net_http._ptr_http2UnknownFrame.String": "string_0 __golang net_http__ptr_http2UnknownFrame_String(_ptr_http_http2UnknownFrame)",
    "net_http._ptr_http2UnknownFrame.invalidate": "void __golang net_http__ptr_http2UnknownFrame_invalidate(_ptr_http_http2UnknownFrame)",
    "net_http.http2ContinuationFrame.Header": "http_http2FrameHeader __golang net_http_http2ContinuationFrame_Header(http_http2ContinuationFrame)",
    "net_http._ptr_http2ContinuationFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2ContinuationFrame_Header(_ptr_http_http2ContinuationFrame)",
    "net_http.http2ContinuationFrame.String": "string_0 __golang net_http_http2ContinuationFrame_String(http_http2ContinuationFrame)",
    "net_http._ptr_http2ContinuationFrame.String": "string_0 __golang net_http__ptr_http2ContinuationFrame_String(_ptr_http_http2ContinuationFrame)",
    "net_http._ptr_http2ContinuationFrame.invalidate": "void __golang net_http__ptr_http2ContinuationFrame_invalidate(_ptr_http_http2ContinuationFrame)",
    "net_http.http2PushPromiseFrame.Header": "http_http2FrameHeader __golang net_http_http2PushPromiseFrame_Header(http_http2PushPromiseFrame)",
    "net_http._ptr_http2PushPromiseFrame.Header": "http_http2FrameHeader __golang net_http__ptr_http2PushPromiseFrame_Header(_ptr_http_http2PushPromiseFrame)",
    "net_http.http2PushPromiseFrame.String": "string_0 __golang net_http_http2PushPromiseFrame_String(http_http2PushPromiseFrame)",
    "net_http._ptr_http2PushPromiseFrame.String": "string_0 __golang net_http__ptr_http2PushPromiseFrame_String(_ptr_http_http2PushPromiseFrame)",
    "net_http._ptr_http2PushPromiseFrame.invalidate": "void __golang net_http__ptr_http2PushPromiseFrame_invalidate(_ptr_http_http2PushPromiseFrame)",
    "net_http._ptr_HandlerFunc.ServeHTTP": "void __golang net_http__ptr_HandlerFunc_ServeHTTP(_ptr_http_HandlerFunc, http_ResponseWriter, _ptr_http_Request)",
    "net_http._ptr_http2GoAwayError.Error": "string_0 __golang net_http__ptr_http2GoAwayError_Error(_ptr_http_http2GoAwayError)",
    "net_http._ptr_http2transportResponseBody.Close": "error_0 __golang net_http__ptr_http2transportResponseBody_Close(_ptr_http_http2transportResponseBody)",
    "net_http._ptr_http2missingBody.Close": "error_0 __golang net_http__ptr_http2missingBody_Close(_ptr_http_http2missingBody)",
    "net_http._ptr_http2erringRoundTripper.RoundTripErr": "error_0 __golang net_http__ptr_http2erringRoundTripper_RoundTripErr(_ptr_http_http2erringRoundTripper)",
    "net_http.http2noDialH2RoundTripper.CloseIdleConnections": "void __golang net_http_http2noDialH2RoundTripper_CloseIdleConnections(http_http2noDialH2RoundTripper)",
    "net_http._ptr_http2noDialH2RoundTripper.CloseIdleConnections": "void __golang net_http__ptr_http2noDialH2RoundTripper_CloseIdleConnections(_ptr_http_http2noDialH2RoundTripper)",
    "net_http._ptr_http2Transport.initConnPool_fm": "void __golang net_http__ptr_http2Transport_initConnPool_fm()",
    "net_http._ptr_http2flushFrameWriter.staysWithinBuffer": "bool __golang net_http__ptr_http2flushFrameWriter_staysWithinBuffer(_ptr_http_http2flushFrameWriter, int_0)",
    "net_http._ptr_http2flushFrameWriter.writeFrame": "error_0 __golang net_http__ptr_http2flushFrameWriter_writeFrame(_ptr_http_http2flushFrameWriter, http_http2writeContext)",
    "net_http._ptr_http2writeSettings.staysWithinBuffer": "bool __golang net_http__ptr_http2writeSettings_staysWithinBuffer(_ptr_http_http2writeSettings, int_0)",
    "net_http._ptr_http2writeSettings.writeFrame": "error_0 __golang net_http__ptr_http2writeSettings_writeFrame(_ptr_http_http2writeSettings, http_http2writeContext)",
    "net_http._ptr_http2handlerPanicRST.staysWithinBuffer": "bool __golang net_http__ptr_http2handlerPanicRST_staysWithinBuffer(_ptr_http_http2handlerPanicRST, int_0)",
    "net_http._ptr_http2handlerPanicRST.writeFrame": "error_0 __golang net_http__ptr_http2handlerPanicRST_writeFrame(_ptr_http_http2handlerPanicRST, http_http2writeContext)",
    "net_http._ptr_http2writePingAck.staysWithinBuffer": "bool __golang net_http__ptr_http2writePingAck_staysWithinBuffer(_ptr_http_http2writePingAck, int_0)",
    "net_http._ptr_http2writePingAck.writeFrame": "error_0 __golang net_http__ptr_http2writePingAck_writeFrame(_ptr_http_http2writePingAck, http_http2writeContext)",
    "net_http._ptr_http2writeSettingsAck.staysWithinBuffer": "bool __golang net_http__ptr_http2writeSettingsAck_staysWithinBuffer(_ptr_http_http2writeSettingsAck, int_0)",
    "net_http._ptr_http2writeSettingsAck.writeFrame": "error_0 __golang net_http__ptr_http2writeSettingsAck_writeFrame(_ptr_http_http2writeSettingsAck, http_http2writeContext)",
    "net_http._ptr_http2write100ContinueHeadersFrame.staysWithinBuffer": "bool __golang net_http__ptr_http2write100ContinueHeadersFrame_staysWithinBuffer(_ptr_http_http2write100ContinueHeadersFrame, int_0)",
    "net_http._ptr_http2write100ContinueHeadersFrame.writeFrame": "error_0 __golang net_http__ptr_http2write100ContinueHeadersFrame_writeFrame(_ptr_http_http2write100ContinueHeadersFrame, http_http2writeContext)",
    "net_http._ptr_http2writeWindowUpdate.staysWithinBuffer": "bool __golang net_http__ptr_http2writeWindowUpdate_staysWithinBuffer(_ptr_http_http2writeWindowUpdate, int_0)",
    "net_http._ptr_http2writeWindowUpdate.writeFrame": "error_0 __golang net_http__ptr_http2writeWindowUpdate_writeFrame(_ptr_http_http2writeWindowUpdate, http_http2writeContext)",
    "net_http._ptr_http2sortPriorityNodeSiblings.Len": "int_0 __golang net_http__ptr_http2sortPriorityNodeSiblings_Len(_ptr_http_http2sortPriorityNodeSiblings)",
    "net_http._ptr_http2sortPriorityNodeSiblings.Less": "bool __golang net_http__ptr_http2sortPriorityNodeSiblings_Less(_ptr_http_http2sortPriorityNodeSiblings, int_0, int_0)",
    "net_http._ptr_http2sortPriorityNodeSiblings.Swap": "void __golang net_http__ptr_http2sortPriorityNodeSiblings_Swap(_ptr_http_http2sortPriorityNodeSiblings, int_0, int_0)",
    "net_http.requestBodyReadError.Error": "string_0 __golang net_http_requestBodyReadError_Error(http_requestBodyReadError)",
    "net_http._ptr_requestBodyReadError.Error": "string_0 __golang net_http__ptr_requestBodyReadError_Error(_ptr_http_requestBodyReadError)",
    "net_http._ptr_statusError.Error": "string_0 __golang net_http__ptr_statusError_Error(_ptr_http_statusError)",
    "net_http._ptr_serverHandler.ServeHTTP": "void __golang net_http__ptr_serverHandler_ServeHTTP(_ptr_http_serverHandler, http_ResponseWriter, _ptr_http_Request)",
    "net_http.onceCloseListener.Addr": "net_Addr_0 __golang net_http_onceCloseListener_Addr(http_onceCloseListener)",
    "net_http._ptr_onceCloseListener.Addr": "net_Addr_0 __golang net_http__ptr_onceCloseListener_Addr(_ptr_http_onceCloseListener)",
    "net_http._ptr_globalOptionsHandler.ServeHTTP": "void __golang net_http__ptr_globalOptionsHandler_ServeHTTP(_ptr_http_globalOptionsHandler, http_ResponseWriter, _ptr_http_Request)",
    "net_http._ptr_initALPNRequest.BaseContext": "context_Context_0 __golang net_http__ptr_initALPNRequest_BaseContext(_ptr_http_initALPNRequest)",
    "net_http._ptr_initALPNRequest.ServeHTTP": "void __golang net_http__ptr_initALPNRequest_ServeHTTP(_ptr_http_initALPNRequest, http_ResponseWriter, _ptr_http_Request)",
    "net_http._ptr_transportReadFromServerError.Error": "string_0 __golang net_http__ptr_transportReadFromServerError_Error(_ptr_http_transportReadFromServerError)",
    "net_http._ptr_transportReadFromServerError.Unwrap": "error_0 __golang net_http__ptr_transportReadFromServerError_Unwrap(_ptr_http_transportReadFromServerError)",
    "net_http.readWriteCloserBody.Close": "error_0 __golang net_http_readWriteCloserBody_Close(http_readWriteCloserBody)",
    "net_http._ptr_readWriteCloserBody.Close": "error_0 __golang net_http__ptr_readWriteCloserBody_Close(_ptr_http_readWriteCloserBody)",
    "net_http.nothingWrittenError.Error": "string_0 __golang net_http_nothingWrittenError_Error(http_nothingWrittenError)",
    "net_http._ptr_nothingWrittenError.Error": "string_0 __golang net_http__ptr_nothingWrittenError_Error(_ptr_http_nothingWrittenError)",
    "net_http._ptr_nothingWrittenError.Unwrap": "error_0 __golang net_http__ptr_nothingWrittenError_Unwrap(_ptr_http_nothingWrittenError)",
    "net_http._ptr_tlsHandshakeTimeoutError.Error": "string_0 __golang net_http__ptr_tlsHandshakeTimeoutError_Error(_ptr_http_tlsHandshakeTimeoutError)",
    "net_http._ptr_tlsHandshakeTimeoutError.Temporary": "bool __golang net_http__ptr_tlsHandshakeTimeoutError_Temporary(_ptr_http_tlsHandshakeTimeoutError)",
    "net_http._ptr_tlsHandshakeTimeoutError.Timeout": "bool __golang net_http__ptr_tlsHandshakeTimeoutError_Timeout(_ptr_http_tlsHandshakeTimeoutError)",
    "net_http._ptr_onceCloseListener.close_fm": "void __golang net_http__ptr_onceCloseListener_close_fm()",
    "net_http._ptr_http2writePushPromise.writeHeaderBlock_fm": "error __golang net_http__ptr_http2writePushPromise_writeHeaderBlock_fm(net_http_http2writeContext ctx, _slice_uint8 frag, bool firstFrag, bool lastFrag)",
    "net_http._ptr_http2clientStream.copyTrailers_fm": "void __golang net_http__ptr_http2clientStream_copyTrailers_fm()",
    "net_http._ptr_http2ClientConn.healthCheck_fm": "void __golang net_http__ptr_http2ClientConn_healthCheck_fm()",
    "net_http._ptr_http2serverInternalState.startGracefulShutdown_fm": "void __golang net_http__ptr_http2serverInternalState_startGracefulShutdown_fm()",
    "sync_atomic._ptr_Bool.Load_fm": "bool __golang sync_atomic__ptr_Bool_Load_fm()",
    "net_http._ptr_http2responseWriterState.declareTrailer_fm": "void __golang net_http__ptr_http2responseWriterState_declareTrailer_fm(string k)",
    "net_http._ptr_http2stream.copyTrailersToHandlerRequest_fm": "void __golang net_http__ptr_http2stream_copyTrailersToHandlerRequest_fm()",
    "net_http._ptr_http2writeResHeaders.writeHeaderBlock_fm": "error __golang net_http__ptr_http2writeResHeaders_writeHeaderBlock_fm(net_http_http2writeContext ctx, _slice_uint8 frag, bool firstFrag, bool lastFrag)",
    "net_http._ptr_http2stream.onWriteTimeout_fm": "void __golang net_http__ptr_http2stream_onWriteTimeout_fm()",
    "net_http._ptr_http2stream.onReadTimeout_fm": "void __golang net_http__ptr_http2stream_onReadTimeout_fm()",
    "net_http._ptr_http2serverConn.processSetting_fm": "error __golang net_http__ptr_http2serverConn_processSetting_fm(net_http_http2Setting s)",
    "net_http._ptr_http2serverConn.onShutdownTimer_fm": "void __golang net_http__ptr_http2serverConn_onShutdownTimer_fm()",
    "net_http._ptr_http2serverConn.onIdleTimer_fm": "void __golang net_http__ptr_http2serverConn_onIdleTimer_fm()",
    "net_http._ptr_http2serverConn.onSettingsTimer_fm": "void __golang net_http__ptr_http2serverConn_onSettingsTimer_fm()",
    "net_http.http2gate.Done_fm": "void __golang net_http_http2gate_Done_fm()",
    "net_http._ptr_Server.onceSetNextProtoDefaults_Serve_fm": "void __golang net_http__ptr_Server_onceSetNextProtoDefaults_Serve_fm()",
    "net_http._ptr_Server.onceSetNextProtoDefaults_fm": "void __golang net_http__ptr_Server_onceSetNextProtoDefaults_fm()",
    "net_http._ptr_connReader.startBackgroundRead_fm": "void __golang net_http__ptr_connReader_startBackgroundRead_fm()",
    "net_http._ptr_response.declareTrailer_fm": "void __golang net_http__ptr_response_declareTrailer_fm(string k)",
    "net_http._ptr_http2ClientConn.forceCloseConn_fm": "void __golang net_http__ptr_http2ClientConn_forceCloseConn_fm()",
    "net_http._ptr_http2ClientConn.onIdleTimeout_fm": "void __golang net_http__ptr_http2ClientConn_onIdleTimeout_fm()",
    "net_http._ptr_socksUsernamePassword.Authenticate_fm": "error __golang net_http__ptr_socksUsernamePassword_Authenticate_fm(context_Context ctx, io_ReadWriter rw, __int64 auth)",
    "net_http._ptr_persistConn.closeConnIfStillIdle_fm": "void __golang net_http__ptr_persistConn_closeConnIfStillIdle_fm()",
    "net_http._ptr_Transport.onceSetNextProtoDefaults_fm": "void __golang net_http__ptr_Transport_onceSetNextProtoDefaults_fm()",
    "net_http._ptr_persistConn.cancelRequest_fm": "void __golang net_http__ptr_persistConn_cancelRequest_fm(error err)",
    "net_http_httptest.NewRequest": "net_http_Request *__golang net_http_httptest_NewRequest(string method, string target, io_Reader body)",
    "net_http_httptest._ptr_ResponseRecorder.Header": "http_Header __golang net_http_httptest__ptr_ResponseRecorder_Header(_ptr_httptest_ResponseRecorder)",
    "net_http_httptest._ptr_ResponseRecorder.writeHeader": "void __golang net_http_httptest__ptr_ResponseRecorder_writeHeader(net_http_httptest_ResponseRecorder *rw, _slice_uint8 b, string str)",
    "net_http_httptest._ptr_ResponseRecorder.WriteHeader": "void __golang net_http_httptest__ptr_ResponseRecorder_WriteHeader(_ptr_httptest_ResponseRecorder, int_0)",
    "net_http_httptest._ptr_ResponseRecorder.Flush": "void __golang net_http_httptest__ptr_ResponseRecorder_Flush(_ptr_httptest_ResponseRecorder)",
    "net_http_httptest._ptr_ResponseRecorder.Result": "_ptr_http_Response __golang net_http_httptest__ptr_ResponseRecorder_Result(_ptr_httptest_ResponseRecorder)",
    "net_http_httptest.parseContentLength": "int64 __golang net_http_httptest_parseContentLength(string cl_0)",
    "net_http_httptest.newLocalListener": "net_Listener __golang net_http_httptest_newLocalListener()",
    "net_http_httptest.NewServer": "net_http_httptest_Server *__golang net_http_httptest_NewServer(net_http_Handler handler)",
    "net_http_httptest._ptr_Server.Start": "void __golang net_http_httptest__ptr_Server_Start(_ptr_httptest_Server)",
    "net_http_httptest._ptr_Server.StartTLS": "void __golang net_http_httptest__ptr_Server_StartTLS(_ptr_httptest_Server)",
    "net_http_httptest.NewTLSServer": "net_http_httptest_Server *__golang net_http_httptest_NewTLSServer(net_http_Handler handler)",
    "net_http_httptest._ptr_Server.Close": "void __golang net_http_httptest__ptr_Server_Close(_ptr_httptest_Server)",
    "net_http_httptest._ptr_Server.Close.deferwrap1": "void __golang net_http_httptest__ptr_Server_Close_deferwrap1()",
    "net_http_httptest._ptr_Server.logCloseHangDebugInfo": "void __golang net_http_httptest__ptr_Server_logCloseHangDebugInfo(_ptr_httptest_Server)",
    "net_http_httptest._ptr_Server.logCloseHangDebugInfo.deferwrap1": "void __golang net_http_httptest__ptr_Server_logCloseHangDebugInfo_deferwrap1()",
    "net_http_httptest._ptr_Server.goServe": "void __golang net_http_httptest__ptr_Server_goServe(_ptr_httptest_Server)",
    "net_http_httptest._ptr_Server.closeConn": "void __golang net_http_httptest__ptr_Server_closeConn(_ptr_httptest_Server, net_Conn_0)",
    "net_http_httptest._ptr_Server.logCloseHangDebugInfo_fm": "void __golang net_http_httptest__ptr_Server_logCloseHangDebugInfo_fm()",
    "net_http_httputil._ptr_dumpConn.Close": "error_0 __golang net_http_httputil__ptr_dumpConn_Close(_ptr_httputil_dumpConn)",
    "net_http_httputil._ptr_dumpConn.LocalAddr": "net_Addr_0 __golang net_http_httputil__ptr_dumpConn_LocalAddr(_ptr_httputil_dumpConn)",
    "net_http_httputil._ptr_dumpConn.RemoteAddr": "net_Addr_0 __golang net_http_httputil__ptr_dumpConn_RemoteAddr(_ptr_httputil_dumpConn)",
    "net_http_httputil._ptr_dumpConn.SetDeadline": "error_0 __golang net_http_httputil__ptr_dumpConn_SetDeadline(_ptr_httputil_dumpConn, time_Time_0)",
    "net_http_httputil._ptr_dumpConn.SetReadDeadline": "error_0 __golang net_http_httputil__ptr_dumpConn_SetReadDeadline(_ptr_httputil_dumpConn, time_Time_0)",
    "net_http_httputil._ptr_dumpConn.SetWriteDeadline": "error_0 __golang net_http_httputil__ptr_dumpConn_SetWriteDeadline(_ptr_httputil_dumpConn, time_Time_0)",
    "net_http_httputil.DumpRequestOut.deferwrap3": "void __golang net_http_httputil_DumpRequestOut_deferwrap3()",
    "net_http_httputil.DumpRequestOut.deferwrap2": "void __golang net_http_httputil_DumpRequestOut_deferwrap2()",
    "net_http_httputil.DumpRequestOut.deferwrap1": "void __golang net_http_httputil_DumpRequestOut_deferwrap1()",
    "net_http_httputil.failureToReadBody.Close": "error_0 __golang net_http_httputil_failureToReadBody_Close(httputil_failureToReadBody)",
    "net_http_httputil._ptr_ProxyRequest.SetURL": "void __golang net_http_httputil__ptr_ProxyRequest_SetURL(_ptr_httputil_ProxyRequest, _ptr_url_URL)",
    "net_http_httputil._ptr_ProxyRequest.SetXForwarded": "void __golang net_http_httputil__ptr_ProxyRequest_SetXForwarded(_ptr_httputil_ProxyRequest)",
    "net_http_httputil.rewriteRequestURL": "void __golang net_http_httputil_rewriteRequestURL(net_http_Request *req, net_url_URL *target)",
    "net_http_httputil.copyHeader": "void __golang net_http_httputil_copyHeader(net_http_Header dst, net_http_Header src)",
    "net_http_httputil._ptr_ReverseProxy.defaultErrorHandler": "void __golang net_http_httputil__ptr_ReverseProxy_defaultErrorHandler(_ptr_httputil_ReverseProxy, http_ResponseWriter, _ptr_http_Request, error_0)",
    "net_http_httputil._ptr_ReverseProxy.modifyResponse": "bool __golang net_http_httputil__ptr_ReverseProxy_modifyResponse(net_http_httputil_ReverseProxy *p, net_http_ResponseWriter rw, net_http_Response *res, net_http_Request *req)",
    "net_http_httputil._ptr_ReverseProxy.ServeHTTP": "void __golang net_http_httputil__ptr_ReverseProxy_ServeHTTP(_ptr_httputil_ReverseProxy, http_ResponseWriter, _ptr_http_Request)",
    "net_http_httputil._ptr_ReverseProxy.ServeHTTP.deferwrap2": "void __golang net_http_httputil__ptr_ReverseProxy_ServeHTTP_deferwrap2()",
    "net_http_httputil._ptr_ReverseProxy.ServeHTTP.deferwrap1": "void __golang net_http_httputil__ptr_ReverseProxy_ServeHTTP_deferwrap1()",
    "net_http_httputil.shouldPanicOnCopyError": "bool __golang net_http_httputil_shouldPanicOnCopyError(net_http_Request *req)",
    "net_http_httputil.removeHopByHopHeaders": "void __golang net_http_httputil_removeHopByHopHeaders(net_http_Header h)",
    "net_http_httputil._ptr_ReverseProxy.flushInterval": "__int64 __golang net_http_httputil__ptr_ReverseProxy_flushInterval(net_http_httputil_ReverseProxy *p, net_http_Response *res)",
    "net_http_httputil._ptr_ReverseProxy.copyResponse.deferwrap2": "void __golang net_http_httputil__ptr_ReverseProxy_copyResponse_deferwrap2()",
    "net_http_httputil._ptr_ReverseProxy.copyResponse.deferwrap1": "void __golang net_http_httputil__ptr_ReverseProxy_copyResponse_deferwrap1()",
    "net_http_httputil._ptr_ReverseProxy.logf": "void __golang net_http_httputil__ptr_ReverseProxy_logf(_ptr_httputil_ReverseProxy, string_0, _slice_interface__0)",
    "net_http_httputil._ptr_maxLatencyWriter.Write.deferwrap1": "void __golang net_http_httputil__ptr_maxLatencyWriter_Write_deferwrap1()",
    "net_http_httputil._ptr_maxLatencyWriter.delayedFlush": "void __golang net_http_httputil__ptr_maxLatencyWriter_delayedFlush(_ptr_httputil_maxLatencyWriter)",
    "net_http_httputil._ptr_maxLatencyWriter.delayedFlush.deferwrap1": "void __golang net_http_httputil__ptr_maxLatencyWriter_delayedFlush_deferwrap1()",
    "net_http_httputil._ptr_maxLatencyWriter.stop": "void __golang net_http_httputil__ptr_maxLatencyWriter_stop(_ptr_httputil_maxLatencyWriter)",
    "net_http_httputil._ptr_maxLatencyWriter.stop.deferwrap1": "void __golang net_http_httputil__ptr_maxLatencyWriter_stop_deferwrap1()",
    "net_http_httputil.upgradeType": "string __golang net_http_httputil_upgradeType(net_http_Header h)",
    "net_http_httputil._ptr_ReverseProxy.handleUpgradeResponse": "void __golang net_http_httputil__ptr_ReverseProxy_handleUpgradeResponse(net_http_httputil_ReverseProxy *p, net_http_ResponseWriter rw, net_http_Request *req, net_http_Response *res)",
    "net_http_httputil._ptr_ReverseProxy.handleUpgradeResponse.gowrap4": "void __golang net_http_httputil__ptr_ReverseProxy_handleUpgradeResponse_gowrap4()",
    "net_http_httputil._ptr_ReverseProxy.handleUpgradeResponse.gowrap3": "void __golang net_http_httputil__ptr_ReverseProxy_handleUpgradeResponse_gowrap3()",
    "net_http_httputil._ptr_ReverseProxy.handleUpgradeResponse.deferwrap2": "void __golang net_http_httputil__ptr_ReverseProxy_handleUpgradeResponse_deferwrap2()",
    "net_http_httputil._ptr_ReverseProxy.handleUpgradeResponse.deferwrap1": "void __golang net_http_httputil__ptr_ReverseProxy_handleUpgradeResponse_deferwrap1()",
    "net_http_httputil.switchProtocolCopier.copyFromBackend": "void __golang net_http_httputil_switchProtocolCopier_copyFromBackend(net_http_httputil_switchProtocolCopier c, chan_chan_left__error errc)",
    "net_http_httputil.switchProtocolCopier.copyToBackend": "void __golang net_http_httputil_switchProtocolCopier_copyToBackend(net_http_httputil_switchProtocolCopier c, chan_chan_left__error errc)",
    "net_http_httputil.cleanQueryParams": "string __golang net_http_httputil_cleanQueryParams(string s)",
    "net_http_httputil._ptr_failureToReadBody.Close": "error_0 __golang net_http_httputil__ptr_failureToReadBody_Close(_ptr_httputil_failureToReadBody)",
    "net_http_httputil._ptr_maxLatencyWriter.delayedFlush_fm": "void __golang net_http_httputil__ptr_maxLatencyWriter_delayedFlush_fm()",
    "net_http._ptr_ResponseController.Flush_fm": "error __golang net_http__ptr_ResponseController_Flush_fm()",
    "net_http_httputil._ptr_ReverseProxy.defaultErrorHandler_fm": "void __golang net_http_httputil__ptr_ReverseProxy_defaultErrorHandler_fm(net_http_ResponseWriter rw, net_http_Request *req, error err)",
    "net_mail.debugT.Printf": "void __golang net_mail_debugT_Printf(bool d, string format, _slice_interface_ args)",
    "net_mail._ptr_addrParser.consumeAddrSpec": "void __golang net_mail__ptr_addrParser_consumeAddrSpec(string spec, error err, net_mail_addrParser *p)",
    "net_mail._ptr_addrParser.skipCFWS": "bool __golang net_mail__ptr_addrParser_skipCFWS(net_mail_addrParser *p)",
    "net_mail.charsetError.Error": "string_0 __golang net_mail_charsetError_Error(mail_charsetError)",
    "net_mail._ptr_charsetError.Error": "string_0 __golang net_mail__ptr_charsetError_Error(_ptr_mail_charsetError)",
    "net_smtp._ptr_Client.Close": "error_0 __golang net_smtp__ptr_Client_Close(_ptr_smtp_Client)",
    "net_smtp._ptr_Client.hello": "error_0 __golang net_smtp__ptr_Client_hello(_ptr_smtp_Client)",
    "net_smtp._ptr_Client.Hello": "error_0 __golang net_smtp__ptr_Client_Hello(_ptr_smtp_Client, string_0)",
    "net_smtp._ptr_Client.cmd.deferwrap1": "void __golang net_smtp__ptr_Client_cmd_deferwrap1()",
    "net_smtp._ptr_Client.ehlo": "error_0 __golang net_smtp__ptr_Client_ehlo(_ptr_smtp_Client)",
    "net_smtp._ptr_Client.StartTLS": "error_0 __golang net_smtp__ptr_Client_StartTLS(_ptr_smtp_Client, _ptr_tls_Config)",
    "net_smtp._ptr_Client.Verify": "error_0 __golang net_smtp__ptr_Client_Verify(_ptr_smtp_Client, string_0)",
    "net_smtp._ptr_Client.Auth": "error_0 __golang net_smtp__ptr_Client_Auth(_ptr_smtp_Client, smtp_Auth)",
    "net_smtp._ptr_Client.Mail": "error_0 __golang net_smtp__ptr_Client_Mail(_ptr_smtp_Client, string_0)",
    "net_smtp._ptr_Client.Rcpt": "error_0 __golang net_smtp__ptr_Client_Rcpt(_ptr_smtp_Client, string_0)",
    "net_smtp._ptr_dataCloser.Close": "error_0 __golang net_smtp__ptr_dataCloser_Close(_ptr_smtp_dataCloser)",
    "net_smtp.SendMail": "void __golang net_smtp_SendMail(string addr, _slice_uint8 msg, net_smtp_Auth a, string from, error _r0, error _r0, _slice_string to)",
    "net_smtp.SendMail.deferwrap1": "void __golang net_smtp_SendMail_deferwrap1()",
    "net_smtp._ptr_Client.Reset": "error_0 __golang net_smtp__ptr_Client_Reset(_ptr_smtp_Client)",
    "net_smtp._ptr_Client.Noop": "error_0 __golang net_smtp__ptr_Client_Noop(_ptr_smtp_Client)",
    "net_smtp._ptr_Client.Quit": "error_0 __golang net_smtp__ptr_Client_Quit(_ptr_smtp_Client)",
    "net_smtp.validateLine": "error __golang net_smtp_validateLine(string line)",
    "os_exec._ptr_Error.Error": "string_0 __golang os_exec__ptr_Error_Error(_ptr_exec_Error)",
    "os_exec._ptr_Error.Unwrap": "error_0 __golang os_exec__ptr_Error_Unwrap(_ptr_exec_Error)",
    "os_exec.wrappedError.Error": "string_0 __golang os_exec_wrappedError_Error(exec_wrappedError)",
    "os_exec.wrappedError.Unwrap": "error_0 __golang os_exec_wrappedError_Unwrap(exec_wrappedError)",
    "os_exec.Command": "os_exec_Cmd *__golang os_exec_Command(string name, _slice_string arg)",
    "os_exec.CommandContext": "os_exec_Cmd *__golang os_exec_CommandContext(context_Context ctx, string name, _slice_string arg)",
    "os_exec._ptr_Cmd.String": "string_0 __golang os_exec__ptr_Cmd_String(_ptr_exec_Cmd)",
    "os_exec._ptr_Cmd.Run": "error_0 __golang os_exec__ptr_Cmd_Run(_ptr_exec_Cmd)",
    "os_exec._ptr_Cmd.Start": "error_0 __golang os_exec__ptr_Cmd_Start(_ptr_exec_Cmd)",
    "os_exec._ptr_Cmd.Start.gowrap2": "void __golang os_exec__ptr_Cmd_Start_gowrap2()",
    "os_exec._ptr_Cmd.Start.gowrap1": "void __golang os_exec__ptr_Cmd_Start_gowrap1()",
    "os_exec._ptr_Cmd.watchCtx": "void __golang os_exec__ptr_Cmd_watchCtx(os_exec_Cmd *c, chan_chan_left__os_exec_ctxResult resultc)",
    "os_exec._ptr_ExitError.Error": "string_0 __golang os_exec__ptr_ExitError_Error(_ptr_exec_ExitError)",
    "os_exec._ptr_Cmd.Wait": "error_0 __golang os_exec__ptr_Cmd_Wait(_ptr_exec_Cmd)",
    "os_exec._ptr_prefixSuffixSaver.Bytes": "_slice_uint8_0 __golang os_exec__ptr_prefixSuffixSaver_Bytes(_ptr_exec_prefixSuffixSaver)",
    "os_exec._ptr_Cmd.Environ": "_slice_string_0 __golang os_exec__ptr_Cmd_Environ(_ptr_exec_Cmd)",
    "os_exec.findExecutable": "error __golang os_exec_findExecutable(string file)",
    "os_exec._ptr_wrappedError.Error": "string_0 __golang os_exec__ptr_wrappedError_Error(_ptr_exec_wrappedError)",
    "os_exec._ptr_wrappedError.Unwrap": "error_0 __golang os_exec__ptr_wrappedError_Unwrap(_ptr_exec_wrappedError)",
    "os_exec.ExitError.ExitCode": "int_0 __golang os_exec_ExitError_ExitCode(exec_ExitError)",
    "os_exec._ptr_ExitError.ExitCode": "int_0 __golang os_exec__ptr_ExitError_ExitCode(_ptr_exec_ExitError)",
    "os_exec.ExitError.Exited": "bool __golang os_exec_ExitError_Exited(exec_ExitError)",
    "os_exec._ptr_ExitError.Exited": "bool __golang os_exec__ptr_ExitError_Exited(_ptr_exec_ExitError)",
    "os_exec.ExitError.Pid": "int_0 __golang os_exec_ExitError_Pid(exec_ExitError)",
    "os_exec._ptr_ExitError.Pid": "int_0 __golang os_exec__ptr_ExitError_Pid(_ptr_exec_ExitError)",
    "os_exec.ExitError.String": "string_0 __golang os_exec_ExitError_String(exec_ExitError)",
    "os_exec._ptr_ExitError.String": "string_0 __golang os_exec__ptr_ExitError_String(_ptr_exec_ExitError)",
    "os_exec.ExitError.Success": "bool __golang os_exec_ExitError_Success(exec_ExitError)",
    "os_exec._ptr_ExitError.Success": "bool __golang os_exec__ptr_ExitError_Success(_ptr_exec_ExitError)",
    "os_exec.ExitError.Sys": "interface__0 __golang os_exec_ExitError_Sys(exec_ExitError)",
    "os_exec._ptr_ExitError.Sys": "interface__0 __golang os_exec__ptr_ExitError_Sys(_ptr_exec_ExitError)",
    "os_exec.ExitError.SysUsage": "interface__0 __golang os_exec_ExitError_SysUsage(exec_ExitError)",
    "os_exec._ptr_ExitError.SysUsage": "interface__0 __golang os_exec__ptr_ExitError_SysUsage(_ptr_exec_ExitError)",
    "os_exec.ExitError.SystemTime": "time_Duration __golang os_exec_ExitError_SystemTime(exec_ExitError)",
    "os_exec._ptr_ExitError.SystemTime": "time_Duration __golang os_exec__ptr_ExitError_SystemTime(_ptr_exec_ExitError)",
    "os_exec.ExitError.UserTime": "time_Duration __golang os_exec_ExitError_UserTime(exec_ExitError)",
    "os_exec._ptr_ExitError.UserTime": "time_Duration __golang os_exec__ptr_ExitError_UserTime(_ptr_exec_ExitError)",
    "os_signal.Notify": "void __golang os_signal_Notify(chan_chan_left__os_Signal c, _slice_os_Signal sig)",
    "os_signal.Notify.deferwrap1": "void __golang os_signal_Notify_deferwrap1()",
    "os_signal.process": "void __golang os_signal_process(os_Signal sig)",
    "os_signal.process.deferwrap1": "void __golang os_signal_process_deferwrap1()",
    "os_signal.loop": "void __golang __noreturn os_signal_loop()",
    "runtime_trace.Start.deferwrap1": "void __golang runtime_trace_Start_deferwrap1()",
    "runtime_trace.Stop": "void __golang runtime_trace_Stop()",
    "runtime_trace.Stop.deferwrap1": "void __golang runtime_trace_Stop_deferwrap1()",
    "testing_slogtest.TestHandler": "error __golang testing_slogtest_TestHandler(log_slog_Handler h, func__slice_map_string_interface_ results)",
    "testing_slogtest.hasKey": "testing_slogtest_check __golang testing_slogtest_hasKey(string key)",
    "testing_slogtest._ptr_wrapper.Handle": "error_0 __golang testing_slogtest__ptr_wrapper_Handle(_ptr_slogtest_wrapper, context_Context_0, slog_Record)",
    "testing_slogtest.withSource": "string __golang testing_slogtest_withSource(string s)",
    "testing_slogtest._ptr_replace.LogValue": "slog_Value __golang testing_slogtest__ptr_replace_LogValue(_ptr_slogtest_replace)",
    "testing_slogtest._ptr_replace.String": "string_0 __golang testing_slogtest__ptr_replace_String(_ptr_slogtest_replace)",
    "testing_slogtest.wrapper.Enabled": "bool __golang testing_slogtest_wrapper_Enabled(slogtest_wrapper, context_Context_0, slog_Level)",
    "testing_slogtest._ptr_wrapper.Enabled": "bool __golang testing_slogtest__ptr_wrapper_Enabled(_ptr_slogtest_wrapper, context_Context_0, slog_Level)",
    "testing_slogtest.wrapper.WithAttrs": "slog_Handler __golang testing_slogtest_wrapper_WithAttrs(slogtest_wrapper, _slice_slog_Attr)",
    "testing_slogtest._ptr_wrapper.WithAttrs": "slog_Handler __golang testing_slogtest__ptr_wrapper_WithAttrs(_ptr_slogtest_wrapper, _slice_slog_Attr)",
    "testing_slogtest.wrapper.WithGroup": "slog_Handler __golang testing_slogtest_wrapper_WithGroup(slogtest_wrapper, string_0)",
    "testing_slogtest._ptr_wrapper.WithGroup": "slog_Handler __golang testing_slogtest__ptr_wrapper_WithGroup(_ptr_slogtest_wrapper, string_0)",
    "text_scanner._ptr_Position.IsValid": "bool __golang text_scanner__ptr_Position_IsValid(_ptr_scanner_Position)",
    "text_scanner.Position.String": "string_0 __golang text_scanner_Position_String(scanner_Position)",
    "text_scanner._ptr_Scanner.next": "int32_0 __golang text_scanner__ptr_Scanner_next(_ptr_scanner_Scanner)",
    "text_scanner._ptr_Scanner.Peek": "int32_0 __golang text_scanner__ptr_Scanner_Peek(_ptr_scanner_Scanner)",
    "text_scanner._ptr_Scanner.error": "void __golang text_scanner__ptr_Scanner_error(_ptr_scanner_Scanner, string_0)",
    "text_scanner._ptr_Scanner.errorf": "void __golang text_scanner__ptr_Scanner_errorf(_ptr_scanner_Scanner, string_0, _slice_interface__0)",
    "text_scanner._ptr_Scanner.isIdentRune": "bool __golang text_scanner__ptr_Scanner_isIdentRune(_ptr_scanner_Scanner, int32_0, int_0)",
    "text_scanner._ptr_Scanner.scanIdentifier": "int32_0 __golang text_scanner__ptr_Scanner_scanIdentifier(_ptr_scanner_Scanner)",
    "text_scanner.invalidSep": "int __golang text_scanner_invalidSep(string x)",
    "text_scanner._ptr_Scanner.scanDigits": "int32 __golang text_scanner__ptr_Scanner_scanDigits(text_scanner_Scanner *s, int32 ch_0, int base, int n)",
    "text_scanner._ptr_Scanner.scanEscape": "int32_0 __golang text_scanner__ptr_Scanner_scanEscape(_ptr_scanner_Scanner, int32_0)",
    "text_scanner._ptr_Scanner.scanString": "int_0 __golang text_scanner__ptr_Scanner_scanString(_ptr_scanner_Scanner, int32_0)",
    "text_scanner._ptr_Scanner.scanRawString": "void __golang text_scanner__ptr_Scanner_scanRawString(_ptr_scanner_Scanner)",
    "text_scanner._ptr_Scanner.scanChar": "void __golang text_scanner__ptr_Scanner_scanChar(_ptr_scanner_Scanner)",
    "text_scanner._ptr_Scanner.scanComment": "int32_0 __golang text_scanner__ptr_Scanner_scanComment(_ptr_scanner_Scanner, int32_0)",
    "text_scanner._ptr_Scanner.Scan": "int32_0 __golang text_scanner__ptr_Scanner_Scan(_ptr_scanner_Scanner)",
    "text_scanner._ptr_Scanner.TokenText": "string_0 __golang text_scanner__ptr_Scanner_TokenText(_ptr_scanner_Scanner)",
    "text_scanner._ptr_Position.String": "string_0 __golang text_scanner__ptr_Position_String(_ptr_scanner_Position)",
    "text_tabwriter._ptr_Writer.addLine": "void __golang text_tabwriter__ptr_Writer_addLine(_ptr_tabwriter_Writer, bool)",
    "text_tabwriter._ptr_Writer.reset": "void __golang text_tabwriter__ptr_Writer_reset(_ptr_tabwriter_Writer)",
    "text_tabwriter._ptr_Writer.Init": "_ptr_tabwriter_Writer __golang text_tabwriter__ptr_Writer_Init(_ptr_tabwriter_Writer, io_Writer_0, int_0, int_0, int_0, uint8_0, uint_0)",
    "text_tabwriter._ptr_Writer.write0": "void __golang text_tabwriter__ptr_Writer_write0(_ptr_tabwriter_Writer, _slice_uint8_0)",
    "text_tabwriter._ptr_Writer.writeN": "void __golang text_tabwriter__ptr_Writer_writeN(text_tabwriter_Writer *b, _slice_uint8 src, int n)",
    "text_tabwriter._ptr_Writer.writePadding": "void __golang text_tabwriter__ptr_Writer_writePadding(text_tabwriter_Writer *b, int textw, int cellw, bool useTabs)",
    "text_tabwriter._ptr_Writer.writeLines": "int __golang text_tabwriter__ptr_Writer_writeLines(text_tabwriter_Writer *b, int pos0, int line0, int line1)",
    "text_tabwriter._ptr_Writer.format": "int __golang text_tabwriter__ptr_Writer_format(text_tabwriter_Writer *b, int pos0, int line0, int line1)",
    "text_tabwriter._ptr_Writer.endEscape": "void __golang text_tabwriter__ptr_Writer_endEscape(_ptr_tabwriter_Writer)",
    "text_tabwriter._ptr_Writer.handlePanic": "void __golang text_tabwriter__ptr_Writer_handlePanic(text_tabwriter_Writer *b, error *err, string op)",
    "text_tabwriter._ptr_Writer.Flush": "error_0 __golang text_tabwriter__ptr_Writer_Flush(_ptr_tabwriter_Writer)",
    "text_tabwriter._ptr_Writer.flush": "error_0 __golang text_tabwriter__ptr_Writer_flush(_ptr_tabwriter_Writer)",
    "text_tabwriter._ptr_Writer.flush.deferwrap1": "void __golang text_tabwriter__ptr_Writer_flush_deferwrap1()",
    "text_tabwriter._ptr_Writer.flushNoDefers": "void __golang text_tabwriter__ptr_Writer_flushNoDefers(_ptr_tabwriter_Writer)",
    "text_tabwriter._ptr_Writer.Write.deferwrap1": "void __golang text_tabwriter__ptr_Writer_Write_deferwrap1()",
    "text_template_parse.item.String": "string_0 __golang text_template_parse_item_String(parse_item)",
    "text_template_parse._ptr_lexer.next": "int32_0 __golang text_template_parse__ptr_lexer_next(_ptr_parse_lexer)",
    "text_template_parse._ptr_lexer.peek": "int32_0 __golang text_template_parse__ptr_lexer_peek(_ptr_parse_lexer)",
    "text_template_parse._ptr_lexer.backup": "void __golang text_template_parse__ptr_lexer_backup(_ptr_parse_lexer)",
    "text_template_parse._ptr_lexer.accept": "bool __golang text_template_parse__ptr_lexer_accept(_ptr_parse_lexer, string_0)",
    "text_template_parse._ptr_lexer.acceptRun": "void __golang text_template_parse__ptr_lexer_acceptRun(_ptr_parse_lexer, string_0)",
    "text_template_parse._ptr_lexer.errorf": "text_template_parse_stateFn __golang text_template_parse__ptr_lexer_errorf(text_template_parse_lexer *l, string format, _slice_interface_ args)",
    "text_template_parse.lexText": "text_template_parse_stateFn __golang text_template_parse_lexText(text_template_parse_lexer *l)",
    "text_template_parse.lexLeftDelim": "text_template_parse_stateFn __golang text_template_parse_lexLeftDelim(text_template_parse_lexer *l)",
    "text_template_parse.lexComment": "text_template_parse_stateFn __golang text_template_parse_lexComment(text_template_parse_lexer *l)",
    "text_template_parse.lexRightDelim": "text_template_parse_stateFn __golang text_template_parse_lexRightDelim(text_template_parse_lexer *l)",
    "text_template_parse.lexInsideAction": "text_template_parse_stateFn __golang text_template_parse_lexInsideAction(text_template_parse_lexer *l)",
    "text_template_parse.lexSpace": "text_template_parse_stateFn __golang text_template_parse_lexSpace(text_template_parse_lexer *l)",
    "text_template_parse.lexIdentifier": "text_template_parse_stateFn __golang text_template_parse_lexIdentifier(text_template_parse_lexer *l)",
    "text_template_parse.lexField": "text_template_parse_stateFn __golang text_template_parse_lexField(text_template_parse_lexer *l)",
    "text_template_parse.lexVariable": "text_template_parse_stateFn __golang text_template_parse_lexVariable(text_template_parse_lexer *l)",
    "text_template_parse.lexFieldOrVariable": "text_template_parse_stateFn __golang text_template_parse_lexFieldOrVariable(text_template_parse_lexer *l, __int64 typ)",
    "text_template_parse._ptr_lexer.atTerminator": "bool __golang text_template_parse__ptr_lexer_atTerminator(_ptr_parse_lexer)",
    "text_template_parse.lexChar": "text_template_parse_stateFn __golang text_template_parse_lexChar(text_template_parse_lexer *l)",
    "text_template_parse.lexNumber": "text_template_parse_stateFn __golang text_template_parse_lexNumber(text_template_parse_lexer *l)",
    "text_template_parse._ptr_lexer.scanNumber": "bool __golang text_template_parse__ptr_lexer_scanNumber(_ptr_parse_lexer)",
    "text_template_parse.lexQuote": "text_template_parse_stateFn __golang text_template_parse_lexQuote(text_template_parse_lexer *l)",
    "text_template_parse.lexRawQuote": "text_template_parse_stateFn __golang text_template_parse_lexRawQuote(text_template_parse_lexer *l)",
    "text_template_parse.isAlphaNumeric": "bool __golang text_template_parse_isAlphaNumeric(int32 r)",
    "text_template_parse.Pos.Position": "__int64 __golang text_template_parse_Pos_Position(__int64 p)",
    "text_template_parse.NodeType.Type": "__int64 __golang text_template_parse_NodeType_Type(__int64 t)",
    "text_template_parse._ptr_ListNode.tree": "text_template_parse_Tree *__golang text_template_parse__ptr_ListNode_tree(text_template_parse_ListNode *l)",
    "text_template_parse._ptr_ListNode.String": "string_0 __golang text_template_parse__ptr_ListNode_String(_ptr_parse_ListNode)",
    "text_template_parse._ptr_ListNode.writeTo": "void __golang text_template_parse__ptr_ListNode_writeTo(_ptr_parse_ListNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_ListNode.CopyList": "_ptr_parse_ListNode __golang text_template_parse__ptr_ListNode_CopyList(_ptr_parse_ListNode)",
    "text_template_parse._ptr_ListNode.Copy": "text_template_parse_Node __golang text_template_parse__ptr_ListNode_Copy(text_template_parse_ListNode *l)",
    "text_template_parse._ptr_TextNode.String": "string_0 __golang text_template_parse__ptr_TextNode_String(_ptr_parse_TextNode)",
    "text_template_parse._ptr_TextNode.writeTo": "void __golang text_template_parse__ptr_TextNode_writeTo(_ptr_parse_TextNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_TextNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_TextNode_tree(_ptr_parse_TextNode)",
    "text_template_parse._ptr_TextNode.Copy": "parse_Node __golang text_template_parse__ptr_TextNode_Copy(_ptr_parse_TextNode)",
    "text_template_parse._ptr_CommentNode.String": "string_0 __golang text_template_parse__ptr_CommentNode_String(_ptr_parse_CommentNode)",
    "text_template_parse._ptr_CommentNode.writeTo": "void __golang text_template_parse__ptr_CommentNode_writeTo(_ptr_parse_CommentNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_CommentNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_CommentNode_tree(_ptr_parse_CommentNode)",
    "text_template_parse._ptr_CommentNode.Copy": "parse_Node __golang text_template_parse__ptr_CommentNode_Copy(_ptr_parse_CommentNode)",
    "text_template_parse._ptr_PipeNode.String": "string_0 __golang text_template_parse__ptr_PipeNode_String(_ptr_parse_PipeNode)",
    "text_template_parse._ptr_PipeNode.writeTo": "void __golang text_template_parse__ptr_PipeNode_writeTo(_ptr_parse_PipeNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_PipeNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_PipeNode_tree(_ptr_parse_PipeNode)",
    "text_template_parse._ptr_PipeNode.CopyPipe": "_ptr_parse_PipeNode __golang text_template_parse__ptr_PipeNode_CopyPipe(_ptr_parse_PipeNode)",
    "text_template_parse._ptr_PipeNode.Copy": "parse_Node __golang text_template_parse__ptr_PipeNode_Copy(_ptr_parse_PipeNode)",
    "text_template_parse._ptr_ActionNode.String": "string_0 __golang text_template_parse__ptr_ActionNode_String(_ptr_parse_ActionNode)",
    "text_template_parse._ptr_ActionNode.writeTo": "void __golang text_template_parse__ptr_ActionNode_writeTo(_ptr_parse_ActionNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_ActionNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_ActionNode_tree(_ptr_parse_ActionNode)",
    "text_template_parse._ptr_ActionNode.Copy": "parse_Node __golang text_template_parse__ptr_ActionNode_Copy(_ptr_parse_ActionNode)",
    "text_template_parse._ptr_CommandNode.String": "string_0 __golang text_template_parse__ptr_CommandNode_String(_ptr_parse_CommandNode)",
    "text_template_parse._ptr_CommandNode.writeTo": "void __golang text_template_parse__ptr_CommandNode_writeTo(_ptr_parse_CommandNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_CommandNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_CommandNode_tree(_ptr_parse_CommandNode)",
    "text_template_parse._ptr_CommandNode.Copy": "parse_Node __golang text_template_parse__ptr_CommandNode_Copy(_ptr_parse_CommandNode)",
    "text_template_parse._ptr_IdentifierNode.SetPos": "_ptr_parse_IdentifierNode __golang text_template_parse__ptr_IdentifierNode_SetPos(_ptr_parse_IdentifierNode, parse_Pos)",
    "text_template_parse._ptr_IdentifierNode.SetTree": "_ptr_parse_IdentifierNode __golang text_template_parse__ptr_IdentifierNode_SetTree(_ptr_parse_IdentifierNode, _ptr_parse_Tree)",
    "text_template_parse._ptr_IdentifierNode.String": "string_0 __golang text_template_parse__ptr_IdentifierNode_String(_ptr_parse_IdentifierNode)",
    "text_template_parse._ptr_IdentifierNode.writeTo": "void __golang text_template_parse__ptr_IdentifierNode_writeTo(_ptr_parse_IdentifierNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_IdentifierNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_IdentifierNode_tree(_ptr_parse_IdentifierNode)",
    "text_template_parse._ptr_IdentifierNode.Copy": "parse_Node __golang text_template_parse__ptr_IdentifierNode_Copy(_ptr_parse_IdentifierNode)",
    "text_template_parse._ptr_VariableNode.String": "string_0 __golang text_template_parse__ptr_VariableNode_String(_ptr_parse_VariableNode)",
    "text_template_parse._ptr_VariableNode.writeTo": "void __golang text_template_parse__ptr_VariableNode_writeTo(_ptr_parse_VariableNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_VariableNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_VariableNode_tree(_ptr_parse_VariableNode)",
    "text_template_parse._ptr_VariableNode.Copy": "parse_Node __golang text_template_parse__ptr_VariableNode_Copy(_ptr_parse_VariableNode)",
    "text_template_parse._ptr_DotNode.Type": "parse_NodeType __golang text_template_parse__ptr_DotNode_Type(_ptr_parse_DotNode)",
    "text_template_parse._ptr_DotNode.String": "string_0 __golang text_template_parse__ptr_DotNode_String(_ptr_parse_DotNode)",
    "text_template_parse._ptr_DotNode.writeTo": "void __golang text_template_parse__ptr_DotNode_writeTo(_ptr_parse_DotNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_DotNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_DotNode_tree(_ptr_parse_DotNode)",
    "text_template_parse._ptr_DotNode.Copy": "parse_Node __golang text_template_parse__ptr_DotNode_Copy(_ptr_parse_DotNode)",
    "text_template_parse._ptr_NilNode.Type": "parse_NodeType __golang text_template_parse__ptr_NilNode_Type(_ptr_parse_NilNode)",
    "text_template_parse._ptr_NilNode.String": "string_0 __golang text_template_parse__ptr_NilNode_String(_ptr_parse_NilNode)",
    "text_template_parse._ptr_NilNode.writeTo": "void __golang text_template_parse__ptr_NilNode_writeTo(_ptr_parse_NilNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_NilNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_NilNode_tree(_ptr_parse_NilNode)",
    "text_template_parse._ptr_NilNode.Copy": "parse_Node __golang text_template_parse__ptr_NilNode_Copy(_ptr_parse_NilNode)",
    "text_template_parse._ptr_FieldNode.String": "string_0 __golang text_template_parse__ptr_FieldNode_String(_ptr_parse_FieldNode)",
    "text_template_parse._ptr_FieldNode.writeTo": "void __golang text_template_parse__ptr_FieldNode_writeTo(_ptr_parse_FieldNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_FieldNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_FieldNode_tree(_ptr_parse_FieldNode)",
    "text_template_parse._ptr_FieldNode.Copy": "parse_Node __golang text_template_parse__ptr_FieldNode_Copy(_ptr_parse_FieldNode)",
    "text_template_parse._ptr_ChainNode.Add": "void __golang text_template_parse__ptr_ChainNode_Add(_ptr_parse_ChainNode, string_0)",
    "text_template_parse._ptr_ChainNode.String": "string_0 __golang text_template_parse__ptr_ChainNode_String(_ptr_parse_ChainNode)",
    "text_template_parse._ptr_ChainNode.writeTo": "void __golang text_template_parse__ptr_ChainNode_writeTo(_ptr_parse_ChainNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_ChainNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_ChainNode_tree(_ptr_parse_ChainNode)",
    "text_template_parse._ptr_ChainNode.Copy": "parse_Node __golang text_template_parse__ptr_ChainNode_Copy(_ptr_parse_ChainNode)",
    "text_template_parse._ptr_BoolNode.String": "string_0 __golang text_template_parse__ptr_BoolNode_String(_ptr_parse_BoolNode)",
    "text_template_parse._ptr_BoolNode.writeTo": "void __golang text_template_parse__ptr_BoolNode_writeTo(_ptr_parse_BoolNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_BoolNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_BoolNode_tree(_ptr_parse_BoolNode)",
    "text_template_parse._ptr_BoolNode.Copy": "parse_Node __golang text_template_parse__ptr_BoolNode_Copy(_ptr_parse_BoolNode)",
    "text_template_parse._ptr_NumberNode.String": "string_0 __golang text_template_parse__ptr_NumberNode_String(_ptr_parse_NumberNode)",
    "text_template_parse._ptr_NumberNode.writeTo": "void __golang text_template_parse__ptr_NumberNode_writeTo(_ptr_parse_NumberNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_NumberNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_NumberNode_tree(_ptr_parse_NumberNode)",
    "text_template_parse._ptr_NumberNode.Copy": "parse_Node __golang text_template_parse__ptr_NumberNode_Copy(_ptr_parse_NumberNode)",
    "text_template_parse._ptr_StringNode.String": "string_0 __golang text_template_parse__ptr_StringNode_String(_ptr_parse_StringNode)",
    "text_template_parse._ptr_StringNode.writeTo": "void __golang text_template_parse__ptr_StringNode_writeTo(_ptr_parse_StringNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_StringNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_StringNode_tree(_ptr_parse_StringNode)",
    "text_template_parse._ptr_StringNode.Copy": "parse_Node __golang text_template_parse__ptr_StringNode_Copy(_ptr_parse_StringNode)",
    "text_template_parse._ptr_endNode.String": "string_0 __golang text_template_parse__ptr_endNode_String(_ptr_parse_endNode)",
    "text_template_parse._ptr_endNode.writeTo": "void __golang text_template_parse__ptr_endNode_writeTo(_ptr_parse_endNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_endNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_endNode_tree(_ptr_parse_endNode)",
    "text_template_parse._ptr_endNode.Copy": "parse_Node __golang text_template_parse__ptr_endNode_Copy(_ptr_parse_endNode)",
    "text_template_parse._ptr_elseNode.Type": "parse_NodeType __golang text_template_parse__ptr_elseNode_Type(_ptr_parse_elseNode)",
    "text_template_parse._ptr_elseNode.String": "string_0 __golang text_template_parse__ptr_elseNode_String(_ptr_parse_elseNode)",
    "text_template_parse._ptr_elseNode.writeTo": "void __golang text_template_parse__ptr_elseNode_writeTo(_ptr_parse_elseNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_elseNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_elseNode_tree(_ptr_parse_elseNode)",
    "text_template_parse._ptr_elseNode.Copy": "parse_Node __golang text_template_parse__ptr_elseNode_Copy(_ptr_parse_elseNode)",
    "text_template_parse._ptr_BranchNode.String": "string_0 __golang text_template_parse__ptr_BranchNode_String(_ptr_parse_BranchNode)",
    "text_template_parse._ptr_BranchNode.writeTo": "void __golang text_template_parse__ptr_BranchNode_writeTo(_ptr_parse_BranchNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_BranchNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_BranchNode_tree(_ptr_parse_BranchNode)",
    "text_template_parse._ptr_BranchNode.Copy": "parse_Node __golang text_template_parse__ptr_BranchNode_Copy(_ptr_parse_BranchNode)",
    "text_template_parse._ptr_IfNode.Copy": "parse_Node __golang text_template_parse__ptr_IfNode_Copy(_ptr_parse_IfNode)",
    "text_template_parse._ptr_BreakNode.Copy": "parse_Node __golang text_template_parse__ptr_BreakNode_Copy(_ptr_parse_BreakNode)",
    "text_template_parse._ptr_BreakNode.String": "string_0 __golang text_template_parse__ptr_BreakNode_String(_ptr_parse_BreakNode)",
    "text_template_parse._ptr_BreakNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_BreakNode_tree(_ptr_parse_BreakNode)",
    "text_template_parse._ptr_BreakNode.writeTo": "void __golang text_template_parse__ptr_BreakNode_writeTo(_ptr_parse_BreakNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_ContinueNode.Copy": "parse_Node __golang text_template_parse__ptr_ContinueNode_Copy(_ptr_parse_ContinueNode)",
    "text_template_parse._ptr_ContinueNode.String": "string_0 __golang text_template_parse__ptr_ContinueNode_String(_ptr_parse_ContinueNode)",
    "text_template_parse._ptr_ContinueNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_ContinueNode_tree(_ptr_parse_ContinueNode)",
    "text_template_parse._ptr_ContinueNode.writeTo": "void __golang text_template_parse__ptr_ContinueNode_writeTo(_ptr_parse_ContinueNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_RangeNode.Copy": "parse_Node __golang text_template_parse__ptr_RangeNode_Copy(_ptr_parse_RangeNode)",
    "text_template_parse._ptr_WithNode.Copy": "parse_Node __golang text_template_parse__ptr_WithNode_Copy(_ptr_parse_WithNode)",
    "text_template_parse._ptr_TemplateNode.String": "string_0 __golang text_template_parse__ptr_TemplateNode_String(_ptr_parse_TemplateNode)",
    "text_template_parse._ptr_TemplateNode.writeTo": "void __golang text_template_parse__ptr_TemplateNode_writeTo(_ptr_parse_TemplateNode, _ptr_strings_Builder)",
    "text_template_parse._ptr_TemplateNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_TemplateNode_tree(_ptr_parse_TemplateNode)",
    "text_template_parse._ptr_TemplateNode.Copy": "parse_Node __golang text_template_parse__ptr_TemplateNode_Copy(_ptr_parse_TemplateNode)",
    "text_template_parse._ptr_Tree.Copy": "text_template_parse_Tree *__golang text_template_parse__ptr_Tree_Copy(text_template_parse_Tree *t)",
    "text_template_parse.Parse": "void __golang text_template_parse_Parse(string name, _slice_map_string_interface_ funcs, string text, string leftDelim, map_string__ptr_text_template_parse_Tree _r0, error _r1, string rightDelim)",
    "text_template_parse._ptr_Tree.nextNonSpace": "void __golang text_template_parse__ptr_Tree_nextNonSpace(text_template_parse_item token, text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.errorf": "void __golang text_template_parse__ptr_Tree_errorf(_ptr_parse_Tree, string_0, _slice_interface__0)",
    "text_template_parse._ptr_Tree.unexpected": "void __golang __noreturn text_template_parse__ptr_Tree_unexpected(text_template_parse_Tree *t, text_template_parse_item token, string context)",
    "text_template_parse._ptr_Tree.recover": "void __golang text_template_parse__ptr_Tree_recover(_ptr_parse_Tree, _ptr_error)",
    "text_template_parse._ptr_Tree.startParse": "void __golang text_template_parse__ptr_Tree_startParse(text_template_parse_Tree *t, _slice_map_string_interface_ funcs, text_template_parse_lexer *lex, map_string__ptr_text_template_parse_Tree treeSet)",
    "text_template_parse._ptr_Tree.Parse.deferwrap1": "void __golang text_template_parse__ptr_Tree_Parse_deferwrap1()",
    "text_template_parse._ptr_Tree.add": "void __golang text_template_parse__ptr_Tree_add(_ptr_parse_Tree)",
    "text_template_parse.IsEmptyTree": "bool __golang text_template_parse_IsEmptyTree(text_template_parse_Node n)",
    "text_template_parse._ptr_Tree.parse": "void __golang text_template_parse__ptr_Tree_parse(_ptr_parse_Tree)",
    "text_template_parse._ptr_Tree.parseDefinition": "void __golang text_template_parse__ptr_Tree_parseDefinition(_ptr_parse_Tree)",
    "text_template_parse._ptr_Tree.textOrAction.deferwrap1": "void __golang text_template_parse__ptr_Tree_textOrAction_deferwrap1()",
    "text_template_parse._ptr_Tree.clearActionLine": "void __golang text_template_parse__ptr_Tree_clearActionLine(_ptr_parse_Tree)",
    "text_template_parse._ptr_Tree.action": "text_template_parse_Node __golang text_template_parse__ptr_Tree_action(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.breakControl": "text_template_parse_Node __golang text_template_parse__ptr_Tree_breakControl(text_template_parse_Tree *t, __int64 pos, int line)",
    "text_template_parse._ptr_Tree.continueControl": "text_template_parse_Node __golang text_template_parse__ptr_Tree_continueControl(text_template_parse_Tree *t, __int64 pos, int line)",
    "text_template_parse._ptr_Tree.pipeline": "text_template_parse_PipeNode *__golang text_template_parse__ptr_Tree_pipeline(text_template_parse_Tree *t, string context, __int64 end)",
    "text_template_parse._ptr_Tree.checkPipeline": "void __golang text_template_parse__ptr_Tree_checkPipeline(text_template_parse_Tree *t, text_template_parse_PipeNode *pipe, string context)",
    "text_template_parse._ptr_Tree.parseControl.deferwrap1": "void __golang text_template_parse__ptr_Tree_parseControl_deferwrap1()",
    "text_template_parse._ptr_Tree.ifControl": "text_template_parse_Node __golang text_template_parse__ptr_Tree_ifControl(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.rangeControl": "text_template_parse_Node __golang text_template_parse__ptr_Tree_rangeControl(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.withControl": "text_template_parse_Node __golang text_template_parse__ptr_Tree_withControl(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.elseControl": "text_template_parse_Node __golang text_template_parse__ptr_Tree_elseControl(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.blockControl": "text_template_parse_Node __golang text_template_parse__ptr_Tree_blockControl(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.templateControl": "text_template_parse_Node __golang text_template_parse__ptr_Tree_templateControl(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.parseTemplateName": "string __golang text_template_parse__ptr_Tree_parseTemplateName(text_template_parse_Tree *t, text_template_parse_item token, string context)",
    "text_template_parse._ptr_Tree.command": "text_template_parse_CommandNode *__golang text_template_parse__ptr_Tree_command(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.operand": "text_template_parse_Node __golang text_template_parse__ptr_Tree_operand(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.term": "text_template_parse_Node __golang text_template_parse__ptr_Tree_term(text_template_parse_Tree *t)",
    "text_template_parse._ptr_Tree.popVars": "void __golang text_template_parse__ptr_Tree_popVars(_ptr_parse_Tree, int_0)",
    "text_template_parse._ptr_Tree.useVar": "text_template_parse_Node __golang text_template_parse__ptr_Tree_useVar(text_template_parse_Tree *t, __int64 pos, string name)",
    "text_template_parse._ptr_Pos.Position": "__int64 __golang text_template_parse__ptr_Pos_Position(__int64 *p)",
    "text_template_parse._ptr_item.String": "string_0 __golang text_template_parse__ptr_item_String(_ptr_parse_item)",
    "text_template_parse._ptr_NodeType.Type": "__int64 __golang text_template_parse__ptr_NodeType_Type(__int64 *t)",
    "text_template_parse.ListNode.Position": "parse_Pos __golang text_template_parse_ListNode_Position(parse_ListNode)",
    "text_template_parse._ptr_ListNode.Position": "parse_Pos __golang text_template_parse__ptr_ListNode_Position(_ptr_parse_ListNode)",
    "text_template_parse.ListNode.Type": "parse_NodeType __golang text_template_parse_ListNode_Type(parse_ListNode)",
    "text_template_parse._ptr_ListNode.Type": "parse_NodeType __golang text_template_parse__ptr_ListNode_Type(_ptr_parse_ListNode)",
    "text_template_parse.TextNode.Position": "parse_Pos __golang text_template_parse_TextNode_Position(parse_TextNode)",
    "text_template_parse._ptr_TextNode.Position": "parse_Pos __golang text_template_parse__ptr_TextNode_Position(_ptr_parse_TextNode)",
    "text_template_parse.TextNode.Type": "parse_NodeType __golang text_template_parse_TextNode_Type(parse_TextNode)",
    "text_template_parse._ptr_TextNode.Type": "parse_NodeType __golang text_template_parse__ptr_TextNode_Type(_ptr_parse_TextNode)",
    "text_template_parse.CommentNode.Position": "parse_Pos __golang text_template_parse_CommentNode_Position(parse_CommentNode)",
    "text_template_parse._ptr_CommentNode.Position": "parse_Pos __golang text_template_parse__ptr_CommentNode_Position(_ptr_parse_CommentNode)",
    "text_template_parse.CommentNode.Type": "parse_NodeType __golang text_template_parse_CommentNode_Type(parse_CommentNode)",
    "text_template_parse._ptr_CommentNode.Type": "parse_NodeType __golang text_template_parse__ptr_CommentNode_Type(_ptr_parse_CommentNode)",
    "text_template_parse.VariableNode.Position": "parse_Pos __golang text_template_parse_VariableNode_Position(parse_VariableNode)",
    "text_template_parse._ptr_VariableNode.Position": "parse_Pos __golang text_template_parse__ptr_VariableNode_Position(_ptr_parse_VariableNode)",
    "text_template_parse.VariableNode.Type": "parse_NodeType __golang text_template_parse_VariableNode_Type(parse_VariableNode)",
    "text_template_parse._ptr_VariableNode.Type": "parse_NodeType __golang text_template_parse__ptr_VariableNode_Type(_ptr_parse_VariableNode)",
    "text_template_parse.CommandNode.Position": "parse_Pos __golang text_template_parse_CommandNode_Position(parse_CommandNode)",
    "text_template_parse._ptr_CommandNode.Position": "parse_Pos __golang text_template_parse__ptr_CommandNode_Position(_ptr_parse_CommandNode)",
    "text_template_parse.CommandNode.Type": "parse_NodeType __golang text_template_parse_CommandNode_Type(parse_CommandNode)",
    "text_template_parse._ptr_CommandNode.Type": "parse_NodeType __golang text_template_parse__ptr_CommandNode_Type(_ptr_parse_CommandNode)",
    "text_template_parse.PipeNode.Position": "parse_Pos __golang text_template_parse_PipeNode_Position(parse_PipeNode)",
    "text_template_parse._ptr_PipeNode.Position": "parse_Pos __golang text_template_parse__ptr_PipeNode_Position(_ptr_parse_PipeNode)",
    "text_template_parse.PipeNode.Type": "parse_NodeType __golang text_template_parse_PipeNode_Type(parse_PipeNode)",
    "text_template_parse._ptr_PipeNode.Type": "parse_NodeType __golang text_template_parse__ptr_PipeNode_Type(_ptr_parse_PipeNode)",
    "text_template_parse.ActionNode.Position": "parse_Pos __golang text_template_parse_ActionNode_Position(parse_ActionNode)",
    "text_template_parse._ptr_ActionNode.Position": "parse_Pos __golang text_template_parse__ptr_ActionNode_Position(_ptr_parse_ActionNode)",
    "text_template_parse.ActionNode.Type": "parse_NodeType __golang text_template_parse_ActionNode_Type(parse_ActionNode)",
    "text_template_parse._ptr_ActionNode.Type": "parse_NodeType __golang text_template_parse__ptr_ActionNode_Type(_ptr_parse_ActionNode)",
    "text_template_parse.DotNode.Position": "parse_Pos __golang text_template_parse_DotNode_Position(parse_DotNode)",
    "text_template_parse._ptr_DotNode.Position": "parse_Pos __golang text_template_parse__ptr_DotNode_Position(_ptr_parse_DotNode)",
    "text_template_parse.NilNode.Position": "parse_Pos __golang text_template_parse_NilNode_Position(parse_NilNode)",
    "text_template_parse._ptr_NilNode.Position": "parse_Pos __golang text_template_parse__ptr_NilNode_Position(_ptr_parse_NilNode)",
    "text_template_parse.FieldNode.Position": "parse_Pos __golang text_template_parse_FieldNode_Position(parse_FieldNode)",
    "text_template_parse._ptr_FieldNode.Position": "parse_Pos __golang text_template_parse__ptr_FieldNode_Position(_ptr_parse_FieldNode)",
    "text_template_parse.FieldNode.Type": "parse_NodeType __golang text_template_parse_FieldNode_Type(parse_FieldNode)",
    "text_template_parse._ptr_FieldNode.Type": "parse_NodeType __golang text_template_parse__ptr_FieldNode_Type(_ptr_parse_FieldNode)",
    "text_template_parse.ChainNode.Position": "parse_Pos __golang text_template_parse_ChainNode_Position(parse_ChainNode)",
    "text_template_parse._ptr_ChainNode.Position": "parse_Pos __golang text_template_parse__ptr_ChainNode_Position(_ptr_parse_ChainNode)",
    "text_template_parse.ChainNode.Type": "parse_NodeType __golang text_template_parse_ChainNode_Type(parse_ChainNode)",
    "text_template_parse._ptr_ChainNode.Type": "parse_NodeType __golang text_template_parse__ptr_ChainNode_Type(_ptr_parse_ChainNode)",
    "text_template_parse.BoolNode.Position": "parse_Pos __golang text_template_parse_BoolNode_Position(parse_BoolNode)",
    "text_template_parse._ptr_BoolNode.Position": "parse_Pos __golang text_template_parse__ptr_BoolNode_Position(_ptr_parse_BoolNode)",
    "text_template_parse.BoolNode.Type": "parse_NodeType __golang text_template_parse_BoolNode_Type(parse_BoolNode)",
    "text_template_parse._ptr_BoolNode.Type": "parse_NodeType __golang text_template_parse__ptr_BoolNode_Type(_ptr_parse_BoolNode)",
    "text_template_parse.NumberNode.Position": "parse_Pos __golang text_template_parse_NumberNode_Position(parse_NumberNode)",
    "text_template_parse._ptr_NumberNode.Position": "parse_Pos __golang text_template_parse__ptr_NumberNode_Position(_ptr_parse_NumberNode)",
    "text_template_parse.NumberNode.Type": "parse_NodeType __golang text_template_parse_NumberNode_Type(parse_NumberNode)",
    "text_template_parse._ptr_NumberNode.Type": "parse_NodeType __golang text_template_parse__ptr_NumberNode_Type(_ptr_parse_NumberNode)",
    "text_template_parse.StringNode.Position": "parse_Pos __golang text_template_parse_StringNode_Position(parse_StringNode)",
    "text_template_parse._ptr_StringNode.Position": "parse_Pos __golang text_template_parse__ptr_StringNode_Position(_ptr_parse_StringNode)",
    "text_template_parse.StringNode.Type": "parse_NodeType __golang text_template_parse_StringNode_Type(parse_StringNode)",
    "text_template_parse._ptr_StringNode.Type": "parse_NodeType __golang text_template_parse__ptr_StringNode_Type(_ptr_parse_StringNode)",
    "text_template_parse.endNode.Position": "parse_Pos __golang text_template_parse_endNode_Position(parse_endNode)",
    "text_template_parse._ptr_endNode.Position": "parse_Pos __golang text_template_parse__ptr_endNode_Position(_ptr_parse_endNode)",
    "text_template_parse.endNode.Type": "parse_NodeType __golang text_template_parse_endNode_Type(parse_endNode)",
    "text_template_parse._ptr_endNode.Type": "parse_NodeType __golang text_template_parse__ptr_endNode_Type(_ptr_parse_endNode)",
    "text_template_parse.elseNode.Position": "parse_Pos __golang text_template_parse_elseNode_Position(parse_elseNode)",
    "text_template_parse._ptr_elseNode.Position": "parse_Pos __golang text_template_parse__ptr_elseNode_Position(_ptr_parse_elseNode)",
    "text_template_parse.BranchNode.Position": "parse_Pos __golang text_template_parse_BranchNode_Position(parse_BranchNode)",
    "text_template_parse._ptr_BranchNode.Position": "parse_Pos __golang text_template_parse__ptr_BranchNode_Position(_ptr_parse_BranchNode)",
    "text_template_parse.BranchNode.Type": "parse_NodeType __golang text_template_parse_BranchNode_Type(parse_BranchNode)",
    "text_template_parse._ptr_BranchNode.Type": "parse_NodeType __golang text_template_parse__ptr_BranchNode_Type(_ptr_parse_BranchNode)",
    "text_template_parse.IfNode.Position": "parse_Pos __golang text_template_parse_IfNode_Position(parse_IfNode)",
    "text_template_parse._ptr_IfNode.Position": "parse_Pos __golang text_template_parse__ptr_IfNode_Position(_ptr_parse_IfNode)",
    "text_template_parse._ptr_IfNode.String": "string_0 __golang text_template_parse__ptr_IfNode_String(_ptr_parse_IfNode)",
    "text_template_parse.IfNode.Type": "parse_NodeType __golang text_template_parse_IfNode_Type(parse_IfNode)",
    "text_template_parse._ptr_IfNode.Type": "parse_NodeType __golang text_template_parse__ptr_IfNode_Type(_ptr_parse_IfNode)",
    "text_template_parse._ptr_IfNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_IfNode_tree(_ptr_parse_IfNode)",
    "text_template_parse._ptr_IfNode.writeTo": "void __golang text_template_parse__ptr_IfNode_writeTo(_ptr_parse_IfNode, _ptr_strings_Builder)",
    "text_template_parse.BreakNode.Position": "parse_Pos __golang text_template_parse_BreakNode_Position(parse_BreakNode)",
    "text_template_parse._ptr_BreakNode.Position": "parse_Pos __golang text_template_parse__ptr_BreakNode_Position(_ptr_parse_BreakNode)",
    "text_template_parse.BreakNode.Type": "parse_NodeType __golang text_template_parse_BreakNode_Type(parse_BreakNode)",
    "text_template_parse._ptr_BreakNode.Type": "parse_NodeType __golang text_template_parse__ptr_BreakNode_Type(_ptr_parse_BreakNode)",
    "text_template_parse.ContinueNode.Position": "parse_Pos __golang text_template_parse_ContinueNode_Position(parse_ContinueNode)",
    "text_template_parse._ptr_ContinueNode.Position": "parse_Pos __golang text_template_parse__ptr_ContinueNode_Position(_ptr_parse_ContinueNode)",
    "text_template_parse.ContinueNode.Type": "parse_NodeType __golang text_template_parse_ContinueNode_Type(parse_ContinueNode)",
    "text_template_parse._ptr_ContinueNode.Type": "parse_NodeType __golang text_template_parse__ptr_ContinueNode_Type(_ptr_parse_ContinueNode)",
    "text_template_parse.RangeNode.Position": "parse_Pos __golang text_template_parse_RangeNode_Position(parse_RangeNode)",
    "text_template_parse._ptr_RangeNode.Position": "parse_Pos __golang text_template_parse__ptr_RangeNode_Position(_ptr_parse_RangeNode)",
    "text_template_parse._ptr_RangeNode.String": "string_0 __golang text_template_parse__ptr_RangeNode_String(_ptr_parse_RangeNode)",
    "text_template_parse.RangeNode.Type": "parse_NodeType __golang text_template_parse_RangeNode_Type(parse_RangeNode)",
    "text_template_parse._ptr_RangeNode.Type": "parse_NodeType __golang text_template_parse__ptr_RangeNode_Type(_ptr_parse_RangeNode)",
    "text_template_parse._ptr_RangeNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_RangeNode_tree(_ptr_parse_RangeNode)",
    "text_template_parse._ptr_RangeNode.writeTo": "void __golang text_template_parse__ptr_RangeNode_writeTo(_ptr_parse_RangeNode, _ptr_strings_Builder)",
    "text_template_parse.WithNode.Position": "parse_Pos __golang text_template_parse_WithNode_Position(parse_WithNode)",
    "text_template_parse._ptr_WithNode.Position": "parse_Pos __golang text_template_parse__ptr_WithNode_Position(_ptr_parse_WithNode)",
    "text_template_parse._ptr_WithNode.String": "string_0 __golang text_template_parse__ptr_WithNode_String(_ptr_parse_WithNode)",
    "text_template_parse.WithNode.Type": "parse_NodeType __golang text_template_parse_WithNode_Type(parse_WithNode)",
    "text_template_parse._ptr_WithNode.Type": "parse_NodeType __golang text_template_parse__ptr_WithNode_Type(_ptr_parse_WithNode)",
    "text_template_parse._ptr_WithNode.tree": "_ptr_parse_Tree __golang text_template_parse__ptr_WithNode_tree(_ptr_parse_WithNode)",
    "text_template_parse._ptr_WithNode.writeTo": "void __golang text_template_parse__ptr_WithNode_writeTo(_ptr_parse_WithNode, _ptr_strings_Builder)",
    "text_template_parse.TemplateNode.Position": "parse_Pos __golang text_template_parse_TemplateNode_Position(parse_TemplateNode)",
    "text_template_parse._ptr_TemplateNode.Position": "parse_Pos __golang text_template_parse__ptr_TemplateNode_Position(_ptr_parse_TemplateNode)",
    "text_template_parse.TemplateNode.Type": "parse_NodeType __golang text_template_parse_TemplateNode_Type(parse_TemplateNode)",
    "text_template_parse._ptr_TemplateNode.Type": "parse_NodeType __golang text_template_parse__ptr_TemplateNode_Type(_ptr_parse_TemplateNode)",
    "text_template_parse.IdentifierNode.Position": "parse_Pos __golang text_template_parse_IdentifierNode_Position(parse_IdentifierNode)",
    "text_template_parse._ptr_IdentifierNode.Position": "parse_Pos __golang text_template_parse__ptr_IdentifierNode_Position(_ptr_parse_IdentifierNode)",
    "text_template_parse.IdentifierNode.Type": "parse_NodeType __golang text_template_parse_IdentifierNode_Type(parse_IdentifierNode)",
    "text_template_parse._ptr_IdentifierNode.Type": "parse_NodeType __golang text_template_parse__ptr_IdentifierNode_Type(_ptr_parse_IdentifierNode)",
    "text_template._ptr_state.pop": "void __golang text_template__ptr_state_pop(text_template_state *s, int mark)",
    "text_template._ptr_state.setVar": "void __golang text_template__ptr_state_setVar(text_template_state *s, string name, reflect_Value value)",
    "text_template._ptr_state.varValue": "reflect_Value __golang text_template__ptr_state_varValue(text_template_state *s, string name)",
    "text_template.isMissing": "bool __golang text_template_isMissing(reflect_Value v)",
    "text_template.ExecError.Error": "string_0 __golang text_template_ExecError_Error(template_ExecError)",
    "text_template.ExecError.Unwrap": "error_0 __golang text_template_ExecError_Unwrap(template_ExecError)",
    "text_template._ptr_state.errorf": "void __golang __noreturn text_template__ptr_state_errorf(text_template_state *s, string format, _slice_interface_ args)",
    "text_template.errRecover": "void __golang text_template_errRecover(error *errp)",
    "text_template._ptr_Template.execute": "void __golang text_template__ptr_Template_execute(error err, text_template_Template *t, io_Writer wr, interface_ data)",
    "text_template._ptr_Template.execute.deferwrap1": "void __golang text_template__ptr_Template_execute_deferwrap1()",
    "text_template._ptr_state.walk": "void __golang text_template__ptr_state_walk(text_template_state *s, reflect_Value dot, text_template_parse_Node node)",
    "text_template._ptr_state.walkIfOrWith": "void __golang text_template__ptr_state_walkIfOrWith(text_template_state *s, __int64 typ, reflect_Value dot, text_template_parse_PipeNode *pipe, text_template_parse_ListNode *list, text_template_parse_ListNode *elseList)",
    "text_template._ptr_state.walkIfOrWith.deferwrap1": "void __golang text_template__ptr_state_walkIfOrWith_deferwrap1()",
    "text_template._ptr_state.walkRange": "void __golang text_template__ptr_state_walkRange(text_template_state *s, reflect_Value dot, text_template_parse_RangeNode *r)",
    "text_template._ptr_state.walkRange.deferwrap1": "void __golang text_template__ptr_state_walkRange_deferwrap1()",
    "text_template._ptr_state.walkTemplate": "void __golang text_template__ptr_state_walkTemplate(text_template_state *s, reflect_Value dot, text_template_parse_TemplateNode *t)",
    "text_template._ptr_state.evalPipeline": "reflect_Value __golang text_template__ptr_state_evalPipeline(text_template_state *s, reflect_Value dot, text_template_parse_PipeNode *pipe)",
    "text_template._ptr_state.notAFunction": "void __golang text_template__ptr_state_notAFunction(text_template_state *s, _slice_text_template_parse_Node args, reflect_Value final)",
    "text_template._ptr_state.evalCommand": "reflect_Value __golang text_template__ptr_state_evalCommand(text_template_state *s, reflect_Value dot, text_template_parse_CommandNode *cmd, reflect_Value final)",
    "text_template._ptr_state.idealConstant": "reflect_Value __golang text_template__ptr_state_idealConstant(text_template_state *s, text_template_parse_NumberNode *constant)",
    "text_template.isHexInt": "bool __golang text_template_isHexInt(string s)",
    "text_template._ptr_state.evalChainNode": "reflect_Value __golang text_template__ptr_state_evalChainNode(text_template_state *s, reflect_Value dot, text_template_parse_ChainNode *chain, _slice_text_template_parse_Node args, reflect_Value final)",
    "text_template._ptr_state.evalVariableNode": "reflect_Value __golang text_template__ptr_state_evalVariableNode(text_template_state *s, reflect_Value dot, text_template_parse_VariableNode *variable, _slice_text_template_parse_Node args, reflect_Value final)",
    "text_template._ptr_state.evalFieldChain": "void __golang text_template__ptr_state_evalFieldChain(text_template_state *s, reflect_Value dot, _slice_string ident, reflect_Value receiver, _slice_text_template_parse_Node args, reflect_Value final, reflect_Value _r0, text_template_parse_Node node)",
    "text_template._ptr_state.evalFunction": "void __golang text_template__ptr_state_evalFunction(text_template_state *s, reflect_Value dot, _slice_text_template_parse_Node args, text_template_parse_IdentifierNode *node, reflect_Value final, reflect_Value _r0, text_template_parse_Node cmd)",
    "text_template._ptr_state.evalField": "void __golang text_template__ptr_state_evalField(text_template_state *s, reflect_Value dot, _slice_text_template_parse_Node args, string fieldName, reflect_Value final, reflect_Value receiver, reflect_Value _r0, text_template_parse_Node node)",
    "text_template._ptr_state.evalCall": "void __golang text_template__ptr_state_evalCall(text_template_state *s, reflect_Value dot, text_template_parse_Node node, string name, reflect_Value fun, _slice_text_template_parse_Node args, reflect_Value final, reflect_Value _r0, bool isBuiltin)",
    "text_template._ptr_state.validateType": "reflect_Value __golang text_template__ptr_state_validateType(text_template_state *s, reflect_Value value, reflect_Type typ)",
    "text_template._ptr_state.evalArg": "reflect_Value __golang text_template__ptr_state_evalArg(text_template_state *s, reflect_Value dot, reflect_Type typ, text_template_parse_Node n)",
    "text_template._ptr_state.evalBool": "reflect_Value __golang text_template__ptr_state_evalBool(text_template_state *s, reflect_Type typ, text_template_parse_Node n)",
    "text_template._ptr_state.evalString": "reflect_Value __golang text_template__ptr_state_evalString(text_template_state *s, reflect_Type typ, text_template_parse_Node n)",
    "text_template._ptr_state.evalInteger": "reflect_Value __golang text_template__ptr_state_evalInteger(text_template_state *s, reflect_Type typ, text_template_parse_Node n)",
    "text_template._ptr_state.evalUnsignedInteger": "reflect_Value __golang text_template__ptr_state_evalUnsignedInteger(text_template_state *s, reflect_Type typ, text_template_parse_Node n)",
    "text_template._ptr_state.evalFloat": "reflect_Value __golang text_template__ptr_state_evalFloat(text_template_state *s, reflect_Type typ, text_template_parse_Node n)",
    "text_template._ptr_state.evalComplex": "reflect_Value __golang text_template__ptr_state_evalComplex(text_template_state *s, reflect_Type typ, text_template_parse_Node n)",
    "text_template._ptr_state.evalEmptyInterface": "reflect_Value __golang text_template__ptr_state_evalEmptyInterface(text_template_state *s, reflect_Value dot, text_template_parse_Node n)",
    "text_template.indirectInterface": "reflect_Value __golang text_template_indirectInterface(reflect_Value v)",
    "text_template._ptr_state.printValue": "void __golang text_template__ptr_state_printValue(text_template_state *s, text_template_parse_Node n, reflect_Value v)",
    "text_template.builtinFuncs": "map_string_reflect_Value __golang text_template_builtinFuncs()",
    "text_template.addValueFuncs": "void __golang text_template_addValueFuncs(map_string_reflect_Value out, text_template_FuncMap in)",
    "text_template.goodFunc": "bool __golang text_template_goodFunc(reflect_Type typ)",
    "text_template.goodName": "bool __golang text_template_goodName(string name)",
    "text_template.findFunction": "void __golang text_template_findFunction(reflect_Value v, bool isBuiltin, bool isBuiltin, bool ok, bool ok, string name, text_template_Template *tmpl)",
    "text_template.findFunction.deferwrap1": "void __golang text_template_findFunction_deferwrap1()",
    "text_template.safeCall": "void __golang text_template_safeCall(reflect_Value val, error err, reflect_Value fun, _slice_reflect_Value args)",
    "text_template.truth": "bool __golang text_template_truth(reflect_Value arg)",
    "text_template.and": "reflect_Value __golang __noreturn text_template_and(reflect_Value arg0, _slice_reflect_Value args)",
    "text_template.or": "reflect_Value __golang __noreturn text_template_or(reflect_Value arg0, _slice_reflect_Value args)",
    "text_template.not": "bool __golang text_template_not(reflect_Value arg)",
    "text_template.isNil": "bool __golang text_template_isNil(reflect_Value v)",
    "text_template.HTMLEscape": "void __golang text_template_HTMLEscape(io_Writer w, _slice_uint8 b)",
    "text_template.HTMLEscapeString": "string __golang text_template_HTMLEscapeString(string s)",
    "text_template.HTMLEscaper": "string __golang text_template_HTMLEscaper(_slice_interface_ args)",
    "text_template.JSEscape": "void __golang text_template_JSEscape(io_Writer w, _slice_uint8 b)",
    "text_template.JSEscapeString": "string __golang text_template_JSEscapeString(string s)",
    "text_template.jsIsSpecial": "bool __golang text_template_jsIsSpecial(int32 r)",
    "text_template.JSEscaper": "string __golang text_template_JSEscaper(_slice_interface_ args)",
    "text_template.URLQueryEscaper": "string __golang text_template_URLQueryEscaper(_slice_interface_ args)",
    "text_template.evalArgs": "string __golang text_template_evalArgs(_slice_interface_ args)",
    "text_template._ptr_Template.Clone.deferwrap2": "void __golang text_template__ptr_Template_Clone_deferwrap2()",
    "text_template._ptr_Template.Clone.deferwrap1": "void __golang text_template__ptr_Template_Clone_deferwrap1()",
    "text_template._ptr_Template.AddParseTree.deferwrap1": "void __golang text_template__ptr_Template_AddParseTree_deferwrap1()",
    "text_template._ptr_Template.Funcs.deferwrap1": "void __golang text_template__ptr_Template_Funcs_deferwrap1()",
    "text_template._ptr_Template.Lookup.deferwrap1": "void __golang text_template__ptr_Template_Lookup_deferwrap1()",
    "text_template._ptr_Template.associate": "bool __golang text_template__ptr_Template_associate(text_template_Template *t, text_template_Template *new, text_template_parse_Tree *tree)",
    "reflect.TypeFor_go.shape.struct__reflect.typ___ptr_internal_abi.Type_reflect.ptr_unsafe.Pointer_reflect.flag__": "reflect_Type __golang reflect_TypeFor_go_shape_struct__reflect_typ___ptr_internal_abi_Type_reflect_ptr_unsafe_Pointer_reflect_flag__()",
    "reflect.TypeFor_go.shape.interface__String_string__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__String_string__()",
    "reflect.TypeFor_go.shape.interface__Error_string__": "reflect_Type __golang reflect_TypeFor_go_shape_interface__Error_string__()",
    "text_template._ptr_ExecError.Error": "string_0 __golang text_template__ptr_ExecError_Error(_ptr_template_ExecError)",
    "text_template._ptr_ExecError.Unwrap": "error_0 __golang text_template__ptr_ExecError_Unwrap(_ptr_template_ExecError)",
    "slices.stableCmpFunc_go.shape.struct__Name_string_Age_int__": "void __golang slices_stableCmpFunc_go_shape_struct__Name_string_Age_int__(slices_stableCmpFunc_go_shape_struct__Name_string_Age_int__::_param2 data, int n, slices_stableCmpFunc_go_shape_struct__Name_string_Age_int__::_param3 cmp)",
    "slices.symMergeCmpFunc_go.shape.struct__Name_string_Age_int__": "void __golang slices_symMergeCmpFunc_go_shape_struct__Name_string_Age_int__(slices_symMergeCmpFunc_go_shape_struct__Name_string_Age_int__::_param2 data, int a, int m, int b, slices_symMergeCmpFunc_go_shape_struct__Name_string_Age_int__::_param3 cmp)",
    "slices.rotateCmpFunc_go.shape.struct__Name_string_Age_int__": "void __golang slices_rotateCmpFunc_go_shape_struct__Name_string_Age_int__(slices_rotateCmpFunc_go_shape_struct__Name_string_Age_int__::_param1 data, int a, int m, int b, slices_rotateCmpFunc_go_shape_struct__Name_string_Age_int__::_param2 cmp)",
    "slices.insertionSortCmpFunc_go.shape.struct__Name_string_Age_int__": "void __golang slices_insertionSortCmpFunc_go_shape_struct__Name_string_Age_int__(slices_insertionSortCmpFunc_go_shape_struct__Name_string_Age_int__::_param0 data, int a, int b, slices_insertionSortCmpFunc_go_shape_struct__Name_string_Age_int__::_param1 cmp)",
    "slices.pdqsortCmpFunc_go.shape.struct__Name_string_Age_int__": "void __golang slices_pdqsortCmpFunc_go_shape_struct__Name_string_Age_int__(slices_pdqsortCmpFunc_go_shape_struct__Name_string_Age_int__::_param9 data, int a, int b, int limit, slices_pdqsortCmpFunc_go_shape_struct__Name_string_Age_int__::_param10 cmp)",
    "slices.partitionEqualCmpFunc_go.shape.struct__Name_string_Age_int__": "int __golang slices_partitionEqualCmpFunc_go_shape_struct__Name_string_Age_int__(slices_partitionEqualCmpFunc_go_shape_struct__Name_string_Age_int__::_param0 data, int a, int b, int pivot, slices_partitionEqualCmpFunc_go_shape_struct__Name_string_Age_int__::_param1 cmp)",
    "slices.partialInsertionSortCmpFunc_go.shape.struct__Name_string_Age_int__": "bool __golang slices_partialInsertionSortCmpFunc_go_shape_struct__Name_string_Age_int__(slices_partialInsertionSortCmpFunc_go_shape_struct__Name_string_Age_int__::_param0 data, int a, int b, slices_partialInsertionSortCmpFunc_go_shape_struct__Name_string_Age_int__::_param1 cmp)",
    "slices.medianCmpFunc_go.shape.struct__Name_string_Age_int__": "int __golang slices_medianCmpFunc_go_shape_struct__Name_string_Age_int__(slices_medianCmpFunc_go_shape_struct__Name_string_Age_int__::_param1 data, int a, int b, int c, int *swaps, slices_medianCmpFunc_go_shape_struct__Name_string_Age_int__::_param2 cmp)",
    "slices.breakPatternsCmpFunc_go.shape.struct__Name_string_Age_int__": "void __golang slices_breakPatternsCmpFunc_go_shape_struct__Name_string_Age_int__(slices_breakPatternsCmpFunc_go_shape_struct__Name_string_Age_int__::_param0 data, int a, int b, slices_breakPatternsCmpFunc_go_shape_struct__Name_string_Age_int__::_param1 cmp)",
    "slices.heapSortCmpFunc_go.shape.struct__Name_string_Age_int__": "void __golang slices_heapSortCmpFunc_go_shape_struct__Name_string_Age_int__(slices_heapSortCmpFunc_go_shape_struct__Name_string_Age_int__::_param1 data, int a, int b, slices_heapSortCmpFunc_go_shape_struct__Name_string_Age_int__::_param2 cmp)",
    "slices.siftDownCmpFunc_go.shape.struct__Name_string_Age_int__": "void __golang slices_siftDownCmpFunc_go_shape_struct__Name_string_Age_int__(slices_siftDownCmpFunc_go_shape_struct__Name_string_Age_int__::_param0 data, int lo, int hi, int first, slices_siftDownCmpFunc_go_shape_struct__Name_string_Age_int__::_param1 cmp)",
    "slices.pdqsortCmpFunc_go.shape.string_": "void __golang slices_pdqsortCmpFunc_go_shape_string_(slices_pdqsortCmpFunc_go_shape_string_::_param9 data, int a, int b, int limit, slices_pdqsortCmpFunc_go_shape_string_::_param10 cmp)",
    "slices.partitionEqualCmpFunc_go.shape.string_": "int __golang slices_partitionEqualCmpFunc_go_shape_string_(slices_partitionEqualCmpFunc_go_shape_string_::_param0 data, int a, int b, int pivot, slices_partitionEqualCmpFunc_go_shape_string_::_param1 cmp)",
    "slices.partialInsertionSortCmpFunc_go.shape.string_": "bool __golang slices_partialInsertionSortCmpFunc_go_shape_string_(slices_partialInsertionSortCmpFunc_go_shape_string_::_param0 data, int a, int b, slices_partialInsertionSortCmpFunc_go_shape_string_::_param1 cmp)",
    "slices.medianCmpFunc_go.shape.string_": "int __golang slices_medianCmpFunc_go_shape_string_(slices_medianCmpFunc_go_shape_string_::_param1 data, int a, int b, int c, int *swaps, slices_medianCmpFunc_go_shape_string_::_param2 cmp)",
    "slices.breakPatternsCmpFunc_go.shape.string_": "void __golang slices_breakPatternsCmpFunc_go_shape_string_(slices_breakPatternsCmpFunc_go_shape_string_::_param0 data, int a, int b, slices_breakPatternsCmpFunc_go_shape_string_::_param1 cmp)",
    "slices.heapSortCmpFunc_go.shape.string_": "void __golang slices_heapSortCmpFunc_go_shape_string_(slices_heapSortCmpFunc_go_shape_string_::_param1 data, int a, int b, slices_heapSortCmpFunc_go_shape_string_::_param2 cmp)",
    "slices.siftDownCmpFunc_go.shape.string_": "void __golang slices_siftDownCmpFunc_go_shape_string_(slices_siftDownCmpFunc_go_shape_string_::_param0 data, int lo, int hi, int first, slices_siftDownCmpFunc_go_shape_string_::_param1 cmp)",
    "slices.insertionSortCmpFunc_go.shape.string_": "void __golang slices_insertionSortCmpFunc_go_shape_string_(slices_insertionSortCmpFunc_go_shape_string_::_param0 data, int a, int b, slices_insertionSortCmpFunc_go_shape_string_::_param1 cmp)",
    "slices.pdqsortOrdered_go.shape.int8_": "void __golang slices_pdqsortOrdered_go_shape_int8_(slices_pdqsortOrdered_go_shape_int8_::_param10 data, int a, int b, int limit)",
    "slices.partitionEqualOrdered_go.shape.int8_": "int __golang slices_partitionEqualOrdered_go_shape_int8_(slices_partitionEqualOrdered_go_shape_int8_::_param1 data, int a, int b, int pivot)",
    "slices.partialInsertionSortOrdered_go.shape.int8_": "bool __golang slices_partialInsertionSortOrdered_go_shape_int8_(slices_partialInsertionSortOrdered_go_shape_int8_::_param1 data, int a, int b)",
    "slices.medianOrdered_go.shape.int8_": "int __golang slices_medianOrdered_go_shape_int8_(slices_medianOrdered_go_shape_int8_::_param1 data, int a, int b, int c, int *swaps)",
    "slices.breakPatternsOrdered_go.shape.int8_": "void __golang slices_breakPatternsOrdered_go_shape_int8_(slices_breakPatternsOrdered_go_shape_int8_::_param0 data, int a, int b)",
    "slices.heapSortOrdered_go.shape.int8_": "void __golang slices_heapSortOrdered_go_shape_int8_(slices_heapSortOrdered_go_shape_int8_::_param1 data, int a, int b)",
    "slices.siftDownOrdered_go.shape.int8_": "void __golang slices_siftDownOrdered_go_shape_int8_(slices_siftDownOrdered_go_shape_int8_::_param1 data, int lo, int hi, int first)",
    "slices.insertionSortOrdered_go.shape.int8_": "void __golang slices_insertionSortOrdered_go_shape_int8_(slices_insertionSortOrdered_go_shape_int8_::_param1 data, int a, int b)",
    "slices.Replace_go.shape._slice_string_comma_go.shape.string_": "slices_Replace_go_shape__slice_string_comma_go_shape_string_::_param4 __golang slices_Replace_go_shape__slice_string_comma_go_shape_string_(slices_Replace_go_shape__slice_string_comma_go_shape_string_::_param4 s, int i, int j, slices_Replace_go_shape__slice_string_comma_go_shape_string_::_param5 v)",
    "slices.rotateLeft_go.shape.string_": "void __golang slices_rotateLeft_go_shape_string_(slices_rotateLeft_go_shape_string_::_param1 s, int r)",
    "slices.Insert_go.shape._slice_string_comma_go.shape.string_": "slices_Insert_go_shape__slice_string_comma_go_shape_string_::_param2 __golang slices_Insert_go_shape__slice_string_comma_go_shape_string_(slices_Insert_go_shape__slice_string_comma_go_shape_string_::_param2 s, int i, slices_Insert_go_shape__slice_string_comma_go_shape_string_::_param3 v)",
    "slices.MinFunc_go.shape._slice_main.Person_3_comma_go.shape.struct__Name_string_Age_int__": "slices_MinFunc_go_shape__slice_main_Person_3_comma_go_shape_struct__Name_string_Age_int__::_param2 __golang slices_MinFunc_go_shape__slice_main_Person_3_comma_go_shape_struct__Name_string_Age_int__(slices_MinFunc_go_shape__slice_main_Person_3_comma_go_shape_struct__Name_string_Age_int__::_param0 x, slices_MinFunc_go_shape__slice_main_Person_3_comma_go_shape_struct__Name_string_Age_int__::_param1 cmp)",
    "slices.MaxFunc_go.shape._slice_main.Person_2_comma_go.shape.struct__Name_string_Age_int__": "slices_MaxFunc_go_shape__slice_main_Person_2_comma_go_shape_struct__Name_string_Age_int__::_param2 __golang slices_MaxFunc_go_shape__slice_main_Person_2_comma_go_shape_struct__Name_string_Age_int__(slices_MaxFunc_go_shape__slice_main_Person_2_comma_go_shape_struct__Name_string_Age_int__::_param0 x, slices_MaxFunc_go_shape__slice_main_Person_2_comma_go_shape_struct__Name_string_Age_int__::_param1 cmp)",
    "slices.IsSortedFunc_go.shape._slice_string_comma_go.shape.string_": "bool __golang slices_IsSortedFunc_go_shape__slice_string_comma_go_shape_string_(slices_IsSortedFunc_go_shape__slice_string_comma_go_shape_string_::_param0 x, slices_IsSortedFunc_go_shape__slice_string_comma_go_shape_string_::_param1 cmp)",
    "slices.EqualFunc_go.shape._slice_int_comma_go.shape._slice_string_comma_go.shape.int_comma_go.shape.string_": "bool __golang slices_EqualFunc_go_shape__slice_int_comma_go_shape__slice_string_comma_go_shape_int_comma_go_shape_string_(slices_EqualFunc_go_shape__slice_int_comma_go_shape__slice_string_comma_go_shape_int_comma_go_shape_string_::_param0 s1, slices_EqualFunc_go_shape__slice_int_comma_go_shape__slice_string_comma_go_shape_int_comma_go_shape_string_::_param1 s2, slices_EqualFunc_go_shape__slice_int_comma_go_shape__slice_string_comma_go_shape_int_comma_go_shape_string_::_param2 eq)",
    "slices.DeleteFunc_go.shape._slice_int_comma_go.shape.int_": "slices_DeleteFunc_go_shape__slice_int_comma_go_shape_int_::_param1 __golang slices_DeleteFunc_go_shape__slice_int_comma_go_shape_int_(slices_DeleteFunc_go_shape__slice_int_comma_go_shape_int_::_param1 s, slices_DeleteFunc_go_shape__slice_int_comma_go_shape_int_::_param2 del)",
    "slices.ContainsFunc_go.shape._slice_int_comma_go.shape.int_": "bool __golang slices_ContainsFunc_go_shape__slice_int_comma_go_shape_int_(slices_ContainsFunc_go_shape__slice_int_comma_go_shape_int_::_param1 s, slices_ContainsFunc_go_shape__slice_int_comma_go_shape_int_::_param2 f)",
    "slices.CompareFunc_go.shape._slice_int_comma_go.shape._slice_string_comma_go.shape.int_comma_go.shape.string_": "int __golang slices_CompareFunc_go_shape__slice_int_comma_go_shape__slice_string_comma_go_shape_int_comma_go_shape_string_(slices_CompareFunc_go_shape__slice_int_comma_go_shape__slice_string_comma_go_shape_int_comma_go_shape_string_::_param0 s1, slices_CompareFunc_go_shape__slice_int_comma_go_shape__slice_string_comma_go_shape_int_comma_go_shape_string_::_param1 s2, slices_CompareFunc_go_shape__slice_int_comma_go_shape__slice_string_comma_go_shape_int_comma_go_shape_string_::_param2 cmp)",
    "slices.Compare_go.shape._slice_string_comma_go.shape.string_": "int __golang slices_Compare_go_shape__slice_string_comma_go_shape_string_(slices_Compare_go_shape__slice_string_comma_go_shape_string_::_param1 s1, slices_Compare_go_shape__slice_string_comma_go_shape_string_::_param1 s2)",
    "slices.CompactFunc_go.shape._slice_string_comma_go.shape.string_": "slices_CompactFunc_go_shape__slice_string_comma_go_shape_string_::_param0 __golang slices_CompactFunc_go_shape__slice_string_comma_go_shape_string_(slices_CompactFunc_go_shape__slice_string_comma_go_shape_string_::_param0 s, slices_CompactFunc_go_shape__slice_string_comma_go_shape_string_::_param1 eq)"
}